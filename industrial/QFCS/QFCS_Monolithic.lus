type DATA_TYPES__EGI__treal = struct {ALT : Base_Types__Float; AOA : Base_Types__Float; FPACCEL : Base_Types__Float; GAMLNS : Base_Types__Float; GS : Base_Types__Float; HDD : Base_Types__Float; HDOT : Base_Types__Float; LAT : Base_Types__Float; LON : Base_Types__Float; NX : Base_Types__Float; NY : Base_Types__Float; NZ : Base_Types__Float; PB : Base_Types__Float; PHI : Base_Types__Float; PSI : Base_Types__Float; Pres : Base_Types__Float; QB : Base_Types__Float; RB : Base_Types__Float; TAT : Base_Types__Float; THETA : Base_Types__Float; TIME_STAMP : Base_Types__Integer; Temp : Base_Types__Float; TotPres : Base_Types__Float; VE : Base_Types__Float; VGOT : Base_Types__Float; VN : Base_Types__Float; XTACC : Base_Types__Float};
type DATA_TYPES__Spoilers__tbool = struct {SPLIB : Base_Types__Boolean; SPLOB : Base_Types__Boolean; SPRIB : Base_Types__Boolean; SPROB : Base_Types__Boolean};
type DATA_TYPES__QUAD_Stabilizer__treal = struct {STAB1 : DATA_TYPES__Stabilizer__treal; STAB2 : DATA_TYPES__Stabilizer__treal; STAB3 : DATA_TYPES__Stabilizer__treal; STAB4 : DATA_TYPES__Stabilizer__treal};
type DATA_TYPES__AoA__tbool = struct {AOA : Base_Types__Boolean};
type DATA_TYPES__QUAD_Flaps__tbool = struct {FLAPS1 : DATA_TYPES__Flaps__tbool; FLAPS2 : DATA_TYPES__Flaps__tbool; FLAPS3 : DATA_TYPES__Flaps__tbool; FLAPS4 : DATA_TYPES__Flaps__tbool};
type DATA_TYPES__AoA__treal = struct {AOA : Base_Types__Float; TIME_STAMP : Base_Types__Integer};
type DATA_TYPES__DUAL_AirData__treal = struct {AD1 : DATA_TYPES__AirData__treal; AD2 : DATA_TYPES__AirData__treal};
type DATA_TYPES__QUAD_Ailerons__tbool = struct {AIL1 : DATA_TYPES__Ailerons__tbool; AIL2 : DATA_TYPES__Ailerons__tbool; AIL3 : DATA_TYPES__Ailerons__tbool; AIL4 : DATA_TYPES__Ailerons__tbool};
type DATA_TYPES__DUAL_AoA__treal = struct {AOA1 : DATA_TYPES__AoA__treal; AOA2 : DATA_TYPES__AoA__treal};
type DATA_TYPES__Rudders__treal = struct {RUDL : Base_Types__Float; RUDU : Base_Types__Float; TIME_STAMP : Base_Types__Integer};
type DATA_TYPES__Flaps__tbool = struct {FLLIB : Base_Types__Boolean; FLLOB : Base_Types__Boolean; FLRIB : Base_Types__Boolean; FLROB : Base_Types__Boolean};
type DATA_TYPES__Actuators__impl = struct {AILL : Base_Types__Float; AILR : Base_Types__Float; BRAKE : Base_Types__Float; ELLIB : Base_Types__Float; ELLOB : Base_Types__Float; ELRIB : Base_Types__Float; ELROB : Base_Types__Float; FLAPLI : Base_Types__Float; FLAPLO : Base_Types__Float; FLAPRI : Base_Types__Float; FLAPRO : Base_Types__Float; GEAR : Base_Types__Float; RUDLO : Base_Types__Float; RUDUP : Base_Types__Float; SPLLIB : Base_Types__Float; SPLLOB : Base_Types__Float; SPLRIB : Base_Types__Float; SPLROB : Base_Types__Float; STEER : Base_Types__Float; THROTL : Base_Types__Float; THROTR : Base_Types__Float};
type DATA_TYPES__QUAD_EGI__tbool = struct {egi1 : DATA_TYPES__EGI__tbool; egi2 : DATA_TYPES__EGI__tbool; egi3 : DATA_TYPES__EGI__tbool; egi4 : DATA_TYPES__EGI__tbool};
type DATA_TYPES__QUAD_Spoilers__tbool = struct {SPOIL1 : DATA_TYPES__Spoilers__tbool; SPOIL2 : DATA_TYPES__Spoilers__tbool; SPOIL3 : DATA_TYPES__Spoilers__tbool; SPOIL4 : DATA_TYPES__Spoilers__tbool};
type DATA_TYPES__QUAD_EGI__treal = struct {egi1 : DATA_TYPES__EGI__treal; egi2 : DATA_TYPES__EGI__treal; egi3 : DATA_TYPES__EGI__treal; egi4 : DATA_TYPES__EGI__treal};
type DATA_TYPES__QUAD_Spoilers__treal = struct {SPOIL1 : DATA_TYPES__Spoilers__treal; SPOIL2 : DATA_TYPES__Spoilers__treal; SPOIL3 : DATA_TYPES__Spoilers__treal; SPOIL4 : DATA_TYPES__Spoilers__treal};
type DATA_TYPES__EGI__tbool = struct {ALT : Base_Types__Boolean; AOA : Base_Types__Boolean; FPACCEL : Base_Types__Boolean; GAMLNS : Base_Types__Boolean; GS : Base_Types__Boolean; HDD : Base_Types__Boolean; HDOT : Base_Types__Boolean; LAT : Base_Types__Boolean; LON : Base_Types__Boolean; NX : Base_Types__Boolean; NY : Base_Types__Boolean; NZ : Base_Types__Boolean; PB : Base_Types__Boolean; PHI : Base_Types__Boolean; PSI : Base_Types__Boolean; Pres : Base_Types__Boolean; QB : Base_Types__Boolean; RB : Base_Types__Boolean; TAT : Base_Types__Boolean; THETA : Base_Types__Boolean; Temp : Base_Types__Boolean; TotPres : Base_Types__Boolean; VE : Base_Types__Boolean; VGOT : Base_Types__Boolean; VN : Base_Types__Boolean; XTACC : Base_Types__Boolean};
type DATA_TYPES__Elevators__treal = struct {ELLIB : Base_Types__Float; ELLOB : Base_Types__Float; ELRIB : Base_Types__Float; ELROB : Base_Types__Float; TIME_STAMP : Base_Types__Integer};
type DATA_TYPES__NumActuators__impl = struct {AILL : Base_Types__Integer; AILR : Base_Types__Integer; BRAKE : Base_Types__Integer; ELLIB : Base_Types__Integer; ELLOB : Base_Types__Integer; ELRIB : Base_Types__Integer; ELROB : Base_Types__Integer; FLAPLI : Base_Types__Integer; FLAPLO : Base_Types__Integer; FLAPRI : Base_Types__Integer; FLAPRO : Base_Types__Integer; GEAR : Base_Types__Integer; RUDLO : Base_Types__Integer; RUDUP : Base_Types__Integer; SPLLIB : Base_Types__Integer; SPLLOB : Base_Types__Integer; SPLRIB : Base_Types__Integer; SPLROB : Base_Types__Integer; STEER : Base_Types__Integer; THROTL : Base_Types__Integer; THROTR : Base_Types__Integer};
type DATA_TYPES__BoolActuators__impl = struct {AILL : Base_Types__Boolean; AILR : Base_Types__Boolean; BRAKE : Base_Types__Boolean; ELLIB : Base_Types__Boolean; ELLOB : Base_Types__Boolean; ELRIB : Base_Types__Boolean; ELROB : Base_Types__Boolean; FLAPLI : Base_Types__Boolean; FLAPLO : Base_Types__Boolean; FLAPRI : Base_Types__Boolean; FLAPRO : Base_Types__Boolean; GEAR : Base_Types__Boolean; RUDLO : Base_Types__Boolean; RUDUP : Base_Types__Boolean; SPLLIB : Base_Types__Boolean; SPLLOB : Base_Types__Boolean; SPLRIB : Base_Types__Boolean; SPLROB : Base_Types__Boolean; STEER : Base_Types__Boolean; THROTL : Base_Types__Boolean; THROTR : Base_Types__Boolean};
type DATA_TYPES__AirData__tbool = struct {Pres : Base_Types__Boolean; TAT : Base_Types__Boolean; Temp : Base_Types__Boolean; TotPres : Base_Types__Boolean};
type DATA_TYPES__Rudders__tbool = struct {RUDL : Base_Types__Boolean; RUDU : Base_Types__Boolean};
type DATA_TYPES__DUAL_AoA__tbool = struct {AOA1 : DATA_TYPES__AoA__tbool; AOA2 : DATA_TYPES__AoA__tbool};
type DATA_TYPES__DUAL_AirData__tbool = struct {AD1 : DATA_TYPES__AirData__tbool; AD2 : DATA_TYPES__AirData__tbool};
type DATA_TYPES__Ailerons__treal = struct {AILL : Base_Types__Float; AILR : Base_Types__Float; TIME_STAMP : Base_Types__Integer};
type DATA_TYPES__Flaps__treal = struct {FLLIB : Base_Types__Float; FLLOB : Base_Types__Float; FLRIB : Base_Types__Float; FLROB : Base_Types__Float; TIME_STAMP : Base_Types__Integer};
type DATA_TYPES__quad_bool = struct {val1 : bool; val2 : bool; val3 : bool; val4 : bool};
type DATA_TYPES__Spoilers__treal = struct {SPLIB : Base_Types__Float; SPLOB : Base_Types__Float; SPRIB : Base_Types__Float; SPROB : Base_Types__Float; TIME_STAMP : Base_Types__Integer};
type DATA_TYPES__QUAD_Ailerons__treal = struct {AIL1 : DATA_TYPES__Ailerons__treal; AIL2 : DATA_TYPES__Ailerons__treal; AIL3 : DATA_TYPES__Ailerons__treal; AIL4 : DATA_TYPES__Ailerons__treal};
type DATA_TYPES__QUAD_Elevators__tbool = struct {EL1 : DATA_TYPES__Elevators__tbool; EL2 : DATA_TYPES__Elevators__tbool; EL3 : DATA_TYPES__Elevators__tbool; EL4 : DATA_TYPES__Elevators__tbool};
type DATA_TYPES__QUAD_Elevators__treal = struct {EL1 : DATA_TYPES__Elevators__treal; EL2 : DATA_TYPES__Elevators__treal; EL3 : DATA_TYPES__Elevators__treal; EL4 : DATA_TYPES__Elevators__treal};
type DATA_TYPES__QUAD_Flaps__treal = struct {FLAPS1 : DATA_TYPES__Flaps__treal; FLAPS2 : DATA_TYPES__Flaps__treal; FLAPS3 : DATA_TYPES__Flaps__treal; FLAPS4 : DATA_TYPES__Flaps__treal};
type DATA_TYPES__dual_bool = struct {val1 : bool; val2 : bool};
type DATA_TYPES__AirData__treal = struct {Pres : Base_Types__Float; TAT : Base_Types__Float; TIME_STAMP : Base_Types__Integer; Temp : Base_Types__Float; TotPres : Base_Types__Float};
type DATA_TYPES__QUAD_Stabilizer__tbool = struct {STAB1 : Base_Types__Boolean; STAB2 : Base_Types__Boolean; STAB3 : Base_Types__Boolean; STAB4 : Base_Types__Boolean};
type DATA_TYPES__Elevators__tbool = struct {ELLIB : Base_Types__Boolean; ELLOB : Base_Types__Boolean; ELRIB : Base_Types__Boolean; ELROB : Base_Types__Boolean};
type DATA_TYPES__QUAD_Rudders__treal = struct {RUDD1 : DATA_TYPES__Rudders__treal; RUDD2 : DATA_TYPES__Rudders__treal; RUDD3 : DATA_TYPES__Rudders__treal; RUDD4 : DATA_TYPES__Rudders__treal};
type DATA_TYPES__Stabilizer__treal = struct {TIME_STAMP : Base_Types__Integer; VAL : Base_Types__Float};
type DATA_TYPES__QUAD_Rudders__tbool = struct {RUDD1 : DATA_TYPES__Rudders__tbool; RUDD2 : DATA_TYPES__Rudders__tbool; RUDD3 : DATA_TYPES__Rudders__tbool; RUDD4 : DATA_TYPES__Rudders__tbool};
type DATA_TYPES__Ailerons__tbool = struct {AILL : Base_Types__Boolean; AILR : Base_Types__Boolean};
type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__FCC1__ISAS_comp(
  __ASSUME__HIST : bool;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  time : real;
  elevators_failed_update : DATA_TYPES__quad_bool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  stabilizers_failed_update : DATA_TYPES__quad_bool;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  egi_select_fault : DATA_TYPES__EGI__tbool;
  elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  rudders_sig_tol : DATA_TYPES__Rudders__treal;
  flaps_sig_tol : DATA_TYPES__Flaps__treal;
  aoa_sig_tol : DATA_TYPES__AoA__treal;
  air_data_sig_tol : DATA_TYPES__AirData__treal;
  spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal;
  egi_select : DATA_TYPES__EGI__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal;
  elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
let
  __GUARANTEE0 = ISAS_S_100_130__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_failed_update, ailerons_failed_update, rudders_failed_update, flaps_failed_update, aoa_failed_update, air_data_failed_update, spoilers_failed_update, stabilizers_failed_update);

  __GUARANTEE1 = ISAS_S_110__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_in_range, ailerons_in_range, rudders_in_range, flaps_in_range, aoa_in_range, air_data_in_range, spoilers_in_range, stabilizer_in_range);

  __GUARANTEE2 = ISAS_S_140__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, aoa_within_tol, air_data_within_tol);

  __GUARANTEE3 = ISAS_S_140_150__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_within_tol, ailerons_within_tol, rudders_within_tol, flaps_within_tol, aoa_within_tol, air_data_within_tol, spoilers_within_tol, stabilizer_within_tol);

  __GUARANTEE4 = ISAS_S_170__req(aoa, air_data, aoa_within_tol, air_data_within_tol, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, aoa_select, air_data_select);

  __GUARANTEE5 = ISAS_S_190__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, egi_select, egi_select_fault, aoa_within_tol, air_data_within_tol);

  __GUARANTEE6 = ISAS_S_200__req(aoa, air_data, aoa_faults, air_data_faults, egi_select, aoa_select, air_data_select);

  __GUARANTEE7 = ISAS_S_210__req(aoa, air_data, aoa_faults, air_data_faults, egi_select, aoa_select, air_data_select);

  __GUARANTEE8 = ISAS_S_220__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, egi_select, egi_select_fault, aoa_select, air_data_select);

  __GUARANTEE9 = ISAS_S_260__req(elevators, ailerons, rudders, flaps, spoilers, stabilizers, elevators_faults, ailerons_faults, rudders_faults, flaps_faults, spoilers_faults, stabilizers_faults, elevators_sig_tol, ailerons_sig_tol, rudders_sig_tol, flaps_sig_tol, spoilers_sig_tol, stabilizer_sig_tol, elevators_select, ailerons_select, rudders_select, flaps_select, spoilers_select, stabilizers_select);

  __GUARANTEE10 = ISAS_S_240__req(elevators_within_tol, ailerons_within_tol, rudders_within_tol, flaps_within_tol, spoilers_within_tol, stabilizer_within_tol, aoa_within_tol, air_data_within_tol, elevators_failed_update, ailerons_failed_update, rudders_failed_update, flaps_failed_update, spoilers_failed_update, stabilizers_failed_update, aoa_failed_update, air_data_failed_update, elevators_in_range, ailerons_in_range, rudders_in_range, flaps_in_range, spoilers_in_range, stabilizer_in_range, aoa_in_range, air_data_in_range, elevators_faults, ailerons_faults, rudders_faults, flaps_faults, spoilers_faults, stabilizers_faults, aoa_faults, air_data_faults);

  __ASSERT = (true and ((stabilizer_sig_tol = DATA_TYPES__Stabilizer__treal {TIME_STAMP = 0; VAL = (0.1 * 50.0)}) and ((spoilers_sig_tol = DATA_TYPES__Spoilers__treal {SPLIB = (0.1 * 50.0); SPLOB = (0.1 * 50.0); SPRIB = (0.1 * 50.0); SPROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((air_data_sig_tol = DATA_TYPES__AirData__treal {Pres = (0.1 * 50.0); TAT = (0.1 * 50.0); TIME_STAMP = 0; Temp = (0.1 * 50.0); TotPres = (0.1 * 50.0)}) and ((aoa_sig_tol = DATA_TYPES__AoA__treal {AOA = (0.1 * 50.0); TIME_STAMP = 0}) and ((flaps_sig_tol = DATA_TYPES__Flaps__treal {FLLIB = (0.1 * 50.0); FLLOB = (0.1 * 50.0); FLRIB = (0.1 * 50.0); FLROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((rudders_sig_tol = DATA_TYPES__Rudders__treal {RUDL = (0.1 * 50.0); RUDU = (0.1 * 50.0); TIME_STAMP = 0}) and ((ailerons_sig_tol = DATA_TYPES__Ailerons__treal {AILL = (0.1 * 50.0); AILR = (0.1 * 50.0); TIME_STAMP = 0}) and ((elevators_sig_tol = DATA_TYPES__Elevators__treal {ELLIB = (0.1 * 50.0); ELLOB = (0.1 * 50.0); ELRIB = (0.1 * 50.0); ELROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((__ASSUME__HIST => (__GUARANTEE10 and (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true)))))))))))) and true))))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9, __GUARANTEE10;

tel;

node _TOP__FCC1__OSAS_comp(
  __ASSUME__HIST : bool;
  acts_in : DATA_TYPES__Actuators__impl;
  acts_ret : DATA_TYPES__Actuators__impl;
  acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  ccdl_frame_count : Base_Types__Integer;
  ccdl_failed : Base_Types__Boolean;
  num_valid_acts : DATA_TYPES__NumActuators__impl;
  osas_failed : Base_Types__Boolean;
  act_claw_fails : Base_Types__Boolean;
  time : real;
  fail_counts : DATA_TYPES__NumActuators__impl;
  act_gains : DATA_TYPES__Actuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  acts_fail : DATA_TYPES__BoolActuators__impl;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
let
  __GUARANTEE0 = OSAS_S_110__req(acts_out, acts_ret, fail_counts);

  __GUARANTEE1 = OSAS_S_120__req(acts_out, acts_ret, acts_fail);

  __GUARANTEE2 = OSAS_S_140__req(acts_out, acts_fail);

  __GUARANTEE3 = (true -> (ccdl_failed = (true -> (ccdl_frame_count <> ((pre ccdl_frame_count) + 1)))));

  __GUARANTEE4 = OSAS_S_170__req(act_gains, ccdl_failed);

  __GUARANTEE5 = OSAS_S_180__req(act_gains, num_valid_acts, ccdl_failed);

  __GUARANTEE6 = OSAS_S_190__req(acts_in, acts_out, act_gains);

  __GUARANTEE7 = OSAS_S_240__req(act_gains, osas_failed);

  __GUARANTEE8 = OSAS_S_250__req(act_gains, act_claw_fails);

  __GUARANTEE9 = OSAS_S_210_220_230__req(sovs1, sovs2, acts_isas_fail, acts_fail, acts_ccdl_num_fail);

  __ASSERT = (true and ((__ASSUME__HIST => (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true))))))))))) and true));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9;

tel;

node _TOP__FCC1__CLAW_comp(
  __ASSUME__HIST : bool;
  time : real;
  acts : DATA_TYPES__Actuators__impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = ((((((((((((((((((((CLAW__CLAW__bound_rec(acts.THROTL, 0.0, 50.0) and CLAW__CLAW__bound_rec(acts.THROTR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELLOB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELLIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELROB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELRIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.AILL, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.AILR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.RUDUP, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.RUDLO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLLIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLLOB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLRIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLROB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPLI, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPLO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPRO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPRI, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.GEAR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.BRAKE, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.STEER, 0.0, 50.0));

  __ASSERT = (true and ((__ASSUME__HIST => (__GUARANTEE0 and true)) and true));

  --%IVC __GUARANTEE0;

tel;

node _TOP__FCC1(
  __ASSUME__HIST : bool;
  ISAS_comp__elevators : DATA_TYPES__QUAD_Elevators__treal;
  ISAS_comp__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  ISAS_comp__rudders : DATA_TYPES__QUAD_Rudders__treal;
  ISAS_comp__flaps : DATA_TYPES__QUAD_Flaps__treal;
  ISAS_comp__aoa : DATA_TYPES__DUAL_AoA__treal;
  ISAS_comp__air_data : DATA_TYPES__DUAL_AirData__treal;
  ISAS_comp__egi : DATA_TYPES__QUAD_EGI__treal;
  ISAS_comp__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  ISAS_comp__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  ISAS_comp__time : real;
  OSAS_comp__acts_in : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_ret : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  OSAS_comp__ccdl_frame_count : Base_Types__Integer;
  OSAS_comp__ccdl_failed : Base_Types__Boolean;
  OSAS_comp__num_valid_acts : DATA_TYPES__NumActuators__impl;
  OSAS_comp__osas_failed : Base_Types__Boolean;
  OSAS_comp__act_claw_fails : Base_Types__Boolean;
  OSAS_comp__time : real;
  CLAW_comp__time : real;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  acts_ret : DATA_TYPES__Actuators__impl;
  num_valid_acts : DATA_TYPES__NumActuators__impl;
  time : real;
  ISAS_comp__elevators_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__ailerons_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__rudders_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__flaps_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__aoa_failed_update : DATA_TYPES__dual_bool;
  ISAS_comp__air_data_failed_update : DATA_TYPES__dual_bool;
  ISAS_comp__spoilers_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__stabilizers_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp__elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp__egi_select_fault : DATA_TYPES__EGI__tbool;
  ISAS_comp__elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ISAS_comp__ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  ISAS_comp__rudders_sig_tol : DATA_TYPES__Rudders__treal;
  ISAS_comp__flaps_sig_tol : DATA_TYPES__Flaps__treal;
  ISAS_comp__aoa_sig_tol : DATA_TYPES__AoA__treal;
  ISAS_comp__air_data_sig_tol : DATA_TYPES__AirData__treal;
  ISAS_comp__spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  ISAS_comp__stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  ISAS_comp__elevators_select : DATA_TYPES__Elevators__treal;
  ISAS_comp__ailerons_select : DATA_TYPES__Ailerons__treal;
  ISAS_comp__rudders_select : DATA_TYPES__Rudders__treal;
  ISAS_comp__flaps_select : DATA_TYPES__Flaps__treal;
  ISAS_comp__aoa_select : DATA_TYPES__AoA__treal;
  ISAS_comp__air_data_select : DATA_TYPES__AirData__treal;
  ISAS_comp__egi_select : DATA_TYPES__EGI__treal;
  ISAS_comp__spoilers_select : DATA_TYPES__Spoilers__treal;
  ISAS_comp__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  ISAS_comp__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  ISAS_comp__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp____ASSUME__HIST : bool;
  OSAS_comp__fail_counts : DATA_TYPES__NumActuators__impl;
  OSAS_comp__act_gains : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_out : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__sovs1 : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__sovs2 : DATA_TYPES__BoolActuators__impl;
  OSAS_comp____ASSUME__HIST : bool;
  CLAW_comp__acts : DATA_TYPES__Actuators__impl;
  CLAW_comp____ASSUME__HIST : bool;
  claw_acts : DATA_TYPES__Actuators__impl;
  osas_failure : bool;
  elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal;
  egi_select : DATA_TYPES__EGI__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal;
  acts_fail : DATA_TYPES__BoolActuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl
) returns (
  __ASSERT : bool
);
let
  __ASSERT = (true and ((claw_acts = CLAW_comp__acts) and ((CLAW_comp__acts = OSAS_comp__acts_in) and ((OSAS_comp__acts_fail = acts_fail) and ((ISAS_comp__stabilizers_select = stabilizers_select) and ((ISAS_comp__egi_select = egi_select) and ((ISAS_comp__air_data_select = air_data_select) and ((ISAS_comp__aoa_select = aoa_select) and ((ISAS_comp__flaps_select = flaps_select) and ((ISAS_comp__spoilers_select = spoilers_select) and ((ISAS_comp__rudders_select = rudders_select) and ((ISAS_comp__ailerons_select = ailerons_select) and ((ISAS_comp__elevators_select = elevators_select) and ((ISAS_comp__stabilizers_faults = stabilizers_faults) and ((ISAS_comp__egi_faults = egi_faults) and ((ISAS_comp__air_data_faults = air_data_faults) and ((ISAS_comp__aoa_faults = aoa_faults) and ((ISAS_comp__flaps_faults = flaps_faults) and ((ISAS_comp__spoilers_faults = spoilers_faults) and ((ISAS_comp__rudders_faults = rudders_faults) and ((ISAS_comp__ailerons_faults = ailerons_faults) and ((ISAS_comp__elevators_faults = elevators_faults) and ((OSAS_comp__sovs2 = sovs2) and ((OSAS_comp__sovs1 = sovs1) and ((OSAS_comp__acts_out = acts_out) and ((stabilizers = ISAS_comp__stabilizers) and ((egi = ISAS_comp__egi) and ((air_data = ISAS_comp__air_data) and ((aoa = ISAS_comp__aoa) and ((flaps = ISAS_comp__flaps) and ((spoilers = ISAS_comp__spoilers) and ((rudders = ISAS_comp__rudders) and ((ailerons = ISAS_comp__ailerons) and ((elevators = ISAS_comp__elevators) and ((num_valid_acts = OSAS_comp__num_valid_acts) and ((acts_ret = OSAS_comp__acts_ret) and ((CLAW_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC1__CLAW_comp(CLAW_comp____ASSUME__HIST, CLAW_comp__time, CLAW_comp__acts) and ((time = CLAW_comp__time) and ((OSAS_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC1__OSAS_comp(OSAS_comp____ASSUME__HIST, OSAS_comp__acts_in, OSAS_comp__acts_ret, OSAS_comp__acts_claw_fail, OSAS_comp__acts_isas_fail, OSAS_comp__acts_ccdl_num_fail, OSAS_comp__ccdl_frame_count, OSAS_comp__ccdl_failed, OSAS_comp__num_valid_acts, OSAS_comp__osas_failed, OSAS_comp__act_claw_fails, OSAS_comp__time, OSAS_comp__fail_counts, OSAS_comp__act_gains, OSAS_comp__acts_out, OSAS_comp__acts_fail, OSAS_comp__sovs1, OSAS_comp__sovs2) and ((time = OSAS_comp__time) and ((ISAS_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC1__ISAS_comp(ISAS_comp____ASSUME__HIST, ISAS_comp__elevators, ISAS_comp__ailerons, ISAS_comp__rudders, ISAS_comp__flaps, ISAS_comp__aoa, ISAS_comp__air_data, ISAS_comp__egi, ISAS_comp__spoilers, ISAS_comp__stabilizers, ISAS_comp__time, ISAS_comp__elevators_failed_update, ISAS_comp__ailerons_failed_update, ISAS_comp__rudders_failed_update, ISAS_comp__flaps_failed_update, ISAS_comp__aoa_failed_update, ISAS_comp__air_data_failed_update, ISAS_comp__spoilers_failed_update, ISAS_comp__stabilizers_failed_update, ISAS_comp__elevators_in_range, ISAS_comp__ailerons_in_range, ISAS_comp__rudders_in_range, ISAS_comp__flaps_in_range, ISAS_comp__aoa_in_range, ISAS_comp__air_data_in_range, ISAS_comp__spoilers_in_range, ISAS_comp__stabilizer_in_range, ISAS_comp__elevators_within_tol, ISAS_comp__ailerons_within_tol, ISAS_comp__rudders_within_tol, ISAS_comp__flaps_within_tol, ISAS_comp__aoa_within_tol, ISAS_comp__air_data_within_tol, ISAS_comp__spoilers_within_tol, ISAS_comp__stabilizer_within_tol, ISAS_comp__egi_select_fault, ISAS_comp__elevators_sig_tol, ISAS_comp__ailerons_sig_tol, ISAS_comp__rudders_sig_tol, ISAS_comp__flaps_sig_tol, ISAS_comp__aoa_sig_tol, ISAS_comp__air_data_sig_tol, ISAS_comp__spoilers_sig_tol, ISAS_comp__stabilizer_sig_tol, ISAS_comp__elevators_select, ISAS_comp__ailerons_select, ISAS_comp__rudders_select, ISAS_comp__flaps_select, ISAS_comp__aoa_select, ISAS_comp__air_data_select, ISAS_comp__egi_select, ISAS_comp__spoilers_select, ISAS_comp__stabilizers_select, ISAS_comp__elevators_faults, ISAS_comp__ailerons_faults, ISAS_comp__rudders_faults, ISAS_comp__flaps_faults, ISAS_comp__aoa_faults, ISAS_comp__air_data_faults, ISAS_comp__egi_faults, ISAS_comp__spoilers_faults, ISAS_comp__stabilizers_faults) and ((time = ISAS_comp__time) and ((__ASSUME__HIST => true) and true))))))))))))))))))))))))))))))))))))))))))))));

tel;

node _TOP__FCC2__ISAS_comp(
  __ASSUME__HIST : bool;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  time : real;
  elevators_failed_update : DATA_TYPES__quad_bool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  stabilizers_failed_update : DATA_TYPES__quad_bool;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  egi_select_fault : DATA_TYPES__EGI__tbool;
  elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  rudders_sig_tol : DATA_TYPES__Rudders__treal;
  flaps_sig_tol : DATA_TYPES__Flaps__treal;
  aoa_sig_tol : DATA_TYPES__AoA__treal;
  air_data_sig_tol : DATA_TYPES__AirData__treal;
  spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal;
  egi_select : DATA_TYPES__EGI__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal;
  elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
let
  __GUARANTEE0 = ISAS_S_100_130__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_failed_update, ailerons_failed_update, rudders_failed_update, flaps_failed_update, aoa_failed_update, air_data_failed_update, spoilers_failed_update, stabilizers_failed_update);

  __GUARANTEE1 = ISAS_S_110__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_in_range, ailerons_in_range, rudders_in_range, flaps_in_range, aoa_in_range, air_data_in_range, spoilers_in_range, stabilizer_in_range);

  __GUARANTEE2 = ISAS_S_140__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, aoa_within_tol, air_data_within_tol);

  __GUARANTEE3 = ISAS_S_140_150__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_within_tol, ailerons_within_tol, rudders_within_tol, flaps_within_tol, aoa_within_tol, air_data_within_tol, spoilers_within_tol, stabilizer_within_tol);

  __GUARANTEE4 = ISAS_S_170__req(aoa, air_data, aoa_within_tol, air_data_within_tol, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, aoa_select, air_data_select);

  __GUARANTEE5 = ISAS_S_190__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, egi_select, egi_select_fault, aoa_within_tol, air_data_within_tol);

  __GUARANTEE6 = ISAS_S_200__req(aoa, air_data, aoa_faults, air_data_faults, egi_select, aoa_select, air_data_select);

  __GUARANTEE7 = ISAS_S_210__req(aoa, air_data, aoa_faults, air_data_faults, egi_select, aoa_select, air_data_select);

  __GUARANTEE8 = ISAS_S_220__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, egi_select, egi_select_fault, aoa_select, air_data_select);

  __GUARANTEE9 = ISAS_S_260__req(elevators, ailerons, rudders, flaps, spoilers, stabilizers, elevators_faults, ailerons_faults, rudders_faults, flaps_faults, spoilers_faults, stabilizers_faults, elevators_sig_tol, ailerons_sig_tol, rudders_sig_tol, flaps_sig_tol, spoilers_sig_tol, stabilizer_sig_tol, elevators_select, ailerons_select, rudders_select, flaps_select, spoilers_select, stabilizers_select);

  __GUARANTEE10 = ISAS_S_240__req(elevators_within_tol, ailerons_within_tol, rudders_within_tol, flaps_within_tol, spoilers_within_tol, stabilizer_within_tol, aoa_within_tol, air_data_within_tol, elevators_failed_update, ailerons_failed_update, rudders_failed_update, flaps_failed_update, spoilers_failed_update, stabilizers_failed_update, aoa_failed_update, air_data_failed_update, elevators_in_range, ailerons_in_range, rudders_in_range, flaps_in_range, spoilers_in_range, stabilizer_in_range, aoa_in_range, air_data_in_range, elevators_faults, ailerons_faults, rudders_faults, flaps_faults, spoilers_faults, stabilizers_faults, aoa_faults, air_data_faults);

  __ASSERT = (true and ((stabilizer_sig_tol = DATA_TYPES__Stabilizer__treal {TIME_STAMP = 0; VAL = (0.1 * 50.0)}) and ((spoilers_sig_tol = DATA_TYPES__Spoilers__treal {SPLIB = (0.1 * 50.0); SPLOB = (0.1 * 50.0); SPRIB = (0.1 * 50.0); SPROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((air_data_sig_tol = DATA_TYPES__AirData__treal {Pres = (0.1 * 50.0); TAT = (0.1 * 50.0); TIME_STAMP = 0; Temp = (0.1 * 50.0); TotPres = (0.1 * 50.0)}) and ((aoa_sig_tol = DATA_TYPES__AoA__treal {AOA = (0.1 * 50.0); TIME_STAMP = 0}) and ((flaps_sig_tol = DATA_TYPES__Flaps__treal {FLLIB = (0.1 * 50.0); FLLOB = (0.1 * 50.0); FLRIB = (0.1 * 50.0); FLROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((rudders_sig_tol = DATA_TYPES__Rudders__treal {RUDL = (0.1 * 50.0); RUDU = (0.1 * 50.0); TIME_STAMP = 0}) and ((ailerons_sig_tol = DATA_TYPES__Ailerons__treal {AILL = (0.1 * 50.0); AILR = (0.1 * 50.0); TIME_STAMP = 0}) and ((elevators_sig_tol = DATA_TYPES__Elevators__treal {ELLIB = (0.1 * 50.0); ELLOB = (0.1 * 50.0); ELRIB = (0.1 * 50.0); ELROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((__ASSUME__HIST => (__GUARANTEE10 and (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true)))))))))))) and true))))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9, __GUARANTEE10;

tel;

node _TOP__FCC2__OSAS_comp(
  __ASSUME__HIST : bool;
  acts_in : DATA_TYPES__Actuators__impl;
  acts_ret : DATA_TYPES__Actuators__impl;
  acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  ccdl_frame_count : Base_Types__Integer;
  ccdl_failed : Base_Types__Boolean;
  num_valid_acts : DATA_TYPES__NumActuators__impl;
  osas_failed : Base_Types__Boolean;
  act_claw_fails : Base_Types__Boolean;
  time : real;
  fail_counts : DATA_TYPES__NumActuators__impl;
  act_gains : DATA_TYPES__Actuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  acts_fail : DATA_TYPES__BoolActuators__impl;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
let
  __GUARANTEE0 = OSAS_S_110__req(acts_out, acts_ret, fail_counts);

  __GUARANTEE1 = OSAS_S_120__req(acts_out, acts_ret, acts_fail);

  __GUARANTEE2 = OSAS_S_140__req(acts_out, acts_fail);

  __GUARANTEE3 = (true -> (ccdl_failed = (true -> (ccdl_frame_count <> ((pre ccdl_frame_count) + 1)))));

  __GUARANTEE4 = OSAS_S_170__req(act_gains, ccdl_failed);

  __GUARANTEE5 = OSAS_S_180__req(act_gains, num_valid_acts, ccdl_failed);

  __GUARANTEE6 = OSAS_S_190__req(acts_in, acts_out, act_gains);

  __GUARANTEE7 = OSAS_S_240__req(act_gains, osas_failed);

  __GUARANTEE8 = OSAS_S_250__req(act_gains, act_claw_fails);

  __GUARANTEE9 = OSAS_S_210_220_230__req(sovs1, sovs2, acts_isas_fail, acts_fail, acts_ccdl_num_fail);

  __ASSERT = (true and ((__ASSUME__HIST => (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true))))))))))) and true));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9;

tel;

node _TOP__FCC2__CLAW_comp(
  __ASSUME__HIST : bool;
  time : real;
  acts : DATA_TYPES__Actuators__impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = ((((((((((((((((((((CLAW__CLAW__bound_rec(acts.THROTL, 0.0, 50.0) and CLAW__CLAW__bound_rec(acts.THROTR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELLOB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELLIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELROB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELRIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.AILL, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.AILR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.RUDUP, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.RUDLO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLLIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLLOB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLRIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLROB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPLI, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPLO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPRO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPRI, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.GEAR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.BRAKE, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.STEER, 0.0, 50.0));

  __ASSERT = (true and ((__ASSUME__HIST => (__GUARANTEE0 and true)) and true));

  --%IVC __GUARANTEE0;

tel;

node _TOP__FCC2(
  __ASSUME__HIST : bool;
  ISAS_comp__elevators : DATA_TYPES__QUAD_Elevators__treal;
  ISAS_comp__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  ISAS_comp__rudders : DATA_TYPES__QUAD_Rudders__treal;
  ISAS_comp__flaps : DATA_TYPES__QUAD_Flaps__treal;
  ISAS_comp__aoa : DATA_TYPES__DUAL_AoA__treal;
  ISAS_comp__air_data : DATA_TYPES__DUAL_AirData__treal;
  ISAS_comp__egi : DATA_TYPES__QUAD_EGI__treal;
  ISAS_comp__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  ISAS_comp__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  ISAS_comp__time : real;
  OSAS_comp__acts_in : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_ret : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  OSAS_comp__ccdl_frame_count : Base_Types__Integer;
  OSAS_comp__ccdl_failed : Base_Types__Boolean;
  OSAS_comp__num_valid_acts : DATA_TYPES__NumActuators__impl;
  OSAS_comp__osas_failed : Base_Types__Boolean;
  OSAS_comp__act_claw_fails : Base_Types__Boolean;
  OSAS_comp__time : real;
  CLAW_comp__time : real;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  acts_ret : DATA_TYPES__Actuators__impl;
  num_valid_acts : DATA_TYPES__NumActuators__impl;
  time : real;
  ISAS_comp__elevators_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__ailerons_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__rudders_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__flaps_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__aoa_failed_update : DATA_TYPES__dual_bool;
  ISAS_comp__air_data_failed_update : DATA_TYPES__dual_bool;
  ISAS_comp__spoilers_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__stabilizers_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp__elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp__egi_select_fault : DATA_TYPES__EGI__tbool;
  ISAS_comp__elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ISAS_comp__ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  ISAS_comp__rudders_sig_tol : DATA_TYPES__Rudders__treal;
  ISAS_comp__flaps_sig_tol : DATA_TYPES__Flaps__treal;
  ISAS_comp__aoa_sig_tol : DATA_TYPES__AoA__treal;
  ISAS_comp__air_data_sig_tol : DATA_TYPES__AirData__treal;
  ISAS_comp__spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  ISAS_comp__stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  ISAS_comp__elevators_select : DATA_TYPES__Elevators__treal;
  ISAS_comp__ailerons_select : DATA_TYPES__Ailerons__treal;
  ISAS_comp__rudders_select : DATA_TYPES__Rudders__treal;
  ISAS_comp__flaps_select : DATA_TYPES__Flaps__treal;
  ISAS_comp__aoa_select : DATA_TYPES__AoA__treal;
  ISAS_comp__air_data_select : DATA_TYPES__AirData__treal;
  ISAS_comp__egi_select : DATA_TYPES__EGI__treal;
  ISAS_comp__spoilers_select : DATA_TYPES__Spoilers__treal;
  ISAS_comp__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  ISAS_comp__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  ISAS_comp__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp____ASSUME__HIST : bool;
  OSAS_comp__fail_counts : DATA_TYPES__NumActuators__impl;
  OSAS_comp__act_gains : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_out : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__sovs1 : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__sovs2 : DATA_TYPES__BoolActuators__impl;
  OSAS_comp____ASSUME__HIST : bool;
  CLAW_comp__acts : DATA_TYPES__Actuators__impl;
  CLAW_comp____ASSUME__HIST : bool;
  claw_acts : DATA_TYPES__Actuators__impl;
  osas_failure : bool;
  elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal;
  egi_select : DATA_TYPES__EGI__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal;
  acts_fail : DATA_TYPES__BoolActuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl
) returns (
  __ASSERT : bool
);
let
  __ASSERT = (true and ((claw_acts = CLAW_comp__acts) and ((CLAW_comp__acts = OSAS_comp__acts_in) and ((OSAS_comp__acts_fail = acts_fail) and ((ISAS_comp__stabilizers_select = stabilizers_select) and ((ISAS_comp__egi_select = egi_select) and ((ISAS_comp__air_data_select = air_data_select) and ((ISAS_comp__aoa_select = aoa_select) and ((ISAS_comp__flaps_select = flaps_select) and ((ISAS_comp__spoilers_select = spoilers_select) and ((ISAS_comp__rudders_select = rudders_select) and ((ISAS_comp__ailerons_select = ailerons_select) and ((ISAS_comp__elevators_select = elevators_select) and ((ISAS_comp__stabilizers_faults = stabilizers_faults) and ((ISAS_comp__egi_faults = egi_faults) and ((ISAS_comp__air_data_faults = air_data_faults) and ((ISAS_comp__aoa_faults = aoa_faults) and ((ISAS_comp__flaps_faults = flaps_faults) and ((ISAS_comp__spoilers_faults = spoilers_faults) and ((ISAS_comp__rudders_faults = rudders_faults) and ((ISAS_comp__ailerons_faults = ailerons_faults) and ((ISAS_comp__elevators_faults = elevators_faults) and ((OSAS_comp__sovs2 = sovs2) and ((OSAS_comp__sovs1 = sovs1) and ((OSAS_comp__acts_out = acts_out) and ((stabilizers = ISAS_comp__stabilizers) and ((egi = ISAS_comp__egi) and ((air_data = ISAS_comp__air_data) and ((aoa = ISAS_comp__aoa) and ((flaps = ISAS_comp__flaps) and ((spoilers = ISAS_comp__spoilers) and ((rudders = ISAS_comp__rudders) and ((ailerons = ISAS_comp__ailerons) and ((elevators = ISAS_comp__elevators) and ((num_valid_acts = OSAS_comp__num_valid_acts) and ((acts_ret = OSAS_comp__acts_ret) and ((CLAW_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC2__CLAW_comp(CLAW_comp____ASSUME__HIST, CLAW_comp__time, CLAW_comp__acts) and ((time = CLAW_comp__time) and ((OSAS_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC2__OSAS_comp(OSAS_comp____ASSUME__HIST, OSAS_comp__acts_in, OSAS_comp__acts_ret, OSAS_comp__acts_claw_fail, OSAS_comp__acts_isas_fail, OSAS_comp__acts_ccdl_num_fail, OSAS_comp__ccdl_frame_count, OSAS_comp__ccdl_failed, OSAS_comp__num_valid_acts, OSAS_comp__osas_failed, OSAS_comp__act_claw_fails, OSAS_comp__time, OSAS_comp__fail_counts, OSAS_comp__act_gains, OSAS_comp__acts_out, OSAS_comp__acts_fail, OSAS_comp__sovs1, OSAS_comp__sovs2) and ((time = OSAS_comp__time) and ((ISAS_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC2__ISAS_comp(ISAS_comp____ASSUME__HIST, ISAS_comp__elevators, ISAS_comp__ailerons, ISAS_comp__rudders, ISAS_comp__flaps, ISAS_comp__aoa, ISAS_comp__air_data, ISAS_comp__egi, ISAS_comp__spoilers, ISAS_comp__stabilizers, ISAS_comp__time, ISAS_comp__elevators_failed_update, ISAS_comp__ailerons_failed_update, ISAS_comp__rudders_failed_update, ISAS_comp__flaps_failed_update, ISAS_comp__aoa_failed_update, ISAS_comp__air_data_failed_update, ISAS_comp__spoilers_failed_update, ISAS_comp__stabilizers_failed_update, ISAS_comp__elevators_in_range, ISAS_comp__ailerons_in_range, ISAS_comp__rudders_in_range, ISAS_comp__flaps_in_range, ISAS_comp__aoa_in_range, ISAS_comp__air_data_in_range, ISAS_comp__spoilers_in_range, ISAS_comp__stabilizer_in_range, ISAS_comp__elevators_within_tol, ISAS_comp__ailerons_within_tol, ISAS_comp__rudders_within_tol, ISAS_comp__flaps_within_tol, ISAS_comp__aoa_within_tol, ISAS_comp__air_data_within_tol, ISAS_comp__spoilers_within_tol, ISAS_comp__stabilizer_within_tol, ISAS_comp__egi_select_fault, ISAS_comp__elevators_sig_tol, ISAS_comp__ailerons_sig_tol, ISAS_comp__rudders_sig_tol, ISAS_comp__flaps_sig_tol, ISAS_comp__aoa_sig_tol, ISAS_comp__air_data_sig_tol, ISAS_comp__spoilers_sig_tol, ISAS_comp__stabilizer_sig_tol, ISAS_comp__elevators_select, ISAS_comp__ailerons_select, ISAS_comp__rudders_select, ISAS_comp__flaps_select, ISAS_comp__aoa_select, ISAS_comp__air_data_select, ISAS_comp__egi_select, ISAS_comp__spoilers_select, ISAS_comp__stabilizers_select, ISAS_comp__elevators_faults, ISAS_comp__ailerons_faults, ISAS_comp__rudders_faults, ISAS_comp__flaps_faults, ISAS_comp__aoa_faults, ISAS_comp__air_data_faults, ISAS_comp__egi_faults, ISAS_comp__spoilers_faults, ISAS_comp__stabilizers_faults) and ((time = ISAS_comp__time) and ((__ASSUME__HIST => true) and true))))))))))))))))))))))))))))))))))))))))))))));

tel;

node _TOP__FCC3__ISAS_comp(
  __ASSUME__HIST : bool;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  time : real;
  elevators_failed_update : DATA_TYPES__quad_bool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  stabilizers_failed_update : DATA_TYPES__quad_bool;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  egi_select_fault : DATA_TYPES__EGI__tbool;
  elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  rudders_sig_tol : DATA_TYPES__Rudders__treal;
  flaps_sig_tol : DATA_TYPES__Flaps__treal;
  aoa_sig_tol : DATA_TYPES__AoA__treal;
  air_data_sig_tol : DATA_TYPES__AirData__treal;
  spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal;
  egi_select : DATA_TYPES__EGI__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal;
  elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
let
  __GUARANTEE0 = ISAS_S_100_130__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_failed_update, ailerons_failed_update, rudders_failed_update, flaps_failed_update, aoa_failed_update, air_data_failed_update, spoilers_failed_update, stabilizers_failed_update);

  __GUARANTEE1 = ISAS_S_110__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_in_range, ailerons_in_range, rudders_in_range, flaps_in_range, aoa_in_range, air_data_in_range, spoilers_in_range, stabilizer_in_range);

  __GUARANTEE2 = ISAS_S_140__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, aoa_within_tol, air_data_within_tol);

  __GUARANTEE3 = ISAS_S_140_150__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_within_tol, ailerons_within_tol, rudders_within_tol, flaps_within_tol, aoa_within_tol, air_data_within_tol, spoilers_within_tol, stabilizer_within_tol);

  __GUARANTEE4 = ISAS_S_170__req(aoa, air_data, aoa_within_tol, air_data_within_tol, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, aoa_select, air_data_select);

  __GUARANTEE5 = ISAS_S_190__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, egi_select, egi_select_fault, aoa_within_tol, air_data_within_tol);

  __GUARANTEE6 = ISAS_S_200__req(aoa, air_data, aoa_faults, air_data_faults, egi_select, aoa_select, air_data_select);

  __GUARANTEE7 = ISAS_S_210__req(aoa, air_data, aoa_faults, air_data_faults, egi_select, aoa_select, air_data_select);

  __GUARANTEE8 = ISAS_S_220__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, egi_select, egi_select_fault, aoa_select, air_data_select);

  __GUARANTEE9 = ISAS_S_260__req(elevators, ailerons, rudders, flaps, spoilers, stabilizers, elevators_faults, ailerons_faults, rudders_faults, flaps_faults, spoilers_faults, stabilizers_faults, elevators_sig_tol, ailerons_sig_tol, rudders_sig_tol, flaps_sig_tol, spoilers_sig_tol, stabilizer_sig_tol, elevators_select, ailerons_select, rudders_select, flaps_select, spoilers_select, stabilizers_select);

  __GUARANTEE10 = ISAS_S_240__req(elevators_within_tol, ailerons_within_tol, rudders_within_tol, flaps_within_tol, spoilers_within_tol, stabilizer_within_tol, aoa_within_tol, air_data_within_tol, elevators_failed_update, ailerons_failed_update, rudders_failed_update, flaps_failed_update, spoilers_failed_update, stabilizers_failed_update, aoa_failed_update, air_data_failed_update, elevators_in_range, ailerons_in_range, rudders_in_range, flaps_in_range, spoilers_in_range, stabilizer_in_range, aoa_in_range, air_data_in_range, elevators_faults, ailerons_faults, rudders_faults, flaps_faults, spoilers_faults, stabilizers_faults, aoa_faults, air_data_faults);

  __ASSERT = (true and ((stabilizer_sig_tol = DATA_TYPES__Stabilizer__treal {TIME_STAMP = 0; VAL = (0.1 * 50.0)}) and ((spoilers_sig_tol = DATA_TYPES__Spoilers__treal {SPLIB = (0.1 * 50.0); SPLOB = (0.1 * 50.0); SPRIB = (0.1 * 50.0); SPROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((air_data_sig_tol = DATA_TYPES__AirData__treal {Pres = (0.1 * 50.0); TAT = (0.1 * 50.0); TIME_STAMP = 0; Temp = (0.1 * 50.0); TotPres = (0.1 * 50.0)}) and ((aoa_sig_tol = DATA_TYPES__AoA__treal {AOA = (0.1 * 50.0); TIME_STAMP = 0}) and ((flaps_sig_tol = DATA_TYPES__Flaps__treal {FLLIB = (0.1 * 50.0); FLLOB = (0.1 * 50.0); FLRIB = (0.1 * 50.0); FLROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((rudders_sig_tol = DATA_TYPES__Rudders__treal {RUDL = (0.1 * 50.0); RUDU = (0.1 * 50.0); TIME_STAMP = 0}) and ((ailerons_sig_tol = DATA_TYPES__Ailerons__treal {AILL = (0.1 * 50.0); AILR = (0.1 * 50.0); TIME_STAMP = 0}) and ((elevators_sig_tol = DATA_TYPES__Elevators__treal {ELLIB = (0.1 * 50.0); ELLOB = (0.1 * 50.0); ELRIB = (0.1 * 50.0); ELROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((__ASSUME__HIST => (__GUARANTEE10 and (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true)))))))))))) and true))))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9, __GUARANTEE10;

tel;

node _TOP__FCC3__OSAS_comp(
  __ASSUME__HIST : bool;
  acts_in : DATA_TYPES__Actuators__impl;
  acts_ret : DATA_TYPES__Actuators__impl;
  acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  ccdl_frame_count : Base_Types__Integer;
  ccdl_failed : Base_Types__Boolean;
  num_valid_acts : DATA_TYPES__NumActuators__impl;
  osas_failed : Base_Types__Boolean;
  act_claw_fails : Base_Types__Boolean;
  time : real;
  fail_counts : DATA_TYPES__NumActuators__impl;
  act_gains : DATA_TYPES__Actuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  acts_fail : DATA_TYPES__BoolActuators__impl;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
let
  __GUARANTEE0 = OSAS_S_110__req(acts_out, acts_ret, fail_counts);

  __GUARANTEE1 = OSAS_S_120__req(acts_out, acts_ret, acts_fail);

  __GUARANTEE2 = OSAS_S_140__req(acts_out, acts_fail);

  __GUARANTEE3 = (true -> (ccdl_failed = (true -> (ccdl_frame_count <> ((pre ccdl_frame_count) + 1)))));

  __GUARANTEE4 = OSAS_S_170__req(act_gains, ccdl_failed);

  __GUARANTEE5 = OSAS_S_180__req(act_gains, num_valid_acts, ccdl_failed);

  __GUARANTEE6 = OSAS_S_190__req(acts_in, acts_out, act_gains);

  __GUARANTEE7 = OSAS_S_240__req(act_gains, osas_failed);

  __GUARANTEE8 = OSAS_S_250__req(act_gains, act_claw_fails);

  __GUARANTEE9 = OSAS_S_210_220_230__req(sovs1, sovs2, acts_isas_fail, acts_fail, acts_ccdl_num_fail);

  __ASSERT = (true and ((__ASSUME__HIST => (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true))))))))))) and true));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9;

tel;

node _TOP__FCC3__CLAW_comp(
  __ASSUME__HIST : bool;
  time : real;
  acts : DATA_TYPES__Actuators__impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = ((((((((((((((((((((CLAW__CLAW__bound_rec(acts.THROTL, 0.0, 50.0) and CLAW__CLAW__bound_rec(acts.THROTR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELLOB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELLIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELROB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELRIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.AILL, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.AILR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.RUDUP, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.RUDLO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLLIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLLOB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLRIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLROB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPLI, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPLO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPRO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPRI, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.GEAR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.BRAKE, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.STEER, 0.0, 50.0));

  __ASSERT = (true and ((__ASSUME__HIST => (__GUARANTEE0 and true)) and true));

  --%IVC __GUARANTEE0;

tel;

node _TOP__FCC3(
  __ASSUME__HIST : bool;
  ISAS_comp__elevators : DATA_TYPES__QUAD_Elevators__treal;
  ISAS_comp__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  ISAS_comp__rudders : DATA_TYPES__QUAD_Rudders__treal;
  ISAS_comp__flaps : DATA_TYPES__QUAD_Flaps__treal;
  ISAS_comp__aoa : DATA_TYPES__DUAL_AoA__treal;
  ISAS_comp__air_data : DATA_TYPES__DUAL_AirData__treal;
  ISAS_comp__egi : DATA_TYPES__QUAD_EGI__treal;
  ISAS_comp__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  ISAS_comp__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  ISAS_comp__time : real;
  OSAS_comp__acts_in : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_ret : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  OSAS_comp__ccdl_frame_count : Base_Types__Integer;
  OSAS_comp__ccdl_failed : Base_Types__Boolean;
  OSAS_comp__num_valid_acts : DATA_TYPES__NumActuators__impl;
  OSAS_comp__osas_failed : Base_Types__Boolean;
  OSAS_comp__act_claw_fails : Base_Types__Boolean;
  OSAS_comp__time : real;
  CLAW_comp__time : real;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  acts_ret : DATA_TYPES__Actuators__impl;
  num_valid_acts : DATA_TYPES__NumActuators__impl;
  time : real;
  ISAS_comp__elevators_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__ailerons_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__rudders_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__flaps_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__aoa_failed_update : DATA_TYPES__dual_bool;
  ISAS_comp__air_data_failed_update : DATA_TYPES__dual_bool;
  ISAS_comp__spoilers_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__stabilizers_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp__elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp__egi_select_fault : DATA_TYPES__EGI__tbool;
  ISAS_comp__elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ISAS_comp__ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  ISAS_comp__rudders_sig_tol : DATA_TYPES__Rudders__treal;
  ISAS_comp__flaps_sig_tol : DATA_TYPES__Flaps__treal;
  ISAS_comp__aoa_sig_tol : DATA_TYPES__AoA__treal;
  ISAS_comp__air_data_sig_tol : DATA_TYPES__AirData__treal;
  ISAS_comp__spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  ISAS_comp__stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  ISAS_comp__elevators_select : DATA_TYPES__Elevators__treal;
  ISAS_comp__ailerons_select : DATA_TYPES__Ailerons__treal;
  ISAS_comp__rudders_select : DATA_TYPES__Rudders__treal;
  ISAS_comp__flaps_select : DATA_TYPES__Flaps__treal;
  ISAS_comp__aoa_select : DATA_TYPES__AoA__treal;
  ISAS_comp__air_data_select : DATA_TYPES__AirData__treal;
  ISAS_comp__egi_select : DATA_TYPES__EGI__treal;
  ISAS_comp__spoilers_select : DATA_TYPES__Spoilers__treal;
  ISAS_comp__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  ISAS_comp__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  ISAS_comp__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp____ASSUME__HIST : bool;
  OSAS_comp__fail_counts : DATA_TYPES__NumActuators__impl;
  OSAS_comp__act_gains : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_out : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__sovs1 : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__sovs2 : DATA_TYPES__BoolActuators__impl;
  OSAS_comp____ASSUME__HIST : bool;
  CLAW_comp__acts : DATA_TYPES__Actuators__impl;
  CLAW_comp____ASSUME__HIST : bool;
  claw_acts : DATA_TYPES__Actuators__impl;
  osas_failure : bool;
  elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal;
  egi_select : DATA_TYPES__EGI__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal;
  acts_fail : DATA_TYPES__BoolActuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl
) returns (
  __ASSERT : bool
);
let
  __ASSERT = (true and ((claw_acts = CLAW_comp__acts) and ((CLAW_comp__acts = OSAS_comp__acts_in) and ((OSAS_comp__acts_fail = acts_fail) and ((ISAS_comp__stabilizers_select = stabilizers_select) and ((ISAS_comp__egi_select = egi_select) and ((ISAS_comp__air_data_select = air_data_select) and ((ISAS_comp__aoa_select = aoa_select) and ((ISAS_comp__flaps_select = flaps_select) and ((ISAS_comp__spoilers_select = spoilers_select) and ((ISAS_comp__rudders_select = rudders_select) and ((ISAS_comp__ailerons_select = ailerons_select) and ((ISAS_comp__elevators_select = elevators_select) and ((ISAS_comp__stabilizers_faults = stabilizers_faults) and ((ISAS_comp__egi_faults = egi_faults) and ((ISAS_comp__air_data_faults = air_data_faults) and ((ISAS_comp__aoa_faults = aoa_faults) and ((ISAS_comp__flaps_faults = flaps_faults) and ((ISAS_comp__spoilers_faults = spoilers_faults) and ((ISAS_comp__rudders_faults = rudders_faults) and ((ISAS_comp__ailerons_faults = ailerons_faults) and ((ISAS_comp__elevators_faults = elevators_faults) and ((OSAS_comp__sovs2 = sovs2) and ((OSAS_comp__sovs1 = sovs1) and ((OSAS_comp__acts_out = acts_out) and ((stabilizers = ISAS_comp__stabilizers) and ((egi = ISAS_comp__egi) and ((air_data = ISAS_comp__air_data) and ((aoa = ISAS_comp__aoa) and ((flaps = ISAS_comp__flaps) and ((spoilers = ISAS_comp__spoilers) and ((rudders = ISAS_comp__rudders) and ((ailerons = ISAS_comp__ailerons) and ((elevators = ISAS_comp__elevators) and ((num_valid_acts = OSAS_comp__num_valid_acts) and ((acts_ret = OSAS_comp__acts_ret) and ((CLAW_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC3__CLAW_comp(CLAW_comp____ASSUME__HIST, CLAW_comp__time, CLAW_comp__acts) and ((time = CLAW_comp__time) and ((OSAS_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC3__OSAS_comp(OSAS_comp____ASSUME__HIST, OSAS_comp__acts_in, OSAS_comp__acts_ret, OSAS_comp__acts_claw_fail, OSAS_comp__acts_isas_fail, OSAS_comp__acts_ccdl_num_fail, OSAS_comp__ccdl_frame_count, OSAS_comp__ccdl_failed, OSAS_comp__num_valid_acts, OSAS_comp__osas_failed, OSAS_comp__act_claw_fails, OSAS_comp__time, OSAS_comp__fail_counts, OSAS_comp__act_gains, OSAS_comp__acts_out, OSAS_comp__acts_fail, OSAS_comp__sovs1, OSAS_comp__sovs2) and ((time = OSAS_comp__time) and ((ISAS_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC3__ISAS_comp(ISAS_comp____ASSUME__HIST, ISAS_comp__elevators, ISAS_comp__ailerons, ISAS_comp__rudders, ISAS_comp__flaps, ISAS_comp__aoa, ISAS_comp__air_data, ISAS_comp__egi, ISAS_comp__spoilers, ISAS_comp__stabilizers, ISAS_comp__time, ISAS_comp__elevators_failed_update, ISAS_comp__ailerons_failed_update, ISAS_comp__rudders_failed_update, ISAS_comp__flaps_failed_update, ISAS_comp__aoa_failed_update, ISAS_comp__air_data_failed_update, ISAS_comp__spoilers_failed_update, ISAS_comp__stabilizers_failed_update, ISAS_comp__elevators_in_range, ISAS_comp__ailerons_in_range, ISAS_comp__rudders_in_range, ISAS_comp__flaps_in_range, ISAS_comp__aoa_in_range, ISAS_comp__air_data_in_range, ISAS_comp__spoilers_in_range, ISAS_comp__stabilizer_in_range, ISAS_comp__elevators_within_tol, ISAS_comp__ailerons_within_tol, ISAS_comp__rudders_within_tol, ISAS_comp__flaps_within_tol, ISAS_comp__aoa_within_tol, ISAS_comp__air_data_within_tol, ISAS_comp__spoilers_within_tol, ISAS_comp__stabilizer_within_tol, ISAS_comp__egi_select_fault, ISAS_comp__elevators_sig_tol, ISAS_comp__ailerons_sig_tol, ISAS_comp__rudders_sig_tol, ISAS_comp__flaps_sig_tol, ISAS_comp__aoa_sig_tol, ISAS_comp__air_data_sig_tol, ISAS_comp__spoilers_sig_tol, ISAS_comp__stabilizer_sig_tol, ISAS_comp__elevators_select, ISAS_comp__ailerons_select, ISAS_comp__rudders_select, ISAS_comp__flaps_select, ISAS_comp__aoa_select, ISAS_comp__air_data_select, ISAS_comp__egi_select, ISAS_comp__spoilers_select, ISAS_comp__stabilizers_select, ISAS_comp__elevators_faults, ISAS_comp__ailerons_faults, ISAS_comp__rudders_faults, ISAS_comp__flaps_faults, ISAS_comp__aoa_faults, ISAS_comp__air_data_faults, ISAS_comp__egi_faults, ISAS_comp__spoilers_faults, ISAS_comp__stabilizers_faults) and ((time = ISAS_comp__time) and ((__ASSUME__HIST => true) and true))))))))))))))))))))))))))))))))))))))))))))));

tel;

node _TOP__FCC4__ISAS_comp(
  __ASSUME__HIST : bool;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  time : real;
  elevators_failed_update : DATA_TYPES__quad_bool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  stabilizers_failed_update : DATA_TYPES__quad_bool;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  egi_select_fault : DATA_TYPES__EGI__tbool;
  elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  rudders_sig_tol : DATA_TYPES__Rudders__treal;
  flaps_sig_tol : DATA_TYPES__Flaps__treal;
  aoa_sig_tol : DATA_TYPES__AoA__treal;
  air_data_sig_tol : DATA_TYPES__AirData__treal;
  spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal;
  egi_select : DATA_TYPES__EGI__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal;
  elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
let
  __GUARANTEE0 = ISAS_S_100_130__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_failed_update, ailerons_failed_update, rudders_failed_update, flaps_failed_update, aoa_failed_update, air_data_failed_update, spoilers_failed_update, stabilizers_failed_update);

  __GUARANTEE1 = ISAS_S_110__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_in_range, ailerons_in_range, rudders_in_range, flaps_in_range, aoa_in_range, air_data_in_range, spoilers_in_range, stabilizer_in_range);

  __GUARANTEE2 = ISAS_S_140__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, aoa_within_tol, air_data_within_tol);

  __GUARANTEE3 = ISAS_S_140_150__req(elevators, ailerons, rudders, flaps, aoa, air_data, spoilers, stabilizers, elevators_within_tol, ailerons_within_tol, rudders_within_tol, flaps_within_tol, aoa_within_tol, air_data_within_tol, spoilers_within_tol, stabilizer_within_tol);

  __GUARANTEE4 = ISAS_S_170__req(aoa, air_data, aoa_within_tol, air_data_within_tol, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, aoa_select, air_data_select);

  __GUARANTEE5 = ISAS_S_190__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, egi_select, egi_select_fault, aoa_within_tol, air_data_within_tol);

  __GUARANTEE6 = ISAS_S_200__req(aoa, air_data, aoa_faults, air_data_faults, egi_select, aoa_select, air_data_select);

  __GUARANTEE7 = ISAS_S_210__req(aoa, air_data, aoa_faults, air_data_faults, egi_select, aoa_select, air_data_select);

  __GUARANTEE8 = ISAS_S_220__req(aoa, air_data, aoa_failed_update, air_data_failed_update, aoa_in_range, air_data_in_range, egi_select, egi_select_fault, aoa_select, air_data_select);

  __GUARANTEE9 = ISAS_S_260__req(elevators, ailerons, rudders, flaps, spoilers, stabilizers, elevators_faults, ailerons_faults, rudders_faults, flaps_faults, spoilers_faults, stabilizers_faults, elevators_sig_tol, ailerons_sig_tol, rudders_sig_tol, flaps_sig_tol, spoilers_sig_tol, stabilizer_sig_tol, elevators_select, ailerons_select, rudders_select, flaps_select, spoilers_select, stabilizers_select);

  __GUARANTEE10 = ISAS_S_240__req(elevators_within_tol, ailerons_within_tol, rudders_within_tol, flaps_within_tol, spoilers_within_tol, stabilizer_within_tol, aoa_within_tol, air_data_within_tol, elevators_failed_update, ailerons_failed_update, rudders_failed_update, flaps_failed_update, spoilers_failed_update, stabilizers_failed_update, aoa_failed_update, air_data_failed_update, elevators_in_range, ailerons_in_range, rudders_in_range, flaps_in_range, spoilers_in_range, stabilizer_in_range, aoa_in_range, air_data_in_range, elevators_faults, ailerons_faults, rudders_faults, flaps_faults, spoilers_faults, stabilizers_faults, aoa_faults, air_data_faults);

  __ASSERT = (true and ((stabilizer_sig_tol = DATA_TYPES__Stabilizer__treal {TIME_STAMP = 0; VAL = (0.1 * 50.0)}) and ((spoilers_sig_tol = DATA_TYPES__Spoilers__treal {SPLIB = (0.1 * 50.0); SPLOB = (0.1 * 50.0); SPRIB = (0.1 * 50.0); SPROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((air_data_sig_tol = DATA_TYPES__AirData__treal {Pres = (0.1 * 50.0); TAT = (0.1 * 50.0); TIME_STAMP = 0; Temp = (0.1 * 50.0); TotPres = (0.1 * 50.0)}) and ((aoa_sig_tol = DATA_TYPES__AoA__treal {AOA = (0.1 * 50.0); TIME_STAMP = 0}) and ((flaps_sig_tol = DATA_TYPES__Flaps__treal {FLLIB = (0.1 * 50.0); FLLOB = (0.1 * 50.0); FLRIB = (0.1 * 50.0); FLROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((rudders_sig_tol = DATA_TYPES__Rudders__treal {RUDL = (0.1 * 50.0); RUDU = (0.1 * 50.0); TIME_STAMP = 0}) and ((ailerons_sig_tol = DATA_TYPES__Ailerons__treal {AILL = (0.1 * 50.0); AILR = (0.1 * 50.0); TIME_STAMP = 0}) and ((elevators_sig_tol = DATA_TYPES__Elevators__treal {ELLIB = (0.1 * 50.0); ELLOB = (0.1 * 50.0); ELRIB = (0.1 * 50.0); ELROB = (0.1 * 50.0); TIME_STAMP = 0}) and ((__ASSUME__HIST => (__GUARANTEE10 and (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true)))))))))))) and true))))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9, __GUARANTEE10;

tel;

node _TOP__FCC4__OSAS_comp(
  __ASSUME__HIST : bool;
  acts_in : DATA_TYPES__Actuators__impl;
  acts_ret : DATA_TYPES__Actuators__impl;
  acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  ccdl_frame_count : Base_Types__Integer;
  ccdl_failed : Base_Types__Boolean;
  num_valid_acts : DATA_TYPES__NumActuators__impl;
  osas_failed : Base_Types__Boolean;
  act_claw_fails : Base_Types__Boolean;
  time : real;
  fail_counts : DATA_TYPES__NumActuators__impl;
  act_gains : DATA_TYPES__Actuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  acts_fail : DATA_TYPES__BoolActuators__impl;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
let
  __GUARANTEE0 = OSAS_S_110__req(acts_out, acts_ret, fail_counts);

  __GUARANTEE1 = OSAS_S_120__req(acts_out, acts_ret, acts_fail);

  __GUARANTEE2 = OSAS_S_140__req(acts_out, acts_fail);

  __GUARANTEE3 = (true -> (ccdl_failed = (true -> (ccdl_frame_count <> ((pre ccdl_frame_count) + 1)))));

  __GUARANTEE4 = OSAS_S_170__req(act_gains, ccdl_failed);

  __GUARANTEE5 = OSAS_S_180__req(act_gains, num_valid_acts, ccdl_failed);

  __GUARANTEE6 = OSAS_S_190__req(acts_in, acts_out, act_gains);

  __GUARANTEE7 = OSAS_S_240__req(act_gains, osas_failed);

  __GUARANTEE8 = OSAS_S_250__req(act_gains, act_claw_fails);

  __GUARANTEE9 = OSAS_S_210_220_230__req(sovs1, sovs2, acts_isas_fail, acts_fail, acts_ccdl_num_fail);

  __ASSERT = (true and ((__ASSUME__HIST => (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true))))))))))) and true));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9;

tel;

node _TOP__FCC4__CLAW_comp(
  __ASSUME__HIST : bool;
  time : real;
  acts : DATA_TYPES__Actuators__impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
let
  __GUARANTEE0 = ((((((((((((((((((((CLAW__CLAW__bound_rec(acts.THROTL, 0.0, 50.0) and CLAW__CLAW__bound_rec(acts.THROTR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELLOB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELLIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELROB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.ELRIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.AILL, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.AILR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.RUDUP, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.RUDLO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLLIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLLOB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLRIB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.SPLROB, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPLI, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPLO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPRO, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.FLAPRI, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.GEAR, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.BRAKE, 0.0, 50.0)) and CLAW__CLAW__bound_rec(acts.STEER, 0.0, 50.0));

  __ASSERT = (true and ((__ASSUME__HIST => (__GUARANTEE0 and true)) and true));

  --%IVC __GUARANTEE0;

tel;

node _TOP__FCC4(
  __ASSUME__HIST : bool;
  ISAS_comp__elevators : DATA_TYPES__QUAD_Elevators__treal;
  ISAS_comp__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  ISAS_comp__rudders : DATA_TYPES__QUAD_Rudders__treal;
  ISAS_comp__flaps : DATA_TYPES__QUAD_Flaps__treal;
  ISAS_comp__aoa : DATA_TYPES__DUAL_AoA__treal;
  ISAS_comp__air_data : DATA_TYPES__DUAL_AirData__treal;
  ISAS_comp__egi : DATA_TYPES__QUAD_EGI__treal;
  ISAS_comp__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  ISAS_comp__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  ISAS_comp__time : real;
  OSAS_comp__acts_in : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_ret : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  OSAS_comp__ccdl_frame_count : Base_Types__Integer;
  OSAS_comp__ccdl_failed : Base_Types__Boolean;
  OSAS_comp__num_valid_acts : DATA_TYPES__NumActuators__impl;
  OSAS_comp__osas_failed : Base_Types__Boolean;
  OSAS_comp__act_claw_fails : Base_Types__Boolean;
  OSAS_comp__time : real;
  CLAW_comp__time : real;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  acts_ret : DATA_TYPES__Actuators__impl;
  num_valid_acts : DATA_TYPES__NumActuators__impl;
  time : real;
  ISAS_comp__elevators_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__ailerons_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__rudders_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__flaps_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__aoa_failed_update : DATA_TYPES__dual_bool;
  ISAS_comp__air_data_failed_update : DATA_TYPES__dual_bool;
  ISAS_comp__spoilers_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__stabilizers_failed_update : DATA_TYPES__quad_bool;
  ISAS_comp__elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp__elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp__egi_select_fault : DATA_TYPES__EGI__tbool;
  ISAS_comp__elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ISAS_comp__ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  ISAS_comp__rudders_sig_tol : DATA_TYPES__Rudders__treal;
  ISAS_comp__flaps_sig_tol : DATA_TYPES__Flaps__treal;
  ISAS_comp__aoa_sig_tol : DATA_TYPES__AoA__treal;
  ISAS_comp__air_data_sig_tol : DATA_TYPES__AirData__treal;
  ISAS_comp__spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  ISAS_comp__stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  ISAS_comp__elevators_select : DATA_TYPES__Elevators__treal;
  ISAS_comp__ailerons_select : DATA_TYPES__Ailerons__treal;
  ISAS_comp__rudders_select : DATA_TYPES__Rudders__treal;
  ISAS_comp__flaps_select : DATA_TYPES__Flaps__treal;
  ISAS_comp__aoa_select : DATA_TYPES__AoA__treal;
  ISAS_comp__air_data_select : DATA_TYPES__AirData__treal;
  ISAS_comp__egi_select : DATA_TYPES__EGI__treal;
  ISAS_comp__spoilers_select : DATA_TYPES__Spoilers__treal;
  ISAS_comp__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  ISAS_comp__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ISAS_comp__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  ISAS_comp__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  ISAS_comp__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  ISAS_comp__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  ISAS_comp__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  ISAS_comp__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  ISAS_comp__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  ISAS_comp__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  ISAS_comp____ASSUME__HIST : bool;
  OSAS_comp__fail_counts : DATA_TYPES__NumActuators__impl;
  OSAS_comp__act_gains : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_out : DATA_TYPES__Actuators__impl;
  OSAS_comp__acts_fail : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__sovs1 : DATA_TYPES__BoolActuators__impl;
  OSAS_comp__sovs2 : DATA_TYPES__BoolActuators__impl;
  OSAS_comp____ASSUME__HIST : bool;
  CLAW_comp__acts : DATA_TYPES__Actuators__impl;
  CLAW_comp____ASSUME__HIST : bool;
  claw_acts : DATA_TYPES__Actuators__impl;
  osas_failure : bool;
  elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal;
  egi_select : DATA_TYPES__EGI__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal;
  acts_fail : DATA_TYPES__BoolActuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl
) returns (
  __ASSERT : bool
);
let
  __ASSERT = (true and ((claw_acts = CLAW_comp__acts) and ((CLAW_comp__acts = OSAS_comp__acts_in) and ((OSAS_comp__acts_fail = acts_fail) and ((ISAS_comp__stabilizers_select = stabilizers_select) and ((ISAS_comp__egi_select = egi_select) and ((ISAS_comp__air_data_select = air_data_select) and ((ISAS_comp__aoa_select = aoa_select) and ((ISAS_comp__flaps_select = flaps_select) and ((ISAS_comp__spoilers_select = spoilers_select) and ((ISAS_comp__rudders_select = rudders_select) and ((ISAS_comp__ailerons_select = ailerons_select) and ((ISAS_comp__elevators_select = elevators_select) and ((ISAS_comp__stabilizers_faults = stabilizers_faults) and ((ISAS_comp__egi_faults = egi_faults) and ((ISAS_comp__air_data_faults = air_data_faults) and ((ISAS_comp__aoa_faults = aoa_faults) and ((ISAS_comp__flaps_faults = flaps_faults) and ((ISAS_comp__spoilers_faults = spoilers_faults) and ((ISAS_comp__rudders_faults = rudders_faults) and ((ISAS_comp__ailerons_faults = ailerons_faults) and ((ISAS_comp__elevators_faults = elevators_faults) and ((OSAS_comp__sovs2 = sovs2) and ((OSAS_comp__sovs1 = sovs1) and ((OSAS_comp__acts_out = acts_out) and ((stabilizers = ISAS_comp__stabilizers) and ((egi = ISAS_comp__egi) and ((air_data = ISAS_comp__air_data) and ((aoa = ISAS_comp__aoa) and ((flaps = ISAS_comp__flaps) and ((spoilers = ISAS_comp__spoilers) and ((rudders = ISAS_comp__rudders) and ((ailerons = ISAS_comp__ailerons) and ((elevators = ISAS_comp__elevators) and ((num_valid_acts = OSAS_comp__num_valid_acts) and ((acts_ret = OSAS_comp__acts_ret) and ((CLAW_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC4__CLAW_comp(CLAW_comp____ASSUME__HIST, CLAW_comp__time, CLAW_comp__acts) and ((time = CLAW_comp__time) and ((OSAS_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC4__OSAS_comp(OSAS_comp____ASSUME__HIST, OSAS_comp__acts_in, OSAS_comp__acts_ret, OSAS_comp__acts_claw_fail, OSAS_comp__acts_isas_fail, OSAS_comp__acts_ccdl_num_fail, OSAS_comp__ccdl_frame_count, OSAS_comp__ccdl_failed, OSAS_comp__num_valid_acts, OSAS_comp__osas_failed, OSAS_comp__act_claw_fails, OSAS_comp__time, OSAS_comp__fail_counts, OSAS_comp__act_gains, OSAS_comp__acts_out, OSAS_comp__acts_fail, OSAS_comp__sovs1, OSAS_comp__sovs2) and ((time = OSAS_comp__time) and ((ISAS_comp____ASSUME__HIST = __HIST(true)) and (_TOP__FCC4__ISAS_comp(ISAS_comp____ASSUME__HIST, ISAS_comp__elevators, ISAS_comp__ailerons, ISAS_comp__rudders, ISAS_comp__flaps, ISAS_comp__aoa, ISAS_comp__air_data, ISAS_comp__egi, ISAS_comp__spoilers, ISAS_comp__stabilizers, ISAS_comp__time, ISAS_comp__elevators_failed_update, ISAS_comp__ailerons_failed_update, ISAS_comp__rudders_failed_update, ISAS_comp__flaps_failed_update, ISAS_comp__aoa_failed_update, ISAS_comp__air_data_failed_update, ISAS_comp__spoilers_failed_update, ISAS_comp__stabilizers_failed_update, ISAS_comp__elevators_in_range, ISAS_comp__ailerons_in_range, ISAS_comp__rudders_in_range, ISAS_comp__flaps_in_range, ISAS_comp__aoa_in_range, ISAS_comp__air_data_in_range, ISAS_comp__spoilers_in_range, ISAS_comp__stabilizer_in_range, ISAS_comp__elevators_within_tol, ISAS_comp__ailerons_within_tol, ISAS_comp__rudders_within_tol, ISAS_comp__flaps_within_tol, ISAS_comp__aoa_within_tol, ISAS_comp__air_data_within_tol, ISAS_comp__spoilers_within_tol, ISAS_comp__stabilizer_within_tol, ISAS_comp__egi_select_fault, ISAS_comp__elevators_sig_tol, ISAS_comp__ailerons_sig_tol, ISAS_comp__rudders_sig_tol, ISAS_comp__flaps_sig_tol, ISAS_comp__aoa_sig_tol, ISAS_comp__air_data_sig_tol, ISAS_comp__spoilers_sig_tol, ISAS_comp__stabilizer_sig_tol, ISAS_comp__elevators_select, ISAS_comp__ailerons_select, ISAS_comp__rudders_select, ISAS_comp__flaps_select, ISAS_comp__aoa_select, ISAS_comp__air_data_select, ISAS_comp__egi_select, ISAS_comp__spoilers_select, ISAS_comp__stabilizers_select, ISAS_comp__elevators_faults, ISAS_comp__ailerons_faults, ISAS_comp__rudders_faults, ISAS_comp__flaps_faults, ISAS_comp__aoa_faults, ISAS_comp__air_data_faults, ISAS_comp__egi_faults, ISAS_comp__spoilers_faults, ISAS_comp__stabilizers_faults) and ((time = ISAS_comp__time) and ((__ASSUME__HIST => true) and true))))))))))))))))))))))))))))))))))))))))))))));

tel;

node main(
  FCC1__ISAS_comp__elevators_failed_update : DATA_TYPES__quad_bool;
  FCC1__ISAS_comp__ailerons_failed_update : DATA_TYPES__quad_bool;
  FCC1__ISAS_comp__rudders_failed_update : DATA_TYPES__quad_bool;
  FCC1__ISAS_comp__flaps_failed_update : DATA_TYPES__quad_bool;
  FCC1__ISAS_comp__aoa_failed_update : DATA_TYPES__dual_bool;
  FCC1__ISAS_comp__air_data_failed_update : DATA_TYPES__dual_bool;
  FCC1__ISAS_comp__spoilers_failed_update : DATA_TYPES__quad_bool;
  FCC1__ISAS_comp__stabilizers_failed_update : DATA_TYPES__quad_bool;
  FCC1__ISAS_comp__elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  FCC1__ISAS_comp__ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC1__ISAS_comp__rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  FCC1__ISAS_comp__flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  FCC1__ISAS_comp__aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  FCC1__ISAS_comp__air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  FCC1__ISAS_comp__spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC1__ISAS_comp__stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC1__ISAS_comp__elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  FCC1__ISAS_comp__ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC1__ISAS_comp__rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  FCC1__ISAS_comp__flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  FCC1__ISAS_comp__aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  FCC1__ISAS_comp__air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  FCC1__ISAS_comp__spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC1__ISAS_comp__stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC1__ISAS_comp__egi_select_fault : DATA_TYPES__EGI__tbool;
  FCC1__ISAS_comp__elevators_sig_tol : DATA_TYPES__Elevators__treal;
  FCC1__ISAS_comp__ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  FCC1__ISAS_comp__rudders_sig_tol : DATA_TYPES__Rudders__treal;
  FCC1__ISAS_comp__flaps_sig_tol : DATA_TYPES__Flaps__treal;
  FCC1__ISAS_comp__aoa_sig_tol : DATA_TYPES__AoA__treal;
  FCC1__ISAS_comp__air_data_sig_tol : DATA_TYPES__AirData__treal;
  FCC1__ISAS_comp__spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  FCC1__ISAS_comp__stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  FCC1__ISAS_comp__elevators_select : DATA_TYPES__Elevators__treal;
  FCC1__ISAS_comp__ailerons_select : DATA_TYPES__Ailerons__treal;
  FCC1__ISAS_comp__rudders_select : DATA_TYPES__Rudders__treal;
  FCC1__ISAS_comp__flaps_select : DATA_TYPES__Flaps__treal;
  FCC1__ISAS_comp__aoa_select : DATA_TYPES__AoA__treal;
  FCC1__ISAS_comp__air_data_select : DATA_TYPES__AirData__treal;
  FCC1__ISAS_comp__egi_select : DATA_TYPES__EGI__treal;
  FCC1__ISAS_comp__spoilers_select : DATA_TYPES__Spoilers__treal;
  FCC1__ISAS_comp__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  FCC1__ISAS_comp__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  FCC1__ISAS_comp__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC1__ISAS_comp__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  FCC1__ISAS_comp__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  FCC1__ISAS_comp__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  FCC1__ISAS_comp__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  FCC1__ISAS_comp__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  FCC1__ISAS_comp__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC1__ISAS_comp__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC1__ISAS_comp____ASSUME__HIST : bool;
  FCC1__OSAS_comp__fail_counts : DATA_TYPES__NumActuators__impl;
  FCC1__OSAS_comp__act_gains : DATA_TYPES__Actuators__impl;
  FCC1__OSAS_comp__acts_out : DATA_TYPES__Actuators__impl;
  FCC1__OSAS_comp__acts_fail : DATA_TYPES__BoolActuators__impl;
  FCC1__OSAS_comp__sovs1 : DATA_TYPES__BoolActuators__impl;
  FCC1__OSAS_comp__sovs2 : DATA_TYPES__BoolActuators__impl;
  FCC1__OSAS_comp____ASSUME__HIST : bool;
  FCC1__CLAW_comp__acts : DATA_TYPES__Actuators__impl;
  FCC1__CLAW_comp____ASSUME__HIST : bool;
  FCC1__claw_acts : DATA_TYPES__Actuators__impl;
  FCC1__osas_failure : bool;
  FCC1__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  FCC1__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC1__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  FCC1__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  FCC1__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  FCC1__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  FCC1__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  FCC1__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC1__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC1__elevators_select : DATA_TYPES__Elevators__treal;
  FCC1__ailerons_select : DATA_TYPES__Ailerons__treal;
  FCC1__rudders_select : DATA_TYPES__Rudders__treal;
  FCC1__flaps_select : DATA_TYPES__Flaps__treal;
  FCC1__aoa_select : DATA_TYPES__AoA__treal;
  FCC1__air_data_select : DATA_TYPES__AirData__treal;
  FCC1__egi_select : DATA_TYPES__EGI__treal;
  FCC1__spoilers_select : DATA_TYPES__Spoilers__treal;
  FCC1__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  FCC1__acts_fail : DATA_TYPES__BoolActuators__impl;
  FCC1__acts_out : DATA_TYPES__Actuators__impl;
  FCC1__sovs1 : DATA_TYPES__BoolActuators__impl;
  FCC1__sovs2 : DATA_TYPES__BoolActuators__impl;
  FCC1____ASSUME__HIST : bool;
  FCC2__ISAS_comp__elevators_failed_update : DATA_TYPES__quad_bool;
  FCC2__ISAS_comp__ailerons_failed_update : DATA_TYPES__quad_bool;
  FCC2__ISAS_comp__rudders_failed_update : DATA_TYPES__quad_bool;
  FCC2__ISAS_comp__flaps_failed_update : DATA_TYPES__quad_bool;
  FCC2__ISAS_comp__aoa_failed_update : DATA_TYPES__dual_bool;
  FCC2__ISAS_comp__air_data_failed_update : DATA_TYPES__dual_bool;
  FCC2__ISAS_comp__spoilers_failed_update : DATA_TYPES__quad_bool;
  FCC2__ISAS_comp__stabilizers_failed_update : DATA_TYPES__quad_bool;
  FCC2__ISAS_comp__elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  FCC2__ISAS_comp__ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC2__ISAS_comp__rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  FCC2__ISAS_comp__flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  FCC2__ISAS_comp__aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  FCC2__ISAS_comp__air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  FCC2__ISAS_comp__spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC2__ISAS_comp__stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC2__ISAS_comp__elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  FCC2__ISAS_comp__ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC2__ISAS_comp__rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  FCC2__ISAS_comp__flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  FCC2__ISAS_comp__aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  FCC2__ISAS_comp__air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  FCC2__ISAS_comp__spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC2__ISAS_comp__stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC2__ISAS_comp__egi_select_fault : DATA_TYPES__EGI__tbool;
  FCC2__ISAS_comp__elevators_sig_tol : DATA_TYPES__Elevators__treal;
  FCC2__ISAS_comp__ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  FCC2__ISAS_comp__rudders_sig_tol : DATA_TYPES__Rudders__treal;
  FCC2__ISAS_comp__flaps_sig_tol : DATA_TYPES__Flaps__treal;
  FCC2__ISAS_comp__aoa_sig_tol : DATA_TYPES__AoA__treal;
  FCC2__ISAS_comp__air_data_sig_tol : DATA_TYPES__AirData__treal;
  FCC2__ISAS_comp__spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  FCC2__ISAS_comp__stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  FCC2__ISAS_comp__elevators_select : DATA_TYPES__Elevators__treal;
  FCC2__ISAS_comp__ailerons_select : DATA_TYPES__Ailerons__treal;
  FCC2__ISAS_comp__rudders_select : DATA_TYPES__Rudders__treal;
  FCC2__ISAS_comp__flaps_select : DATA_TYPES__Flaps__treal;
  FCC2__ISAS_comp__aoa_select : DATA_TYPES__AoA__treal;
  FCC2__ISAS_comp__air_data_select : DATA_TYPES__AirData__treal;
  FCC2__ISAS_comp__egi_select : DATA_TYPES__EGI__treal;
  FCC2__ISAS_comp__spoilers_select : DATA_TYPES__Spoilers__treal;
  FCC2__ISAS_comp__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  FCC2__ISAS_comp__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  FCC2__ISAS_comp__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC2__ISAS_comp__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  FCC2__ISAS_comp__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  FCC2__ISAS_comp__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  FCC2__ISAS_comp__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  FCC2__ISAS_comp__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  FCC2__ISAS_comp__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC2__ISAS_comp__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC2__ISAS_comp____ASSUME__HIST : bool;
  FCC2__OSAS_comp__fail_counts : DATA_TYPES__NumActuators__impl;
  FCC2__OSAS_comp__act_gains : DATA_TYPES__Actuators__impl;
  FCC2__OSAS_comp__acts_out : DATA_TYPES__Actuators__impl;
  FCC2__OSAS_comp__acts_fail : DATA_TYPES__BoolActuators__impl;
  FCC2__OSAS_comp__sovs1 : DATA_TYPES__BoolActuators__impl;
  FCC2__OSAS_comp__sovs2 : DATA_TYPES__BoolActuators__impl;
  FCC2__OSAS_comp____ASSUME__HIST : bool;
  FCC2__CLAW_comp__acts : DATA_TYPES__Actuators__impl;
  FCC2__CLAW_comp____ASSUME__HIST : bool;
  FCC2__claw_acts : DATA_TYPES__Actuators__impl;
  FCC2__osas_failure : bool;
  FCC2__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  FCC2__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC2__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  FCC2__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  FCC2__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  FCC2__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  FCC2__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  FCC2__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC2__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC2__elevators_select : DATA_TYPES__Elevators__treal;
  FCC2__ailerons_select : DATA_TYPES__Ailerons__treal;
  FCC2__rudders_select : DATA_TYPES__Rudders__treal;
  FCC2__flaps_select : DATA_TYPES__Flaps__treal;
  FCC2__aoa_select : DATA_TYPES__AoA__treal;
  FCC2__air_data_select : DATA_TYPES__AirData__treal;
  FCC2__egi_select : DATA_TYPES__EGI__treal;
  FCC2__spoilers_select : DATA_TYPES__Spoilers__treal;
  FCC2__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  FCC2__acts_fail : DATA_TYPES__BoolActuators__impl;
  FCC2__acts_out : DATA_TYPES__Actuators__impl;
  FCC2__sovs1 : DATA_TYPES__BoolActuators__impl;
  FCC2__sovs2 : DATA_TYPES__BoolActuators__impl;
  FCC2____ASSUME__HIST : bool;
  FCC3__ISAS_comp__elevators_failed_update : DATA_TYPES__quad_bool;
  FCC3__ISAS_comp__ailerons_failed_update : DATA_TYPES__quad_bool;
  FCC3__ISAS_comp__rudders_failed_update : DATA_TYPES__quad_bool;
  FCC3__ISAS_comp__flaps_failed_update : DATA_TYPES__quad_bool;
  FCC3__ISAS_comp__aoa_failed_update : DATA_TYPES__dual_bool;
  FCC3__ISAS_comp__air_data_failed_update : DATA_TYPES__dual_bool;
  FCC3__ISAS_comp__spoilers_failed_update : DATA_TYPES__quad_bool;
  FCC3__ISAS_comp__stabilizers_failed_update : DATA_TYPES__quad_bool;
  FCC3__ISAS_comp__elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  FCC3__ISAS_comp__ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC3__ISAS_comp__rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  FCC3__ISAS_comp__flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  FCC3__ISAS_comp__aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  FCC3__ISAS_comp__air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  FCC3__ISAS_comp__spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC3__ISAS_comp__stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC3__ISAS_comp__elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  FCC3__ISAS_comp__ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC3__ISAS_comp__rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  FCC3__ISAS_comp__flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  FCC3__ISAS_comp__aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  FCC3__ISAS_comp__air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  FCC3__ISAS_comp__spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC3__ISAS_comp__stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC3__ISAS_comp__egi_select_fault : DATA_TYPES__EGI__tbool;
  FCC3__ISAS_comp__elevators_sig_tol : DATA_TYPES__Elevators__treal;
  FCC3__ISAS_comp__ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  FCC3__ISAS_comp__rudders_sig_tol : DATA_TYPES__Rudders__treal;
  FCC3__ISAS_comp__flaps_sig_tol : DATA_TYPES__Flaps__treal;
  FCC3__ISAS_comp__aoa_sig_tol : DATA_TYPES__AoA__treal;
  FCC3__ISAS_comp__air_data_sig_tol : DATA_TYPES__AirData__treal;
  FCC3__ISAS_comp__spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  FCC3__ISAS_comp__stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  FCC3__ISAS_comp__elevators_select : DATA_TYPES__Elevators__treal;
  FCC3__ISAS_comp__ailerons_select : DATA_TYPES__Ailerons__treal;
  FCC3__ISAS_comp__rudders_select : DATA_TYPES__Rudders__treal;
  FCC3__ISAS_comp__flaps_select : DATA_TYPES__Flaps__treal;
  FCC3__ISAS_comp__aoa_select : DATA_TYPES__AoA__treal;
  FCC3__ISAS_comp__air_data_select : DATA_TYPES__AirData__treal;
  FCC3__ISAS_comp__egi_select : DATA_TYPES__EGI__treal;
  FCC3__ISAS_comp__spoilers_select : DATA_TYPES__Spoilers__treal;
  FCC3__ISAS_comp__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  FCC3__ISAS_comp__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  FCC3__ISAS_comp__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC3__ISAS_comp__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  FCC3__ISAS_comp__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  FCC3__ISAS_comp__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  FCC3__ISAS_comp__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  FCC3__ISAS_comp__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  FCC3__ISAS_comp__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC3__ISAS_comp__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC3__ISAS_comp____ASSUME__HIST : bool;
  FCC3__OSAS_comp__fail_counts : DATA_TYPES__NumActuators__impl;
  FCC3__OSAS_comp__act_gains : DATA_TYPES__Actuators__impl;
  FCC3__OSAS_comp__acts_out : DATA_TYPES__Actuators__impl;
  FCC3__OSAS_comp__acts_fail : DATA_TYPES__BoolActuators__impl;
  FCC3__OSAS_comp__sovs1 : DATA_TYPES__BoolActuators__impl;
  FCC3__OSAS_comp__sovs2 : DATA_TYPES__BoolActuators__impl;
  FCC3__OSAS_comp____ASSUME__HIST : bool;
  FCC3__CLAW_comp__acts : DATA_TYPES__Actuators__impl;
  FCC3__CLAW_comp____ASSUME__HIST : bool;
  FCC3__claw_acts : DATA_TYPES__Actuators__impl;
  FCC3__osas_failure : bool;
  FCC3__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  FCC3__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC3__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  FCC3__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  FCC3__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  FCC3__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  FCC3__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  FCC3__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC3__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC3__elevators_select : DATA_TYPES__Elevators__treal;
  FCC3__ailerons_select : DATA_TYPES__Ailerons__treal;
  FCC3__rudders_select : DATA_TYPES__Rudders__treal;
  FCC3__flaps_select : DATA_TYPES__Flaps__treal;
  FCC3__aoa_select : DATA_TYPES__AoA__treal;
  FCC3__air_data_select : DATA_TYPES__AirData__treal;
  FCC3__egi_select : DATA_TYPES__EGI__treal;
  FCC3__spoilers_select : DATA_TYPES__Spoilers__treal;
  FCC3__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  FCC3__acts_fail : DATA_TYPES__BoolActuators__impl;
  FCC3__acts_out : DATA_TYPES__Actuators__impl;
  FCC3__sovs1 : DATA_TYPES__BoolActuators__impl;
  FCC3__sovs2 : DATA_TYPES__BoolActuators__impl;
  FCC3____ASSUME__HIST : bool;
  FCC4__ISAS_comp__elevators_failed_update : DATA_TYPES__quad_bool;
  FCC4__ISAS_comp__ailerons_failed_update : DATA_TYPES__quad_bool;
  FCC4__ISAS_comp__rudders_failed_update : DATA_TYPES__quad_bool;
  FCC4__ISAS_comp__flaps_failed_update : DATA_TYPES__quad_bool;
  FCC4__ISAS_comp__aoa_failed_update : DATA_TYPES__dual_bool;
  FCC4__ISAS_comp__air_data_failed_update : DATA_TYPES__dual_bool;
  FCC4__ISAS_comp__spoilers_failed_update : DATA_TYPES__quad_bool;
  FCC4__ISAS_comp__stabilizers_failed_update : DATA_TYPES__quad_bool;
  FCC4__ISAS_comp__elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  FCC4__ISAS_comp__ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC4__ISAS_comp__rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  FCC4__ISAS_comp__flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  FCC4__ISAS_comp__aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  FCC4__ISAS_comp__air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  FCC4__ISAS_comp__spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC4__ISAS_comp__stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC4__ISAS_comp__elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  FCC4__ISAS_comp__ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC4__ISAS_comp__rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  FCC4__ISAS_comp__flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  FCC4__ISAS_comp__aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  FCC4__ISAS_comp__air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  FCC4__ISAS_comp__spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC4__ISAS_comp__stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC4__ISAS_comp__egi_select_fault : DATA_TYPES__EGI__tbool;
  FCC4__ISAS_comp__elevators_sig_tol : DATA_TYPES__Elevators__treal;
  FCC4__ISAS_comp__ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  FCC4__ISAS_comp__rudders_sig_tol : DATA_TYPES__Rudders__treal;
  FCC4__ISAS_comp__flaps_sig_tol : DATA_TYPES__Flaps__treal;
  FCC4__ISAS_comp__aoa_sig_tol : DATA_TYPES__AoA__treal;
  FCC4__ISAS_comp__air_data_sig_tol : DATA_TYPES__AirData__treal;
  FCC4__ISAS_comp__spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  FCC4__ISAS_comp__stabilizer_sig_tol : DATA_TYPES__Stabilizer__treal;
  FCC4__ISAS_comp__elevators_select : DATA_TYPES__Elevators__treal;
  FCC4__ISAS_comp__ailerons_select : DATA_TYPES__Ailerons__treal;
  FCC4__ISAS_comp__rudders_select : DATA_TYPES__Rudders__treal;
  FCC4__ISAS_comp__flaps_select : DATA_TYPES__Flaps__treal;
  FCC4__ISAS_comp__aoa_select : DATA_TYPES__AoA__treal;
  FCC4__ISAS_comp__air_data_select : DATA_TYPES__AirData__treal;
  FCC4__ISAS_comp__egi_select : DATA_TYPES__EGI__treal;
  FCC4__ISAS_comp__spoilers_select : DATA_TYPES__Spoilers__treal;
  FCC4__ISAS_comp__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  FCC4__ISAS_comp__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  FCC4__ISAS_comp__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC4__ISAS_comp__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  FCC4__ISAS_comp__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  FCC4__ISAS_comp__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  FCC4__ISAS_comp__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  FCC4__ISAS_comp__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  FCC4__ISAS_comp__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC4__ISAS_comp__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC4__ISAS_comp____ASSUME__HIST : bool;
  FCC4__OSAS_comp__fail_counts : DATA_TYPES__NumActuators__impl;
  FCC4__OSAS_comp__act_gains : DATA_TYPES__Actuators__impl;
  FCC4__OSAS_comp__acts_out : DATA_TYPES__Actuators__impl;
  FCC4__OSAS_comp__acts_fail : DATA_TYPES__BoolActuators__impl;
  FCC4__OSAS_comp__sovs1 : DATA_TYPES__BoolActuators__impl;
  FCC4__OSAS_comp__sovs2 : DATA_TYPES__BoolActuators__impl;
  FCC4__OSAS_comp____ASSUME__HIST : bool;
  FCC4__CLAW_comp__acts : DATA_TYPES__Actuators__impl;
  FCC4__CLAW_comp____ASSUME__HIST : bool;
  FCC4__claw_acts : DATA_TYPES__Actuators__impl;
  FCC4__osas_failure : bool;
  FCC4__elevators_faults : DATA_TYPES__QUAD_Elevators__tbool;
  FCC4__ailerons_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  FCC4__rudders_faults : DATA_TYPES__QUAD_Rudders__tbool;
  FCC4__flaps_faults : DATA_TYPES__QUAD_Flaps__tbool;
  FCC4__aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  FCC4__air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  FCC4__egi_faults : DATA_TYPES__QUAD_EGI__tbool;
  FCC4__spoilers_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  FCC4__stabilizers_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  FCC4__elevators_select : DATA_TYPES__Elevators__treal;
  FCC4__ailerons_select : DATA_TYPES__Ailerons__treal;
  FCC4__rudders_select : DATA_TYPES__Rudders__treal;
  FCC4__flaps_select : DATA_TYPES__Flaps__treal;
  FCC4__aoa_select : DATA_TYPES__AoA__treal;
  FCC4__air_data_select : DATA_TYPES__AirData__treal;
  FCC4__egi_select : DATA_TYPES__EGI__treal;
  FCC4__spoilers_select : DATA_TYPES__Spoilers__treal;
  FCC4__stabilizers_select : DATA_TYPES__Stabilizer__treal;
  FCC4__acts_fail : DATA_TYPES__BoolActuators__impl;
  FCC4__acts_out : DATA_TYPES__Actuators__impl;
  FCC4__sovs1 : DATA_TYPES__BoolActuators__impl;
  FCC4__sovs2 : DATA_TYPES__BoolActuators__impl;
  FCC4____ASSUME__HIST : bool;
  num_valids : DATA_TYPES__NumActuators__impl;
  acts_out1 : DATA_TYPES__Actuators__impl;
  acts_out2 : DATA_TYPES__Actuators__impl;
  acts_out3 : DATA_TYPES__Actuators__impl;
  acts_out4 : DATA_TYPES__Actuators__impl;
  sovs11 : DATA_TYPES__BoolActuators__impl;
  sovs21 : DATA_TYPES__BoolActuators__impl;
  sovs12 : DATA_TYPES__BoolActuators__impl;
  sovs22 : DATA_TYPES__BoolActuators__impl;
  sovs13 : DATA_TYPES__BoolActuators__impl;
  sovs23 : DATA_TYPES__BoolActuators__impl;
  sovs14 : DATA_TYPES__BoolActuators__impl;
  sovs24 : DATA_TYPES__BoolActuators__impl;
  FCC1__ISAS_comp__elevators : DATA_TYPES__QUAD_Elevators__treal;
  FCC1__ISAS_comp__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  FCC1__ISAS_comp__rudders : DATA_TYPES__QUAD_Rudders__treal;
  FCC1__ISAS_comp__flaps : DATA_TYPES__QUAD_Flaps__treal;
  FCC1__ISAS_comp__aoa : DATA_TYPES__DUAL_AoA__treal;
  FCC1__ISAS_comp__air_data : DATA_TYPES__DUAL_AirData__treal;
  FCC1__ISAS_comp__egi : DATA_TYPES__QUAD_EGI__treal;
  FCC1__ISAS_comp__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  FCC1__ISAS_comp__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  FCC1__ISAS_comp__time : real;
  FCC1__OSAS_comp__acts_in : DATA_TYPES__Actuators__impl;
  FCC1__OSAS_comp__acts_ret : DATA_TYPES__Actuators__impl;
  FCC1__OSAS_comp__acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  FCC1__OSAS_comp__acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  FCC1__OSAS_comp__acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  FCC1__OSAS_comp__ccdl_frame_count : Base_Types__Integer;
  FCC1__OSAS_comp__ccdl_failed : Base_Types__Boolean;
  FCC1__OSAS_comp__num_valid_acts : DATA_TYPES__NumActuators__impl;
  FCC1__OSAS_comp__osas_failed : Base_Types__Boolean;
  FCC1__OSAS_comp__act_claw_fails : Base_Types__Boolean;
  FCC1__OSAS_comp__time : real;
  FCC1__CLAW_comp__time : real;
  FCC1__elevators : DATA_TYPES__QUAD_Elevators__treal;
  FCC1__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  FCC1__rudders : DATA_TYPES__QUAD_Rudders__treal;
  FCC1__flaps : DATA_TYPES__QUAD_Flaps__treal;
  FCC1__aoa : DATA_TYPES__DUAL_AoA__treal;
  FCC1__air_data : DATA_TYPES__DUAL_AirData__treal;
  FCC1__egi : DATA_TYPES__QUAD_EGI__treal;
  FCC1__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  FCC1__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  FCC1__acts_ret : DATA_TYPES__Actuators__impl;
  FCC1__num_valid_acts : DATA_TYPES__NumActuators__impl;
  FCC1__time : real;
  FCC2__ISAS_comp__elevators : DATA_TYPES__QUAD_Elevators__treal;
  FCC2__ISAS_comp__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  FCC2__ISAS_comp__rudders : DATA_TYPES__QUAD_Rudders__treal;
  FCC2__ISAS_comp__flaps : DATA_TYPES__QUAD_Flaps__treal;
  FCC2__ISAS_comp__aoa : DATA_TYPES__DUAL_AoA__treal;
  FCC2__ISAS_comp__air_data : DATA_TYPES__DUAL_AirData__treal;
  FCC2__ISAS_comp__egi : DATA_TYPES__QUAD_EGI__treal;
  FCC2__ISAS_comp__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  FCC2__ISAS_comp__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  FCC2__ISAS_comp__time : real;
  FCC2__OSAS_comp__acts_in : DATA_TYPES__Actuators__impl;
  FCC2__OSAS_comp__acts_ret : DATA_TYPES__Actuators__impl;
  FCC2__OSAS_comp__acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  FCC2__OSAS_comp__acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  FCC2__OSAS_comp__acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  FCC2__OSAS_comp__ccdl_frame_count : Base_Types__Integer;
  FCC2__OSAS_comp__ccdl_failed : Base_Types__Boolean;
  FCC2__OSAS_comp__num_valid_acts : DATA_TYPES__NumActuators__impl;
  FCC2__OSAS_comp__osas_failed : Base_Types__Boolean;
  FCC2__OSAS_comp__act_claw_fails : Base_Types__Boolean;
  FCC2__OSAS_comp__time : real;
  FCC2__CLAW_comp__time : real;
  FCC2__elevators : DATA_TYPES__QUAD_Elevators__treal;
  FCC2__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  FCC2__rudders : DATA_TYPES__QUAD_Rudders__treal;
  FCC2__flaps : DATA_TYPES__QUAD_Flaps__treal;
  FCC2__aoa : DATA_TYPES__DUAL_AoA__treal;
  FCC2__air_data : DATA_TYPES__DUAL_AirData__treal;
  FCC2__egi : DATA_TYPES__QUAD_EGI__treal;
  FCC2__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  FCC2__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  FCC2__acts_ret : DATA_TYPES__Actuators__impl;
  FCC2__num_valid_acts : DATA_TYPES__NumActuators__impl;
  FCC2__time : real;
  FCC3__ISAS_comp__elevators : DATA_TYPES__QUAD_Elevators__treal;
  FCC3__ISAS_comp__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  FCC3__ISAS_comp__rudders : DATA_TYPES__QUAD_Rudders__treal;
  FCC3__ISAS_comp__flaps : DATA_TYPES__QUAD_Flaps__treal;
  FCC3__ISAS_comp__aoa : DATA_TYPES__DUAL_AoA__treal;
  FCC3__ISAS_comp__air_data : DATA_TYPES__DUAL_AirData__treal;
  FCC3__ISAS_comp__egi : DATA_TYPES__QUAD_EGI__treal;
  FCC3__ISAS_comp__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  FCC3__ISAS_comp__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  FCC3__ISAS_comp__time : real;
  FCC3__OSAS_comp__acts_in : DATA_TYPES__Actuators__impl;
  FCC3__OSAS_comp__acts_ret : DATA_TYPES__Actuators__impl;
  FCC3__OSAS_comp__acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  FCC3__OSAS_comp__acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  FCC3__OSAS_comp__acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  FCC3__OSAS_comp__ccdl_frame_count : Base_Types__Integer;
  FCC3__OSAS_comp__ccdl_failed : Base_Types__Boolean;
  FCC3__OSAS_comp__num_valid_acts : DATA_TYPES__NumActuators__impl;
  FCC3__OSAS_comp__osas_failed : Base_Types__Boolean;
  FCC3__OSAS_comp__act_claw_fails : Base_Types__Boolean;
  FCC3__OSAS_comp__time : real;
  FCC3__CLAW_comp__time : real;
  FCC3__elevators : DATA_TYPES__QUAD_Elevators__treal;
  FCC3__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  FCC3__rudders : DATA_TYPES__QUAD_Rudders__treal;
  FCC3__flaps : DATA_TYPES__QUAD_Flaps__treal;
  FCC3__aoa : DATA_TYPES__DUAL_AoA__treal;
  FCC3__air_data : DATA_TYPES__DUAL_AirData__treal;
  FCC3__egi : DATA_TYPES__QUAD_EGI__treal;
  FCC3__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  FCC3__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  FCC3__acts_ret : DATA_TYPES__Actuators__impl;
  FCC3__num_valid_acts : DATA_TYPES__NumActuators__impl;
  FCC3__time : real;
  FCC4__ISAS_comp__elevators : DATA_TYPES__QUAD_Elevators__treal;
  FCC4__ISAS_comp__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  FCC4__ISAS_comp__rudders : DATA_TYPES__QUAD_Rudders__treal;
  FCC4__ISAS_comp__flaps : DATA_TYPES__QUAD_Flaps__treal;
  FCC4__ISAS_comp__aoa : DATA_TYPES__DUAL_AoA__treal;
  FCC4__ISAS_comp__air_data : DATA_TYPES__DUAL_AirData__treal;
  FCC4__ISAS_comp__egi : DATA_TYPES__QUAD_EGI__treal;
  FCC4__ISAS_comp__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  FCC4__ISAS_comp__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  FCC4__ISAS_comp__time : real;
  FCC4__OSAS_comp__acts_in : DATA_TYPES__Actuators__impl;
  FCC4__OSAS_comp__acts_ret : DATA_TYPES__Actuators__impl;
  FCC4__OSAS_comp__acts_claw_fail : DATA_TYPES__BoolActuators__impl;
  FCC4__OSAS_comp__acts_isas_fail : DATA_TYPES__BoolActuators__impl;
  FCC4__OSAS_comp__acts_ccdl_num_fail : DATA_TYPES__NumActuators__impl;
  FCC4__OSAS_comp__ccdl_frame_count : Base_Types__Integer;
  FCC4__OSAS_comp__ccdl_failed : Base_Types__Boolean;
  FCC4__OSAS_comp__num_valid_acts : DATA_TYPES__NumActuators__impl;
  FCC4__OSAS_comp__osas_failed : Base_Types__Boolean;
  FCC4__OSAS_comp__act_claw_fails : Base_Types__Boolean;
  FCC4__OSAS_comp__time : real;
  FCC4__CLAW_comp__time : real;
  FCC4__elevators : DATA_TYPES__QUAD_Elevators__treal;
  FCC4__ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  FCC4__rudders : DATA_TYPES__QUAD_Rudders__treal;
  FCC4__flaps : DATA_TYPES__QUAD_Flaps__treal;
  FCC4__aoa : DATA_TYPES__DUAL_AoA__treal;
  FCC4__air_data : DATA_TYPES__DUAL_AirData__treal;
  FCC4__egi : DATA_TYPES__QUAD_EGI__treal;
  FCC4__spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  FCC4__stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  FCC4__acts_ret : DATA_TYPES__Actuators__impl;
  FCC4__num_valid_acts : DATA_TYPES__NumActuators__impl;
  FCC4__time : real;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  egi : DATA_TYPES__QUAD_EGI__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  acts_ret1 : DATA_TYPES__Actuators__impl;
  acts_ret2 : DATA_TYPES__Actuators__impl;
  acts_ret3 : DATA_TYPES__Actuators__impl;
  acts_ret4 : DATA_TYPES__Actuators__impl;
  time : real
) returns (

);
var
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
let
  --%MAIN;
  __ASSUME__HIST = (FCC4____ASSUME__HIST and (FCC3____ASSUME__HIST and (FCC2____ASSUME__HIST and (FCC1____ASSUME__HIST and true))));

  __GUARANTEE0 = (true -> ((((((((((((((((((((num_valids.THROTL <= (pre num_valids.THROTL)) and (num_valids.THROTR <= (pre num_valids.THROTR))) and (num_valids.ELLOB <= (pre num_valids.ELLOB))) and (num_valids.ELLIB <= (pre num_valids.ELLIB))) and (num_valids.ELROB <= (pre num_valids.ELROB))) and (num_valids.ELRIB <= (pre num_valids.ELRIB))) and (num_valids.AILL <= (pre num_valids.AILL))) and (num_valids.AILR <= (pre num_valids.AILR))) and (num_valids.RUDUP <= (pre num_valids.RUDUP))) and (num_valids.RUDLO <= (pre num_valids.RUDLO))) and (num_valids.SPLLOB <= (pre num_valids.SPLLOB))) and (num_valids.SPLLIB <= (pre num_valids.SPLLIB))) and (num_valids.SPLROB <= (pre num_valids.SPLROB))) and (num_valids.SPLRIB <= (pre num_valids.SPLRIB))) and (num_valids.FLAPLI <= (pre num_valids.FLAPLI))) and (num_valids.FLAPLO <= (pre num_valids.FLAPLO))) and (num_valids.FLAPRI <= (pre num_valids.FLAPRI))) and (num_valids.GEAR <= (pre num_valids.GEAR))) and (num_valids.BRAKE <= (pre num_valids.BRAKE))) and (num_valids.STEER <= (pre num_valids.STEER))));

  __GUARANTEE1 = FCS_RC1__req(acts_out1, acts_out2, acts_out3, acts_out4);

  assert (time = FCC1__time);

  assert _TOP__FCC1(FCC1____ASSUME__HIST, FCC1__ISAS_comp__elevators, FCC1__ISAS_comp__ailerons, FCC1__ISAS_comp__rudders, FCC1__ISAS_comp__flaps, FCC1__ISAS_comp__aoa, FCC1__ISAS_comp__air_data, FCC1__ISAS_comp__egi, FCC1__ISAS_comp__spoilers, FCC1__ISAS_comp__stabilizers, FCC1__ISAS_comp__time, FCC1__OSAS_comp__acts_in, FCC1__OSAS_comp__acts_ret, FCC1__OSAS_comp__acts_claw_fail, FCC1__OSAS_comp__acts_isas_fail, FCC1__OSAS_comp__acts_ccdl_num_fail, FCC1__OSAS_comp__ccdl_frame_count, FCC1__OSAS_comp__ccdl_failed, FCC1__OSAS_comp__num_valid_acts, FCC1__OSAS_comp__osas_failed, FCC1__OSAS_comp__act_claw_fails, FCC1__OSAS_comp__time, FCC1__CLAW_comp__time, FCC1__elevators, FCC1__ailerons, FCC1__rudders, FCC1__flaps, FCC1__aoa, FCC1__air_data, FCC1__egi, FCC1__spoilers, FCC1__stabilizers, FCC1__acts_ret, FCC1__num_valid_acts, FCC1__time, FCC1__ISAS_comp__elevators_failed_update, FCC1__ISAS_comp__ailerons_failed_update, FCC1__ISAS_comp__rudders_failed_update, FCC1__ISAS_comp__flaps_failed_update, FCC1__ISAS_comp__aoa_failed_update, FCC1__ISAS_comp__air_data_failed_update, FCC1__ISAS_comp__spoilers_failed_update, FCC1__ISAS_comp__stabilizers_failed_update, FCC1__ISAS_comp__elevators_in_range, FCC1__ISAS_comp__ailerons_in_range, FCC1__ISAS_comp__rudders_in_range, FCC1__ISAS_comp__flaps_in_range, FCC1__ISAS_comp__aoa_in_range, FCC1__ISAS_comp__air_data_in_range, FCC1__ISAS_comp__spoilers_in_range, FCC1__ISAS_comp__stabilizer_in_range, FCC1__ISAS_comp__elevators_within_tol, FCC1__ISAS_comp__ailerons_within_tol, FCC1__ISAS_comp__rudders_within_tol, FCC1__ISAS_comp__flaps_within_tol, FCC1__ISAS_comp__aoa_within_tol, FCC1__ISAS_comp__air_data_within_tol, FCC1__ISAS_comp__spoilers_within_tol, FCC1__ISAS_comp__stabilizer_within_tol, FCC1__ISAS_comp__egi_select_fault, FCC1__ISAS_comp__elevators_sig_tol, FCC1__ISAS_comp__ailerons_sig_tol, FCC1__ISAS_comp__rudders_sig_tol, FCC1__ISAS_comp__flaps_sig_tol, FCC1__ISAS_comp__aoa_sig_tol, FCC1__ISAS_comp__air_data_sig_tol, FCC1__ISAS_comp__spoilers_sig_tol, FCC1__ISAS_comp__stabilizer_sig_tol, FCC1__ISAS_comp__elevators_select, FCC1__ISAS_comp__ailerons_select, FCC1__ISAS_comp__rudders_select, FCC1__ISAS_comp__flaps_select, FCC1__ISAS_comp__aoa_select, FCC1__ISAS_comp__air_data_select, FCC1__ISAS_comp__egi_select, FCC1__ISAS_comp__spoilers_select, FCC1__ISAS_comp__stabilizers_select, FCC1__ISAS_comp__elevators_faults, FCC1__ISAS_comp__ailerons_faults, FCC1__ISAS_comp__rudders_faults, FCC1__ISAS_comp__flaps_faults, FCC1__ISAS_comp__aoa_faults, FCC1__ISAS_comp__air_data_faults, FCC1__ISAS_comp__egi_faults, FCC1__ISAS_comp__spoilers_faults, FCC1__ISAS_comp__stabilizers_faults, FCC1__ISAS_comp____ASSUME__HIST, FCC1__OSAS_comp__fail_counts, FCC1__OSAS_comp__act_gains, FCC1__OSAS_comp__acts_out, FCC1__OSAS_comp__acts_fail, FCC1__OSAS_comp__sovs1, FCC1__OSAS_comp__sovs2, FCC1__OSAS_comp____ASSUME__HIST, FCC1__CLAW_comp__acts, FCC1__CLAW_comp____ASSUME__HIST, FCC1__claw_acts, FCC1__osas_failure, FCC1__elevators_faults, FCC1__ailerons_faults, FCC1__rudders_faults, FCC1__flaps_faults, FCC1__aoa_faults, FCC1__air_data_faults, FCC1__egi_faults, FCC1__spoilers_faults, FCC1__stabilizers_faults, FCC1__elevators_select, FCC1__ailerons_select, FCC1__rudders_select, FCC1__flaps_select, FCC1__aoa_select, FCC1__air_data_select, FCC1__egi_select, FCC1__spoilers_select, FCC1__stabilizers_select, FCC1__acts_fail, FCC1__acts_out, FCC1__sovs1, FCC1__sovs2);

  assert (FCC1____ASSUME__HIST = __HIST(true));

  assert (time = FCC2__time);

  assert _TOP__FCC2(FCC2____ASSUME__HIST, FCC2__ISAS_comp__elevators, FCC2__ISAS_comp__ailerons, FCC2__ISAS_comp__rudders, FCC2__ISAS_comp__flaps, FCC2__ISAS_comp__aoa, FCC2__ISAS_comp__air_data, FCC2__ISAS_comp__egi, FCC2__ISAS_comp__spoilers, FCC2__ISAS_comp__stabilizers, FCC2__ISAS_comp__time, FCC2__OSAS_comp__acts_in, FCC2__OSAS_comp__acts_ret, FCC2__OSAS_comp__acts_claw_fail, FCC2__OSAS_comp__acts_isas_fail, FCC2__OSAS_comp__acts_ccdl_num_fail, FCC2__OSAS_comp__ccdl_frame_count, FCC2__OSAS_comp__ccdl_failed, FCC2__OSAS_comp__num_valid_acts, FCC2__OSAS_comp__osas_failed, FCC2__OSAS_comp__act_claw_fails, FCC2__OSAS_comp__time, FCC2__CLAW_comp__time, FCC2__elevators, FCC2__ailerons, FCC2__rudders, FCC2__flaps, FCC2__aoa, FCC2__air_data, FCC2__egi, FCC2__spoilers, FCC2__stabilizers, FCC2__acts_ret, FCC2__num_valid_acts, FCC2__time, FCC2__ISAS_comp__elevators_failed_update, FCC2__ISAS_comp__ailerons_failed_update, FCC2__ISAS_comp__rudders_failed_update, FCC2__ISAS_comp__flaps_failed_update, FCC2__ISAS_comp__aoa_failed_update, FCC2__ISAS_comp__air_data_failed_update, FCC2__ISAS_comp__spoilers_failed_update, FCC2__ISAS_comp__stabilizers_failed_update, FCC2__ISAS_comp__elevators_in_range, FCC2__ISAS_comp__ailerons_in_range, FCC2__ISAS_comp__rudders_in_range, FCC2__ISAS_comp__flaps_in_range, FCC2__ISAS_comp__aoa_in_range, FCC2__ISAS_comp__air_data_in_range, FCC2__ISAS_comp__spoilers_in_range, FCC2__ISAS_comp__stabilizer_in_range, FCC2__ISAS_comp__elevators_within_tol, FCC2__ISAS_comp__ailerons_within_tol, FCC2__ISAS_comp__rudders_within_tol, FCC2__ISAS_comp__flaps_within_tol, FCC2__ISAS_comp__aoa_within_tol, FCC2__ISAS_comp__air_data_within_tol, FCC2__ISAS_comp__spoilers_within_tol, FCC2__ISAS_comp__stabilizer_within_tol, FCC2__ISAS_comp__egi_select_fault, FCC2__ISAS_comp__elevators_sig_tol, FCC2__ISAS_comp__ailerons_sig_tol, FCC2__ISAS_comp__rudders_sig_tol, FCC2__ISAS_comp__flaps_sig_tol, FCC2__ISAS_comp__aoa_sig_tol, FCC2__ISAS_comp__air_data_sig_tol, FCC2__ISAS_comp__spoilers_sig_tol, FCC2__ISAS_comp__stabilizer_sig_tol, FCC2__ISAS_comp__elevators_select, FCC2__ISAS_comp__ailerons_select, FCC2__ISAS_comp__rudders_select, FCC2__ISAS_comp__flaps_select, FCC2__ISAS_comp__aoa_select, FCC2__ISAS_comp__air_data_select, FCC2__ISAS_comp__egi_select, FCC2__ISAS_comp__spoilers_select, FCC2__ISAS_comp__stabilizers_select, FCC2__ISAS_comp__elevators_faults, FCC2__ISAS_comp__ailerons_faults, FCC2__ISAS_comp__rudders_faults, FCC2__ISAS_comp__flaps_faults, FCC2__ISAS_comp__aoa_faults, FCC2__ISAS_comp__air_data_faults, FCC2__ISAS_comp__egi_faults, FCC2__ISAS_comp__spoilers_faults, FCC2__ISAS_comp__stabilizers_faults, FCC2__ISAS_comp____ASSUME__HIST, FCC2__OSAS_comp__fail_counts, FCC2__OSAS_comp__act_gains, FCC2__OSAS_comp__acts_out, FCC2__OSAS_comp__acts_fail, FCC2__OSAS_comp__sovs1, FCC2__OSAS_comp__sovs2, FCC2__OSAS_comp____ASSUME__HIST, FCC2__CLAW_comp__acts, FCC2__CLAW_comp____ASSUME__HIST, FCC2__claw_acts, FCC2__osas_failure, FCC2__elevators_faults, FCC2__ailerons_faults, FCC2__rudders_faults, FCC2__flaps_faults, FCC2__aoa_faults, FCC2__air_data_faults, FCC2__egi_faults, FCC2__spoilers_faults, FCC2__stabilizers_faults, FCC2__elevators_select, FCC2__ailerons_select, FCC2__rudders_select, FCC2__flaps_select, FCC2__aoa_select, FCC2__air_data_select, FCC2__egi_select, FCC2__spoilers_select, FCC2__stabilizers_select, FCC2__acts_fail, FCC2__acts_out, FCC2__sovs1, FCC2__sovs2);

  assert (FCC2____ASSUME__HIST = __HIST(true));

  assert (time = FCC3__time);

  assert _TOP__FCC3(FCC3____ASSUME__HIST, FCC3__ISAS_comp__elevators, FCC3__ISAS_comp__ailerons, FCC3__ISAS_comp__rudders, FCC3__ISAS_comp__flaps, FCC3__ISAS_comp__aoa, FCC3__ISAS_comp__air_data, FCC3__ISAS_comp__egi, FCC3__ISAS_comp__spoilers, FCC3__ISAS_comp__stabilizers, FCC3__ISAS_comp__time, FCC3__OSAS_comp__acts_in, FCC3__OSAS_comp__acts_ret, FCC3__OSAS_comp__acts_claw_fail, FCC3__OSAS_comp__acts_isas_fail, FCC3__OSAS_comp__acts_ccdl_num_fail, FCC3__OSAS_comp__ccdl_frame_count, FCC3__OSAS_comp__ccdl_failed, FCC3__OSAS_comp__num_valid_acts, FCC3__OSAS_comp__osas_failed, FCC3__OSAS_comp__act_claw_fails, FCC3__OSAS_comp__time, FCC3__CLAW_comp__time, FCC3__elevators, FCC3__ailerons, FCC3__rudders, FCC3__flaps, FCC3__aoa, FCC3__air_data, FCC3__egi, FCC3__spoilers, FCC3__stabilizers, FCC3__acts_ret, FCC3__num_valid_acts, FCC3__time, FCC3__ISAS_comp__elevators_failed_update, FCC3__ISAS_comp__ailerons_failed_update, FCC3__ISAS_comp__rudders_failed_update, FCC3__ISAS_comp__flaps_failed_update, FCC3__ISAS_comp__aoa_failed_update, FCC3__ISAS_comp__air_data_failed_update, FCC3__ISAS_comp__spoilers_failed_update, FCC3__ISAS_comp__stabilizers_failed_update, FCC3__ISAS_comp__elevators_in_range, FCC3__ISAS_comp__ailerons_in_range, FCC3__ISAS_comp__rudders_in_range, FCC3__ISAS_comp__flaps_in_range, FCC3__ISAS_comp__aoa_in_range, FCC3__ISAS_comp__air_data_in_range, FCC3__ISAS_comp__spoilers_in_range, FCC3__ISAS_comp__stabilizer_in_range, FCC3__ISAS_comp__elevators_within_tol, FCC3__ISAS_comp__ailerons_within_tol, FCC3__ISAS_comp__rudders_within_tol, FCC3__ISAS_comp__flaps_within_tol, FCC3__ISAS_comp__aoa_within_tol, FCC3__ISAS_comp__air_data_within_tol, FCC3__ISAS_comp__spoilers_within_tol, FCC3__ISAS_comp__stabilizer_within_tol, FCC3__ISAS_comp__egi_select_fault, FCC3__ISAS_comp__elevators_sig_tol, FCC3__ISAS_comp__ailerons_sig_tol, FCC3__ISAS_comp__rudders_sig_tol, FCC3__ISAS_comp__flaps_sig_tol, FCC3__ISAS_comp__aoa_sig_tol, FCC3__ISAS_comp__air_data_sig_tol, FCC3__ISAS_comp__spoilers_sig_tol, FCC3__ISAS_comp__stabilizer_sig_tol, FCC3__ISAS_comp__elevators_select, FCC3__ISAS_comp__ailerons_select, FCC3__ISAS_comp__rudders_select, FCC3__ISAS_comp__flaps_select, FCC3__ISAS_comp__aoa_select, FCC3__ISAS_comp__air_data_select, FCC3__ISAS_comp__egi_select, FCC3__ISAS_comp__spoilers_select, FCC3__ISAS_comp__stabilizers_select, FCC3__ISAS_comp__elevators_faults, FCC3__ISAS_comp__ailerons_faults, FCC3__ISAS_comp__rudders_faults, FCC3__ISAS_comp__flaps_faults, FCC3__ISAS_comp__aoa_faults, FCC3__ISAS_comp__air_data_faults, FCC3__ISAS_comp__egi_faults, FCC3__ISAS_comp__spoilers_faults, FCC3__ISAS_comp__stabilizers_faults, FCC3__ISAS_comp____ASSUME__HIST, FCC3__OSAS_comp__fail_counts, FCC3__OSAS_comp__act_gains, FCC3__OSAS_comp__acts_out, FCC3__OSAS_comp__acts_fail, FCC3__OSAS_comp__sovs1, FCC3__OSAS_comp__sovs2, FCC3__OSAS_comp____ASSUME__HIST, FCC3__CLAW_comp__acts, FCC3__CLAW_comp____ASSUME__HIST, FCC3__claw_acts, FCC3__osas_failure, FCC3__elevators_faults, FCC3__ailerons_faults, FCC3__rudders_faults, FCC3__flaps_faults, FCC3__aoa_faults, FCC3__air_data_faults, FCC3__egi_faults, FCC3__spoilers_faults, FCC3__stabilizers_faults, FCC3__elevators_select, FCC3__ailerons_select, FCC3__rudders_select, FCC3__flaps_select, FCC3__aoa_select, FCC3__air_data_select, FCC3__egi_select, FCC3__spoilers_select, FCC3__stabilizers_select, FCC3__acts_fail, FCC3__acts_out, FCC3__sovs1, FCC3__sovs2);

  assert (FCC3____ASSUME__HIST = __HIST(true));

  assert (time = FCC4__time);

  assert _TOP__FCC4(FCC4____ASSUME__HIST, FCC4__ISAS_comp__elevators, FCC4__ISAS_comp__ailerons, FCC4__ISAS_comp__rudders, FCC4__ISAS_comp__flaps, FCC4__ISAS_comp__aoa, FCC4__ISAS_comp__air_data, FCC4__ISAS_comp__egi, FCC4__ISAS_comp__spoilers, FCC4__ISAS_comp__stabilizers, FCC4__ISAS_comp__time, FCC4__OSAS_comp__acts_in, FCC4__OSAS_comp__acts_ret, FCC4__OSAS_comp__acts_claw_fail, FCC4__OSAS_comp__acts_isas_fail, FCC4__OSAS_comp__acts_ccdl_num_fail, FCC4__OSAS_comp__ccdl_frame_count, FCC4__OSAS_comp__ccdl_failed, FCC4__OSAS_comp__num_valid_acts, FCC4__OSAS_comp__osas_failed, FCC4__OSAS_comp__act_claw_fails, FCC4__OSAS_comp__time, FCC4__CLAW_comp__time, FCC4__elevators, FCC4__ailerons, FCC4__rudders, FCC4__flaps, FCC4__aoa, FCC4__air_data, FCC4__egi, FCC4__spoilers, FCC4__stabilizers, FCC4__acts_ret, FCC4__num_valid_acts, FCC4__time, FCC4__ISAS_comp__elevators_failed_update, FCC4__ISAS_comp__ailerons_failed_update, FCC4__ISAS_comp__rudders_failed_update, FCC4__ISAS_comp__flaps_failed_update, FCC4__ISAS_comp__aoa_failed_update, FCC4__ISAS_comp__air_data_failed_update, FCC4__ISAS_comp__spoilers_failed_update, FCC4__ISAS_comp__stabilizers_failed_update, FCC4__ISAS_comp__elevators_in_range, FCC4__ISAS_comp__ailerons_in_range, FCC4__ISAS_comp__rudders_in_range, FCC4__ISAS_comp__flaps_in_range, FCC4__ISAS_comp__aoa_in_range, FCC4__ISAS_comp__air_data_in_range, FCC4__ISAS_comp__spoilers_in_range, FCC4__ISAS_comp__stabilizer_in_range, FCC4__ISAS_comp__elevators_within_tol, FCC4__ISAS_comp__ailerons_within_tol, FCC4__ISAS_comp__rudders_within_tol, FCC4__ISAS_comp__flaps_within_tol, FCC4__ISAS_comp__aoa_within_tol, FCC4__ISAS_comp__air_data_within_tol, FCC4__ISAS_comp__spoilers_within_tol, FCC4__ISAS_comp__stabilizer_within_tol, FCC4__ISAS_comp__egi_select_fault, FCC4__ISAS_comp__elevators_sig_tol, FCC4__ISAS_comp__ailerons_sig_tol, FCC4__ISAS_comp__rudders_sig_tol, FCC4__ISAS_comp__flaps_sig_tol, FCC4__ISAS_comp__aoa_sig_tol, FCC4__ISAS_comp__air_data_sig_tol, FCC4__ISAS_comp__spoilers_sig_tol, FCC4__ISAS_comp__stabilizer_sig_tol, FCC4__ISAS_comp__elevators_select, FCC4__ISAS_comp__ailerons_select, FCC4__ISAS_comp__rudders_select, FCC4__ISAS_comp__flaps_select, FCC4__ISAS_comp__aoa_select, FCC4__ISAS_comp__air_data_select, FCC4__ISAS_comp__egi_select, FCC4__ISAS_comp__spoilers_select, FCC4__ISAS_comp__stabilizers_select, FCC4__ISAS_comp__elevators_faults, FCC4__ISAS_comp__ailerons_faults, FCC4__ISAS_comp__rudders_faults, FCC4__ISAS_comp__flaps_faults, FCC4__ISAS_comp__aoa_faults, FCC4__ISAS_comp__air_data_faults, FCC4__ISAS_comp__egi_faults, FCC4__ISAS_comp__spoilers_faults, FCC4__ISAS_comp__stabilizers_faults, FCC4__ISAS_comp____ASSUME__HIST, FCC4__OSAS_comp__fail_counts, FCC4__OSAS_comp__act_gains, FCC4__OSAS_comp__acts_out, FCC4__OSAS_comp__acts_fail, FCC4__OSAS_comp__sovs1, FCC4__OSAS_comp__sovs2, FCC4__OSAS_comp____ASSUME__HIST, FCC4__CLAW_comp__acts, FCC4__CLAW_comp____ASSUME__HIST, FCC4__claw_acts, FCC4__osas_failure, FCC4__elevators_faults, FCC4__ailerons_faults, FCC4__rudders_faults, FCC4__flaps_faults, FCC4__aoa_faults, FCC4__air_data_faults, FCC4__egi_faults, FCC4__spoilers_faults, FCC4__stabilizers_faults, FCC4__elevators_select, FCC4__ailerons_select, FCC4__rudders_select, FCC4__flaps_select, FCC4__aoa_select, FCC4__air_data_select, FCC4__egi_select, FCC4__spoilers_select, FCC4__stabilizers_select, FCC4__acts_fail, FCC4__acts_out, FCC4__sovs1, FCC4__sovs2);

  assert (FCC4____ASSUME__HIST = __HIST(true));

  assert (elevators = FCC1__elevators);

  assert (ailerons = FCC1__ailerons);

  assert (rudders = FCC1__rudders);

  assert (spoilers = FCC1__spoilers);

  assert (flaps = FCC1__flaps);

  assert (aoa = FCC1__aoa);

  assert (air_data = FCC1__air_data);

  assert (stabilizers = FCC1__stabilizers);

  assert (elevators = FCC2__elevators);

  assert (ailerons = FCC2__ailerons);

  assert (rudders = FCC2__rudders);

  assert (spoilers = FCC2__spoilers);

  assert (flaps = FCC2__flaps);

  assert (aoa = FCC2__aoa);

  assert (air_data = FCC2__air_data);

  assert (stabilizers = FCC2__stabilizers);

  assert (elevators = FCC3__elevators);

  assert (ailerons = FCC3__ailerons);

  assert (rudders = FCC3__rudders);

  assert (spoilers = FCC3__spoilers);

  assert (flaps = FCC3__flaps);

  assert (aoa = FCC3__aoa);

  assert (air_data = FCC3__air_data);

  assert (stabilizers = FCC3__stabilizers);

  assert (elevators = FCC4__elevators);

  assert (ailerons = FCC4__ailerons);

  assert (rudders = FCC4__rudders);

  assert (spoilers = FCC4__spoilers);

  assert (flaps = FCC4__flaps);

  assert (aoa = FCC4__aoa);

  assert (air_data = FCC4__air_data);

  assert (stabilizers = FCC4__stabilizers);

  assert (acts_ret1 = FCC1__acts_ret);

  assert (acts_ret2 = FCC2__acts_ret);

  assert (acts_ret3 = FCC3__acts_ret);

  assert (acts_ret4 = FCC4__acts_ret);

  assert (FCC1__acts_out = acts_out1);

  assert (FCC2__acts_out = acts_out2);

  assert (FCC3__acts_out = acts_out3);

  assert (FCC4__acts_out = acts_out4);

  assert (FCC1__sovs1 = sovs11);

  assert (FCC1__sovs2 = sovs21);

  assert (FCC1__sovs1 = sovs12);

  assert (FCC1__sovs2 = sovs22);

  assert (FCC1__sovs1 = sovs13);

  assert (FCC1__sovs2 = sovs23);

  assert (FCC1__sovs1 = sovs14);

  assert (FCC1__sovs2 = sovs24);

  assert (FCC1__num_valid_acts = num_valids);

  assert (FCC2__num_valid_acts = num_valids);

  assert (FCC3__num_valid_acts = num_valids);

  assert (FCC4__num_valid_acts = num_valids);

  assert FCS_RC1__valids_to_nums(num_valids, FCC1__acts_fail, FCC2__acts_fail, FCC3__acts_fail, FCC4__acts_fail);

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  --%PROPERTY __ASSUME__HIST;
  --%PROPERTY __GUARANTEE0;
  --%PROPERTY __GUARANTEE1;

tel;

node ISAS_S_100_130__failed_update(
  timestamp : int;
  failed : bool
) returns (
  ret : bool
);
let
  ret = (failed = (false -> (timestamp = (pre timestamp))));

tel;

node _CLOCKED_ISAS_S_100_130__failed_update(
  _CLK : bool;
  _INIT : bool;
  timestamp : int;
  failed : bool
) returns (
  ret : bool
);
var
  _STATE0 : int;
let
  ret = (if _CLK then (failed = (if _INIT then false else (timestamp = _STATE0))) else (pre ret));

  _STATE0 = (if _CLK then (pre timestamp) else (pre _STATE0));

tel;

node ISAS_S_100_130__single_req(
  elevators : DATA_TYPES__Elevators__treal;
  ailerons : DATA_TYPES__Ailerons__treal;
  rudders : DATA_TYPES__Rudders__treal;
  flaps : DATA_TYPES__Flaps__treal;
  aoa : DATA_TYPES__AoA__treal;
  air_data : DATA_TYPES__AirData__treal;
  spoilers : DATA_TYPES__Spoilers__treal;
  stabilizer : DATA_TYPES__Stabilizer__treal;
  elevators_failed_update : bool;
  ailerons_failed_update : bool;
  rudders_failed_update : bool;
  flaps_failed_update : bool;
  aoa_failed_update : bool;
  air_data_failed_update : bool;
  spoilers_failed_update : bool;
  stabilizer_failed_update : bool
) returns (
  ret : bool
);
let
  ret = (((((((ISAS_S_100_130__failed_update(elevators.TIME_STAMP, elevators_failed_update) and ISAS_S_100_130__failed_update(ailerons.TIME_STAMP, ailerons_failed_update)) and ISAS_S_100_130__failed_update(rudders.TIME_STAMP, rudders_failed_update)) and ISAS_S_100_130__failed_update(flaps.TIME_STAMP, elevators_failed_update)) and ISAS_S_100_130__failed_update(aoa.TIME_STAMP, aoa_failed_update)) and ISAS_S_100_130__failed_update(air_data.TIME_STAMP, air_data_failed_update)) and ISAS_S_100_130__failed_update(spoilers.TIME_STAMP, spoilers_failed_update)) and ISAS_S_100_130__failed_update(stabilizer.TIME_STAMP, stabilizer_failed_update));

tel;

node _CLOCKED_ISAS_S_100_130__single_req(
  _CLK : bool;
  _INIT : bool;
  elevators : DATA_TYPES__Elevators__treal;
  ailerons : DATA_TYPES__Ailerons__treal;
  rudders : DATA_TYPES__Rudders__treal;
  flaps : DATA_TYPES__Flaps__treal;
  aoa : DATA_TYPES__AoA__treal;
  air_data : DATA_TYPES__AirData__treal;
  spoilers : DATA_TYPES__Spoilers__treal;
  stabilizer : DATA_TYPES__Stabilizer__treal;
  elevators_failed_update : bool;
  ailerons_failed_update : bool;
  rudders_failed_update : bool;
  flaps_failed_update : bool;
  aoa_failed_update : bool;
  air_data_failed_update : bool;
  spoilers_failed_update : bool;
  stabilizer_failed_update : bool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((_CLOCKED_ISAS_S_100_130__failed_update(_CLK, _INIT, elevators.TIME_STAMP, elevators_failed_update) and _CLOCKED_ISAS_S_100_130__failed_update(_CLK, _INIT, ailerons.TIME_STAMP, ailerons_failed_update)) and _CLOCKED_ISAS_S_100_130__failed_update(_CLK, _INIT, rudders.TIME_STAMP, rudders_failed_update)) and _CLOCKED_ISAS_S_100_130__failed_update(_CLK, _INIT, flaps.TIME_STAMP, elevators_failed_update)) and _CLOCKED_ISAS_S_100_130__failed_update(_CLK, _INIT, aoa.TIME_STAMP, aoa_failed_update)) and _CLOCKED_ISAS_S_100_130__failed_update(_CLK, _INIT, air_data.TIME_STAMP, air_data_failed_update)) and _CLOCKED_ISAS_S_100_130__failed_update(_CLK, _INIT, spoilers.TIME_STAMP, spoilers_failed_update)) and _CLOCKED_ISAS_S_100_130__failed_update(_CLK, _INIT, stabilizer.TIME_STAMP, stabilizer_failed_update)) else (pre ret));

tel;

node ISAS_S_100_130__req(
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizer : DATA_TYPES__QUAD_Stabilizer__treal;
  elevators_failed_update : DATA_TYPES__quad_bool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  stabilizer_failed_update : DATA_TYPES__quad_bool
) returns (
  ret : bool
);
let
  ret = (((ISAS_S_100_130__single_req(elevators.EL1, ailerons.AIL1, rudders.RUDD1, flaps.FLAPS1, aoa.AOA1, air_data.AD1, spoilers.SPOIL1, stabilizer.STAB1, elevators_failed_update.val1, ailerons_failed_update.val1, rudders_failed_update.val1, flaps_failed_update.val1, aoa_failed_update.val1, air_data_failed_update.val1, spoilers_failed_update.val1, stabilizer_failed_update.val1) and ISAS_S_100_130__single_req(elevators.EL2, ailerons.AIL2, rudders.RUDD2, flaps.FLAPS2, aoa.AOA2, air_data.AD2, spoilers.SPOIL2, stabilizer.STAB2, elevators_failed_update.val2, ailerons_failed_update.val2, rudders_failed_update.val2, flaps_failed_update.val2, aoa_failed_update.val2, air_data_failed_update.val2, spoilers_failed_update.val2, stabilizer_failed_update.val2)) and ISAS_S_100_130__single_req(elevators.EL3, ailerons.AIL3, rudders.RUDD3, flaps.FLAPS3, aoa.AOA2, air_data.AD2, spoilers.SPOIL3, stabilizer.STAB3, elevators_failed_update.val3, ailerons_failed_update.val3, rudders_failed_update.val3, flaps_failed_update.val3, aoa_failed_update.val2, air_data_failed_update.val2, spoilers_failed_update.val3, stabilizer_failed_update.val3)) and ISAS_S_100_130__single_req(elevators.EL4, ailerons.AIL4, rudders.RUDD4, flaps.FLAPS4, aoa.AOA2, air_data.AD2, spoilers.SPOIL4, stabilizer.STAB4, elevators_failed_update.val4, ailerons_failed_update.val4, rudders_failed_update.val4, flaps_failed_update.val4, aoa_failed_update.val2, air_data_failed_update.val2, spoilers_failed_update.val4, stabilizer_failed_update.val4));

tel;

node _CLOCKED_ISAS_S_100_130__req(
  _CLK : bool;
  _INIT : bool;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizer : DATA_TYPES__QUAD_Stabilizer__treal;
  elevators_failed_update : DATA_TYPES__quad_bool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  stabilizer_failed_update : DATA_TYPES__quad_bool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((_CLOCKED_ISAS_S_100_130__single_req(_CLK, _INIT, elevators.EL1, ailerons.AIL1, rudders.RUDD1, flaps.FLAPS1, aoa.AOA1, air_data.AD1, spoilers.SPOIL1, stabilizer.STAB1, elevators_failed_update.val1, ailerons_failed_update.val1, rudders_failed_update.val1, flaps_failed_update.val1, aoa_failed_update.val1, air_data_failed_update.val1, spoilers_failed_update.val1, stabilizer_failed_update.val1) and _CLOCKED_ISAS_S_100_130__single_req(_CLK, _INIT, elevators.EL2, ailerons.AIL2, rudders.RUDD2, flaps.FLAPS2, aoa.AOA2, air_data.AD2, spoilers.SPOIL2, stabilizer.STAB2, elevators_failed_update.val2, ailerons_failed_update.val2, rudders_failed_update.val2, flaps_failed_update.val2, aoa_failed_update.val2, air_data_failed_update.val2, spoilers_failed_update.val2, stabilizer_failed_update.val2)) and _CLOCKED_ISAS_S_100_130__single_req(_CLK, _INIT, elevators.EL3, ailerons.AIL3, rudders.RUDD3, flaps.FLAPS3, aoa.AOA2, air_data.AD2, spoilers.SPOIL3, stabilizer.STAB3, elevators_failed_update.val3, ailerons_failed_update.val3, rudders_failed_update.val3, flaps_failed_update.val3, aoa_failed_update.val2, air_data_failed_update.val2, spoilers_failed_update.val3, stabilizer_failed_update.val3)) and _CLOCKED_ISAS_S_100_130__single_req(_CLK, _INIT, elevators.EL4, ailerons.AIL4, rudders.RUDD4, flaps.FLAPS4, aoa.AOA2, air_data.AD2, spoilers.SPOIL4, stabilizer.STAB4, elevators_failed_update.val4, ailerons_failed_update.val4, rudders_failed_update.val4, flaps_failed_update.val4, aoa_failed_update.val2, air_data_failed_update.val2, spoilers_failed_update.val4, stabilizer_failed_update.val4)) else (pre ret));

tel;

node ISAS_S_110__els_in_range(
  elevators : DATA_TYPES__Elevators__treal;
  elevators_in_range : DATA_TYPES__Elevators__tbool
) returns (
  ret : bool
);
let
  ret = ((((elevators_in_range.ELLIB = ((0.0 <= elevators.ELLIB) and (50.0 >= elevators.ELLIB))) and (elevators_in_range.ELLOB = ((0.0 <= elevators.ELLOB) and (50.0 >= elevators.ELLOB)))) and (elevators_in_range.ELROB = ((0.0 <= elevators.ELROB) and (50.0 >= elevators.ELROB)))) and (elevators_in_range.ELRIB = ((0.0 <= elevators.ELRIB) and (50.0 >= elevators.ELRIB))));

tel;

node _CLOCKED_ISAS_S_110__els_in_range(
  _CLK : bool;
  _INIT : bool;
  elevators : DATA_TYPES__Elevators__treal;
  elevators_in_range : DATA_TYPES__Elevators__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((elevators_in_range.ELLIB = ((0.0 <= elevators.ELLIB) and (50.0 >= elevators.ELLIB))) and (elevators_in_range.ELLOB = ((0.0 <= elevators.ELLOB) and (50.0 >= elevators.ELLOB)))) and (elevators_in_range.ELROB = ((0.0 <= elevators.ELROB) and (50.0 >= elevators.ELROB)))) and (elevators_in_range.ELRIB = ((0.0 <= elevators.ELRIB) and (50.0 >= elevators.ELRIB)))) else (pre ret));

tel;

node ISAS_S_110__rud_in_range(
  rudders : DATA_TYPES__Rudders__treal;
  rudders_in_range : DATA_TYPES__Rudders__tbool
) returns (
  ret : bool
);
let
  ret = ((rudders_in_range.RUDU = ((0.0 <= rudders.RUDU) and (50.0 >= rudders.RUDU))) and (rudders_in_range.RUDL = ((0.0 <= rudders.RUDL) and (50.0 >= rudders.RUDL))));

tel;

node _CLOCKED_ISAS_S_110__rud_in_range(
  _CLK : bool;
  _INIT : bool;
  rudders : DATA_TYPES__Rudders__treal;
  rudders_in_range : DATA_TYPES__Rudders__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((rudders_in_range.RUDU = ((0.0 <= rudders.RUDU) and (50.0 >= rudders.RUDU))) and (rudders_in_range.RUDL = ((0.0 <= rudders.RUDL) and (50.0 >= rudders.RUDL)))) else (pre ret));

tel;

node ISAS_S_110__ails_in_range(
  ailerons : DATA_TYPES__Ailerons__treal;
  ailerons_in_range : DATA_TYPES__Ailerons__tbool
) returns (
  ret : bool
);
let
  ret = ((ailerons_in_range.AILL = ((0.0 <= ailerons.AILL) and (50.0 >= ailerons.AILL))) and (ailerons_in_range.AILR = ((0.0 <= ailerons.AILR) and (50.0 >= ailerons.AILR))));

tel;

node _CLOCKED_ISAS_S_110__ails_in_range(
  _CLK : bool;
  _INIT : bool;
  ailerons : DATA_TYPES__Ailerons__treal;
  ailerons_in_range : DATA_TYPES__Ailerons__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((ailerons_in_range.AILL = ((0.0 <= ailerons.AILL) and (50.0 >= ailerons.AILL))) and (ailerons_in_range.AILR = ((0.0 <= ailerons.AILR) and (50.0 >= ailerons.AILR)))) else (pre ret));

tel;

node ISAS_S_110__fl_in_range(
  flaps : DATA_TYPES__Flaps__treal;
  flaps_in_range : DATA_TYPES__Flaps__tbool
) returns (
  ret : bool
);
let
  ret = ((((flaps_in_range.FLLIB = ((0.0 <= flaps.FLLIB) and (50.0 >= flaps.FLLIB))) and (flaps_in_range.FLLOB = ((0.0 <= flaps.FLLOB) and (50.0 >= flaps.FLLOB)))) and (flaps_in_range.FLROB = ((0.0 <= flaps.FLROB) and (50.0 >= flaps.FLROB)))) and (flaps_in_range.FLRIB = ((0.0 <= flaps.FLRIB) and (50.0 >= flaps.FLRIB))));

tel;

node _CLOCKED_ISAS_S_110__fl_in_range(
  _CLK : bool;
  _INIT : bool;
  flaps : DATA_TYPES__Flaps__treal;
  flaps_in_range : DATA_TYPES__Flaps__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((flaps_in_range.FLLIB = ((0.0 <= flaps.FLLIB) and (50.0 >= flaps.FLLIB))) and (flaps_in_range.FLLOB = ((0.0 <= flaps.FLLOB) and (50.0 >= flaps.FLLOB)))) and (flaps_in_range.FLROB = ((0.0 <= flaps.FLROB) and (50.0 >= flaps.FLROB)))) and (flaps_in_range.FLRIB = ((0.0 <= flaps.FLRIB) and (50.0 >= flaps.FLRIB)))) else (pre ret));

tel;

node ISAS_S_110__aoa_range(
  aoa : DATA_TYPES__AoA__treal;
  aoa_in_range : DATA_TYPES__AoA__tbool
) returns (
  ret : bool
);
let
  ret = (aoa_in_range.AOA = ((0.0 <= aoa.AOA) and (50.0 >= aoa.AOA)));

tel;

node _CLOCKED_ISAS_S_110__aoa_range(
  _CLK : bool;
  _INIT : bool;
  aoa : DATA_TYPES__AoA__treal;
  aoa_in_range : DATA_TYPES__AoA__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (aoa_in_range.AOA = ((0.0 <= aoa.AOA) and (50.0 >= aoa.AOA))) else (pre ret));

tel;

node ISAS_S_110__ad_in_range(
  air_data : DATA_TYPES__AirData__treal;
  air_data_in_range : DATA_TYPES__AirData__tbool
) returns (
  ret : bool
);
let
  ret = ((((air_data_in_range.TAT = ((0.0 <= air_data.TAT) and (50.0 >= air_data.TAT))) and (air_data_in_range.TotPres = ((0.0 <= air_data.TotPres) and (50.0 >= air_data.TotPres)))) and (air_data_in_range.Pres = ((0.0 <= air_data.Pres) and (50.0 >= air_data.Pres)))) and (air_data_in_range.Temp = ((0.0 <= air_data.Temp) and (50.0 >= air_data.Temp))));

tel;

node _CLOCKED_ISAS_S_110__ad_in_range(
  _CLK : bool;
  _INIT : bool;
  air_data : DATA_TYPES__AirData__treal;
  air_data_in_range : DATA_TYPES__AirData__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((air_data_in_range.TAT = ((0.0 <= air_data.TAT) and (50.0 >= air_data.TAT))) and (air_data_in_range.TotPres = ((0.0 <= air_data.TotPres) and (50.0 >= air_data.TotPres)))) and (air_data_in_range.Pres = ((0.0 <= air_data.Pres) and (50.0 >= air_data.Pres)))) and (air_data_in_range.Temp = ((0.0 <= air_data.Temp) and (50.0 >= air_data.Temp)))) else (pre ret));

tel;

node ISAS_S_110__spoils_in_range(
  spoilers : DATA_TYPES__Spoilers__treal;
  spoilers_in_range : DATA_TYPES__Spoilers__tbool
) returns (
  ret : bool
);
let
  ret = ((((spoilers_in_range.SPLIB = ((0.0 <= spoilers.SPLIB) and (50.0 >= spoilers.SPLIB))) and (spoilers_in_range.SPLOB = ((0.0 <= spoilers.SPLOB) and (50.0 >= spoilers.SPLOB)))) and (spoilers_in_range.SPROB = ((0.0 <= spoilers.SPROB) and (50.0 >= spoilers.SPROB)))) and (spoilers_in_range.SPRIB = ((0.0 <= spoilers.SPRIB) and (50.0 >= spoilers.SPRIB))));

tel;

node _CLOCKED_ISAS_S_110__spoils_in_range(
  _CLK : bool;
  _INIT : bool;
  spoilers : DATA_TYPES__Spoilers__treal;
  spoilers_in_range : DATA_TYPES__Spoilers__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((spoilers_in_range.SPLIB = ((0.0 <= spoilers.SPLIB) and (50.0 >= spoilers.SPLIB))) and (spoilers_in_range.SPLOB = ((0.0 <= spoilers.SPLOB) and (50.0 >= spoilers.SPLOB)))) and (spoilers_in_range.SPROB = ((0.0 <= spoilers.SPROB) and (50.0 >= spoilers.SPROB)))) and (spoilers_in_range.SPRIB = ((0.0 <= spoilers.SPRIB) and (50.0 >= spoilers.SPRIB)))) else (pre ret));

tel;

node ISAS_S_110__stab_in_range(
  stabilizer : DATA_TYPES__Stabilizer__treal;
  stabilizer_in_range : bool
) returns (
  ret : bool
);
let
  ret = (stabilizer_in_range = ((0.0 <= stabilizer.VAL) and (50.0 >= stabilizer.VAL)));

tel;

node _CLOCKED_ISAS_S_110__stab_in_range(
  _CLK : bool;
  _INIT : bool;
  stabilizer : DATA_TYPES__Stabilizer__treal;
  stabilizer_in_range : bool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (stabilizer_in_range = ((0.0 <= stabilizer.VAL) and (50.0 >= stabilizer.VAL))) else (pre ret));

tel;

node ISAS_S_110__req(
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizer : DATA_TYPES__QUAD_Stabilizer__treal;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  ret : bool
);
let
  ret = (((((((((((((((((((((((((((ISAS_S_110__els_in_range(elevators.EL1, elevators_in_range.EL1) and ISAS_S_110__els_in_range(elevators.EL2, elevators_in_range.EL2)) and ISAS_S_110__els_in_range(elevators.EL3, elevators_in_range.EL3)) and ISAS_S_110__els_in_range(elevators.EL4, elevators_in_range.EL4)) and ISAS_S_110__rud_in_range(rudders.RUDD1, rudders_in_range.RUDD1)) and ISAS_S_110__rud_in_range(rudders.RUDD2, rudders_in_range.RUDD2)) and ISAS_S_110__rud_in_range(rudders.RUDD3, rudders_in_range.RUDD3)) and ISAS_S_110__rud_in_range(rudders.RUDD4, rudders_in_range.RUDD4)) and ISAS_S_110__ails_in_range(ailerons.AIL1, ailerons_in_range.AIL1)) and ISAS_S_110__ails_in_range(ailerons.AIL2, ailerons_in_range.AIL2)) and ISAS_S_110__ails_in_range(ailerons.AIL3, ailerons_in_range.AIL3)) and ISAS_S_110__ails_in_range(ailerons.AIL4, ailerons_in_range.AIL4)) and ISAS_S_110__fl_in_range(flaps.FLAPS1, flaps_in_range.FLAPS1)) and ISAS_S_110__fl_in_range(flaps.FLAPS2, flaps_in_range.FLAPS2)) and ISAS_S_110__fl_in_range(flaps.FLAPS3, flaps_in_range.FLAPS3)) and ISAS_S_110__fl_in_range(flaps.FLAPS4, flaps_in_range.FLAPS4)) and ISAS_S_110__aoa_range(aoa.AOA1, aoa_in_range.AOA1)) and ISAS_S_110__aoa_range(aoa.AOA2, aoa_in_range.AOA2)) and ISAS_S_110__ad_in_range(air_data.AD1, air_data_in_range.AD1)) and ISAS_S_110__ad_in_range(air_data.AD2, air_data_in_range.AD2)) and ISAS_S_110__spoils_in_range(spoilers.SPOIL1, spoilers_in_range.SPOIL1)) and ISAS_S_110__spoils_in_range(spoilers.SPOIL2, spoilers_in_range.SPOIL2)) and ISAS_S_110__spoils_in_range(spoilers.SPOIL3, spoilers_in_range.SPOIL3)) and ISAS_S_110__spoils_in_range(spoilers.SPOIL4, spoilers_in_range.SPOIL4)) and ISAS_S_110__stab_in_range(stabilizer.STAB1, stabilizer_in_range.STAB1)) and ISAS_S_110__stab_in_range(stabilizer.STAB2, stabilizer_in_range.STAB2)) and ISAS_S_110__stab_in_range(stabilizer.STAB3, stabilizer_in_range.STAB3)) and ISAS_S_110__stab_in_range(stabilizer.STAB4, stabilizer_in_range.STAB4));

tel;

node _CLOCKED_ISAS_S_110__req(
  _CLK : bool;
  _INIT : bool;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizer : DATA_TYPES__QUAD_Stabilizer__treal;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_in_range : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((((((((((((((((((((((_CLOCKED_ISAS_S_110__els_in_range(_CLK, _INIT, elevators.EL1, elevators_in_range.EL1) and _CLOCKED_ISAS_S_110__els_in_range(_CLK, _INIT, elevators.EL2, elevators_in_range.EL2)) and _CLOCKED_ISAS_S_110__els_in_range(_CLK, _INIT, elevators.EL3, elevators_in_range.EL3)) and _CLOCKED_ISAS_S_110__els_in_range(_CLK, _INIT, elevators.EL4, elevators_in_range.EL4)) and _CLOCKED_ISAS_S_110__rud_in_range(_CLK, _INIT, rudders.RUDD1, rudders_in_range.RUDD1)) and _CLOCKED_ISAS_S_110__rud_in_range(_CLK, _INIT, rudders.RUDD2, rudders_in_range.RUDD2)) and _CLOCKED_ISAS_S_110__rud_in_range(_CLK, _INIT, rudders.RUDD3, rudders_in_range.RUDD3)) and _CLOCKED_ISAS_S_110__rud_in_range(_CLK, _INIT, rudders.RUDD4, rudders_in_range.RUDD4)) and _CLOCKED_ISAS_S_110__ails_in_range(_CLK, _INIT, ailerons.AIL1, ailerons_in_range.AIL1)) and _CLOCKED_ISAS_S_110__ails_in_range(_CLK, _INIT, ailerons.AIL2, ailerons_in_range.AIL2)) and _CLOCKED_ISAS_S_110__ails_in_range(_CLK, _INIT, ailerons.AIL3, ailerons_in_range.AIL3)) and _CLOCKED_ISAS_S_110__ails_in_range(_CLK, _INIT, ailerons.AIL4, ailerons_in_range.AIL4)) and _CLOCKED_ISAS_S_110__fl_in_range(_CLK, _INIT, flaps.FLAPS1, flaps_in_range.FLAPS1)) and _CLOCKED_ISAS_S_110__fl_in_range(_CLK, _INIT, flaps.FLAPS2, flaps_in_range.FLAPS2)) and _CLOCKED_ISAS_S_110__fl_in_range(_CLK, _INIT, flaps.FLAPS3, flaps_in_range.FLAPS3)) and _CLOCKED_ISAS_S_110__fl_in_range(_CLK, _INIT, flaps.FLAPS4, flaps_in_range.FLAPS4)) and _CLOCKED_ISAS_S_110__aoa_range(_CLK, _INIT, aoa.AOA1, aoa_in_range.AOA1)) and _CLOCKED_ISAS_S_110__aoa_range(_CLK, _INIT, aoa.AOA2, aoa_in_range.AOA2)) and _CLOCKED_ISAS_S_110__ad_in_range(_CLK, _INIT, air_data.AD1, air_data_in_range.AD1)) and _CLOCKED_ISAS_S_110__ad_in_range(_CLK, _INIT, air_data.AD2, air_data_in_range.AD2)) and _CLOCKED_ISAS_S_110__spoils_in_range(_CLK, _INIT, spoilers.SPOIL1, spoilers_in_range.SPOIL1)) and _CLOCKED_ISAS_S_110__spoils_in_range(_CLK, _INIT, spoilers.SPOIL2, spoilers_in_range.SPOIL2)) and _CLOCKED_ISAS_S_110__spoils_in_range(_CLK, _INIT, spoilers.SPOIL3, spoilers_in_range.SPOIL3)) and _CLOCKED_ISAS_S_110__spoils_in_range(_CLK, _INIT, spoilers.SPOIL4, spoilers_in_range.SPOIL4)) and _CLOCKED_ISAS_S_110__stab_in_range(_CLK, _INIT, stabilizer.STAB1, stabilizer_in_range.STAB1)) and _CLOCKED_ISAS_S_110__stab_in_range(_CLK, _INIT, stabilizer.STAB2, stabilizer_in_range.STAB2)) and _CLOCKED_ISAS_S_110__stab_in_range(_CLK, _INIT, stabilizer.STAB3, stabilizer_in_range.STAB3)) and _CLOCKED_ISAS_S_110__stab_in_range(_CLK, _INIT, stabilizer.STAB4, stabilizer_in_range.STAB4)) else (pre ret));

tel;

node ISAS_S_140__matches_tolerance_real(
  val1 : real;
  val2 : real;
  tol : real
) returns (
  return : bool
);
let
  return = (if (val1 <= val2) then (val2 <= (val1 + tol)) else (val1 <= (val2 + tol)));

tel;

node _CLOCKED_ISAS_S_140__matches_tolerance_real(
  _CLK : bool;
  _INIT : bool;
  val1 : real;
  val2 : real;
  tol : real
) returns (
  return : bool
);
let
  return = (if _CLK then (if (val1 <= val2) then (val2 <= (val1 + tol)) else (val1 <= (val2 + tol))) else (pre return));

tel;

node ISAS_S_140__req(
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = ((((((((not aoa_failed_update.val1) and aoa_in_range.AOA1.AOA) and ((not aoa_failed_update.val2) and aoa_in_range.AOA2.AOA)) => ((aoa_within_tol.AOA1.AOA = ISAS_S_140__matches_tolerance_real(aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0))) and (aoa_within_tol.AOA2.AOA = ISAS_S_140__matches_tolerance_real(aoa.AOA2.AOA, aoa.AOA1.AOA, (0.1 * 50.0))))) and ((((not air_failed_update.val1) and air_data_in_range.AD1.TAT) and ((not air_failed_update.val2) and air_data_in_range.AD2.TAT)) => ((air_data_within_tol.AD1.TAT = ISAS_S_140__matches_tolerance_real(air_data.AD1.TAT, air_data.AD2.TAT, (0.1 * 50.0))) and (air_data_within_tol.AD2.TAT = ISAS_S_140__matches_tolerance_real(air_data.AD2.TAT, air_data.AD1.TAT, (0.1 * 50.0)))))) and ((((not air_failed_update.val1) and air_data_in_range.AD1.TotPres) and ((not air_failed_update.val2) and air_data_in_range.AD2.TotPres)) => ((air_data_within_tol.AD1.TotPres = ISAS_S_140__matches_tolerance_real(air_data.AD1.TotPres, air_data.AD2.TotPres, (0.1 * 50.0))) and (air_data_within_tol.AD2.TotPres = ISAS_S_140__matches_tolerance_real(air_data.AD2.TotPres, air_data.AD1.TotPres, (0.1 * 50.0)))))) and ((((not air_failed_update.val1) and air_data_in_range.AD1.Pres) and ((not air_failed_update.val2) and air_data_in_range.AD2.Pres)) => ((air_data_within_tol.AD1.Pres = ISAS_S_140__matches_tolerance_real(air_data.AD1.Pres, air_data.AD2.Pres, (0.1 * 50.0))) and (air_data_within_tol.AD2.Pres = ISAS_S_140__matches_tolerance_real(air_data.AD2.Pres, air_data.AD1.Pres, (0.1 * 50.0)))))) and ((((not air_failed_update.val1) and air_data_in_range.AD1.Temp) and ((not air_failed_update.val2) and air_data_in_range.AD2.Temp)) => ((air_data_within_tol.AD1.Temp = ISAS_S_140__matches_tolerance_real(air_data.AD1.Temp, air_data.AD2.Temp, (0.1 * 50.0))) and (air_data_within_tol.AD2.Temp = ISAS_S_140__matches_tolerance_real(air_data.AD2.Temp, air_data.AD1.Temp, (0.1 * 50.0))))));

tel;

node _CLOCKED_ISAS_S_140__req(
  _CLK : bool;
  _INIT : bool;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((((((not aoa_failed_update.val1) and aoa_in_range.AOA1.AOA) and ((not aoa_failed_update.val2) and aoa_in_range.AOA2.AOA)) => ((aoa_within_tol.AOA1.AOA = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0))) and (aoa_within_tol.AOA2.AOA = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, aoa.AOA2.AOA, aoa.AOA1.AOA, (0.1 * 50.0))))) and ((((not air_failed_update.val1) and air_data_in_range.AD1.TAT) and ((not air_failed_update.val2) and air_data_in_range.AD2.TAT)) => ((air_data_within_tol.AD1.TAT = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, air_data.AD1.TAT, air_data.AD2.TAT, (0.1 * 50.0))) and (air_data_within_tol.AD2.TAT = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, air_data.AD2.TAT, air_data.AD1.TAT, (0.1 * 50.0)))))) and ((((not air_failed_update.val1) and air_data_in_range.AD1.TotPres) and ((not air_failed_update.val2) and air_data_in_range.AD2.TotPres)) => ((air_data_within_tol.AD1.TotPres = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, air_data.AD1.TotPres, air_data.AD2.TotPres, (0.1 * 50.0))) and (air_data_within_tol.AD2.TotPres = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, air_data.AD2.TotPres, air_data.AD1.TotPres, (0.1 * 50.0)))))) and ((((not air_failed_update.val1) and air_data_in_range.AD1.Pres) and ((not air_failed_update.val2) and air_data_in_range.AD2.Pres)) => ((air_data_within_tol.AD1.Pres = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, air_data.AD1.Pres, air_data.AD2.Pres, (0.1 * 50.0))) and (air_data_within_tol.AD2.Pres = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, air_data.AD2.Pres, air_data.AD1.Pres, (0.1 * 50.0)))))) and ((((not air_failed_update.val1) and air_data_in_range.AD1.Temp) and ((not air_failed_update.val2) and air_data_in_range.AD2.Temp)) => ((air_data_within_tol.AD1.Temp = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, air_data.AD1.Temp, air_data.AD2.Temp, (0.1 * 50.0))) and (air_data_within_tol.AD2.Temp = _CLOCKED_ISAS_S_140__matches_tolerance_real(_CLK, _INIT, air_data.AD2.Temp, air_data.AD1.Temp, (0.1 * 50.0)))))) else (pre ret));

tel;

node ISAS_S_140_150__matches_tol_real(
  val1 : real;
  val2 : real;
  tol : real
) returns (
  return : bool
);
let
  return = (if (val1 <= val2) then (val2 <= (val1 + tol)) else (val1 <= (val2 + tol)));

tel;

node _CLOCKED_ISAS_S_140_150__matches_tol_real(
  _CLK : bool;
  _INIT : bool;
  val1 : real;
  val2 : real;
  tol : real
) returns (
  return : bool
);
let
  return = (if _CLK then (if (val1 <= val2) then (val2 <= (val1 + tol)) else (val1 <= (val2 + tol))) else (pre return));

tel;

node ISAS_S_140_150__quad_matches_real(
  target : real;
  val1 : real;
  val2 : real;
  val3 : real;
  tol : real
) returns (
  result : bool
);
let
  result = ((ISAS_S_140_150__matches_tol_real(target, val1, tol) or ISAS_S_140_150__matches_tol_real(target, val2, tol)) or ISAS_S_140_150__matches_tol_real(target, val3, tol));

tel;

node _CLOCKED_ISAS_S_140_150__quad_matches_real(
  _CLK : bool;
  _INIT : bool;
  target : real;
  val1 : real;
  val2 : real;
  val3 : real;
  tol : real
) returns (
  result : bool
);
let
  result = (if _CLK then ((_CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, target, val1, tol) or _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, target, val2, tol)) or _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, target, val3, tol)) else (pre result));

tel;

node ISAS_S_140_150__stabilizer_matches(
  e1 : DATA_TYPES__Stabilizer__treal;
  e2 : DATA_TYPES__Stabilizer__treal;
  e3 : DATA_TYPES__Stabilizer__treal;
  e4 : DATA_TYPES__Stabilizer__treal;
  e_tol : bool
) returns (
  ret : bool
);
let
  ret = (e_tol = ISAS_S_140_150__quad_matches_real(e1.VAL, e2.VAL, e3.VAL, e4.VAL, (0.1 * 50.0)));

tel;

node _CLOCKED_ISAS_S_140_150__stabilizer_matches(
  _CLK : bool;
  _INIT : bool;
  e1 : DATA_TYPES__Stabilizer__treal;
  e2 : DATA_TYPES__Stabilizer__treal;
  e3 : DATA_TYPES__Stabilizer__treal;
  e4 : DATA_TYPES__Stabilizer__treal;
  e_tol : bool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (e_tol = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.VAL, e2.VAL, e3.VAL, e4.VAL, (0.1 * 50.0))) else (pre ret));

tel;

node ISAS_S_140_150__stabilizer_quad_matches(
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  stabilizers_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  ret : bool
);
let
  ret = (((ISAS_S_140_150__stabilizer_matches(stabilizers.STAB1, stabilizers.STAB2, stabilizers.STAB3, stabilizers.STAB4, stabilizers_within_tol.STAB1) and ISAS_S_140_150__stabilizer_matches(stabilizers.STAB2, stabilizers.STAB1, stabilizers.STAB3, stabilizers.STAB4, stabilizers_within_tol.STAB2)) and ISAS_S_140_150__stabilizer_matches(stabilizers.STAB3, stabilizers.STAB2, stabilizers.STAB1, stabilizers.STAB4, stabilizers_within_tol.STAB3)) and ISAS_S_140_150__stabilizer_matches(stabilizers.STAB4, stabilizers.STAB2, stabilizers.STAB3, stabilizers.STAB1, stabilizers_within_tol.STAB4));

tel;

node _CLOCKED_ISAS_S_140_150__stabilizer_quad_matches(
  _CLK : bool;
  _INIT : bool;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  stabilizers_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((_CLOCKED_ISAS_S_140_150__stabilizer_matches(_CLK, _INIT, stabilizers.STAB1, stabilizers.STAB2, stabilizers.STAB3, stabilizers.STAB4, stabilizers_within_tol.STAB1) and _CLOCKED_ISAS_S_140_150__stabilizer_matches(_CLK, _INIT, stabilizers.STAB2, stabilizers.STAB1, stabilizers.STAB3, stabilizers.STAB4, stabilizers_within_tol.STAB2)) and _CLOCKED_ISAS_S_140_150__stabilizer_matches(_CLK, _INIT, stabilizers.STAB3, stabilizers.STAB2, stabilizers.STAB1, stabilizers.STAB4, stabilizers_within_tol.STAB3)) and _CLOCKED_ISAS_S_140_150__stabilizer_matches(_CLK, _INIT, stabilizers.STAB4, stabilizers.STAB2, stabilizers.STAB3, stabilizers.STAB1, stabilizers_within_tol.STAB4)) else (pre ret));

tel;

node ISAS_S_140_150__spoiler_matches(
  e1 : DATA_TYPES__Spoilers__treal;
  e2 : DATA_TYPES__Spoilers__treal;
  e3 : DATA_TYPES__Spoilers__treal;
  e4 : DATA_TYPES__Spoilers__treal;
  e_tol : DATA_TYPES__Spoilers__tbool
) returns (
  ret : bool
);
let
  ret = ((((e_tol.SPLIB = ISAS_S_140_150__quad_matches_real(e1.SPLIB, e2.SPLIB, e3.SPLIB, e4.SPLIB, (0.1 * 50.0))) and (e_tol.SPLOB = ISAS_S_140_150__quad_matches_real(e1.SPLOB, e2.SPLOB, e3.SPLOB, e4.SPLOB, (0.1 * 50.0)))) and (e_tol.SPROB = ISAS_S_140_150__quad_matches_real(e1.SPROB, e2.SPROB, e3.SPROB, e4.SPROB, (0.1 * 50.0)))) and (e_tol.SPRIB = ISAS_S_140_150__quad_matches_real(e1.SPRIB, e2.SPRIB, e3.SPRIB, e4.SPRIB, (0.1 * 50.0))));

tel;

node _CLOCKED_ISAS_S_140_150__spoiler_matches(
  _CLK : bool;
  _INIT : bool;
  e1 : DATA_TYPES__Spoilers__treal;
  e2 : DATA_TYPES__Spoilers__treal;
  e3 : DATA_TYPES__Spoilers__treal;
  e4 : DATA_TYPES__Spoilers__treal;
  e_tol : DATA_TYPES__Spoilers__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((e_tol.SPLIB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.SPLIB, e2.SPLIB, e3.SPLIB, e4.SPLIB, (0.1 * 50.0))) and (e_tol.SPLOB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.SPLOB, e2.SPLOB, e3.SPLOB, e4.SPLOB, (0.1 * 50.0)))) and (e_tol.SPROB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.SPROB, e2.SPROB, e3.SPROB, e4.SPROB, (0.1 * 50.0)))) and (e_tol.SPRIB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.SPRIB, e2.SPRIB, e3.SPRIB, e4.SPRIB, (0.1 * 50.0)))) else (pre ret));

tel;

node ISAS_S_140_150__spoiler_quad_matches(
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool
) returns (
  ret : bool
);
let
  ret = (((ISAS_S_140_150__spoiler_matches(spoilers.SPOIL1, spoilers.SPOIL2, spoilers.SPOIL3, spoilers.SPOIL4, spoilers_within_tol.SPOIL1) and ISAS_S_140_150__spoiler_matches(spoilers.SPOIL2, spoilers.SPOIL1, spoilers.SPOIL3, spoilers.SPOIL4, spoilers_within_tol.SPOIL2)) and ISAS_S_140_150__spoiler_matches(spoilers.SPOIL3, spoilers.SPOIL2, spoilers.SPOIL1, spoilers.SPOIL4, spoilers_within_tol.SPOIL3)) and ISAS_S_140_150__spoiler_matches(spoilers.SPOIL4, spoilers.SPOIL2, spoilers.SPOIL3, spoilers.SPOIL1, spoilers_within_tol.SPOIL4));

tel;

node _CLOCKED_ISAS_S_140_150__spoiler_quad_matches(
  _CLK : bool;
  _INIT : bool;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((_CLOCKED_ISAS_S_140_150__spoiler_matches(_CLK, _INIT, spoilers.SPOIL1, spoilers.SPOIL2, spoilers.SPOIL3, spoilers.SPOIL4, spoilers_within_tol.SPOIL1) and _CLOCKED_ISAS_S_140_150__spoiler_matches(_CLK, _INIT, spoilers.SPOIL2, spoilers.SPOIL1, spoilers.SPOIL3, spoilers.SPOIL4, spoilers_within_tol.SPOIL2)) and _CLOCKED_ISAS_S_140_150__spoiler_matches(_CLK, _INIT, spoilers.SPOIL3, spoilers.SPOIL2, spoilers.SPOIL1, spoilers.SPOIL4, spoilers_within_tol.SPOIL3)) and _CLOCKED_ISAS_S_140_150__spoiler_matches(_CLK, _INIT, spoilers.SPOIL4, spoilers.SPOIL2, spoilers.SPOIL3, spoilers.SPOIL1, spoilers_within_tol.SPOIL4)) else (pre ret));

tel;

node ISAS_S_140_150__air_data_dual_matches(
  air_data : DATA_TYPES__DUAL_AirData__treal;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = ((((((((air_data_within_tol.AD1.TAT = ISAS_S_140_150__matches_tol_real(air_data.AD1.TAT, air_data.AD2.TAT, (0.1 * 50.0))) and (air_data_within_tol.AD2.TAT = ISAS_S_140_150__matches_tol_real(air_data.AD1.TAT, air_data.AD2.TAT, (0.1 * 50.0)))) and (air_data_within_tol.AD1.TotPres = ISAS_S_140_150__matches_tol_real(air_data.AD1.TotPres, air_data.AD2.TotPres, (0.1 * 50.0)))) and (air_data_within_tol.AD2.TotPres = ISAS_S_140_150__matches_tol_real(air_data.AD1.TotPres, air_data.AD2.TotPres, (0.1 * 50.0)))) and (air_data_within_tol.AD1.Pres = ISAS_S_140_150__matches_tol_real(air_data.AD1.Pres, air_data.AD2.Pres, (0.1 * 50.0)))) and (air_data_within_tol.AD2.Pres = ISAS_S_140_150__matches_tol_real(air_data.AD1.Pres, air_data.AD2.Pres, (0.1 * 50.0)))) and (air_data_within_tol.AD1.Temp = ISAS_S_140_150__matches_tol_real(air_data.AD1.Temp, air_data.AD2.Temp, (0.1 * 50.0)))) and (air_data_within_tol.AD2.Temp = ISAS_S_140_150__matches_tol_real(air_data.AD1.Temp, air_data.AD2.Temp, (0.1 * 50.0))));

tel;

node _CLOCKED_ISAS_S_140_150__air_data_dual_matches(
  _CLK : bool;
  _INIT : bool;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((((((air_data_within_tol.AD1.TAT = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, air_data.AD1.TAT, air_data.AD2.TAT, (0.1 * 50.0))) and (air_data_within_tol.AD2.TAT = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, air_data.AD1.TAT, air_data.AD2.TAT, (0.1 * 50.0)))) and (air_data_within_tol.AD1.TotPres = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, air_data.AD1.TotPres, air_data.AD2.TotPres, (0.1 * 50.0)))) and (air_data_within_tol.AD2.TotPres = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, air_data.AD1.TotPres, air_data.AD2.TotPres, (0.1 * 50.0)))) and (air_data_within_tol.AD1.Pres = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, air_data.AD1.Pres, air_data.AD2.Pres, (0.1 * 50.0)))) and (air_data_within_tol.AD2.Pres = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, air_data.AD1.Pres, air_data.AD2.Pres, (0.1 * 50.0)))) and (air_data_within_tol.AD1.Temp = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, air_data.AD1.Temp, air_data.AD2.Temp, (0.1 * 50.0)))) and (air_data_within_tol.AD2.Temp = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, air_data.AD1.Temp, air_data.AD2.Temp, (0.1 * 50.0)))) else (pre ret));

tel;

node ISAS_S_140_150__aoa_dual_matches(
  aoa : DATA_TYPES__DUAL_AoA__treal;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool
) returns (
  ret : bool
);
let
  ret = ((aoa_within_tol.AOA1.AOA = ISAS_S_140_150__matches_tol_real(aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0))) and (aoa_within_tol.AOA2.AOA = ISAS_S_140_150__matches_tol_real(aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0))));

tel;

node _CLOCKED_ISAS_S_140_150__aoa_dual_matches(
  _CLK : bool;
  _INIT : bool;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((aoa_within_tol.AOA1.AOA = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0))) and (aoa_within_tol.AOA2.AOA = _CLOCKED_ISAS_S_140_150__matches_tol_real(_CLK, _INIT, aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0)))) else (pre ret));

tel;

node ISAS_S_140_150__flap_matches(
  e1 : DATA_TYPES__Flaps__treal;
  e2 : DATA_TYPES__Flaps__treal;
  e3 : DATA_TYPES__Flaps__treal;
  e4 : DATA_TYPES__Flaps__treal;
  e_tol : DATA_TYPES__Flaps__tbool
) returns (
  ret : bool
);
let
  ret = ((((e_tol.FLLIB = ISAS_S_140_150__quad_matches_real(e1.FLLIB, e2.FLLIB, e3.FLLIB, e4.FLLIB, (0.1 * 50.0))) and (e_tol.FLLOB = ISAS_S_140_150__quad_matches_real(e1.FLLOB, e2.FLLOB, e3.FLLOB, e4.FLLOB, (0.1 * 50.0)))) and (e_tol.FLROB = ISAS_S_140_150__quad_matches_real(e1.FLROB, e2.FLROB, e3.FLROB, e4.FLROB, (0.1 * 50.0)))) and (e_tol.FLRIB = ISAS_S_140_150__quad_matches_real(e1.FLRIB, e2.FLRIB, e3.FLRIB, e4.FLRIB, (0.1 * 50.0))));

tel;

node _CLOCKED_ISAS_S_140_150__flap_matches(
  _CLK : bool;
  _INIT : bool;
  e1 : DATA_TYPES__Flaps__treal;
  e2 : DATA_TYPES__Flaps__treal;
  e3 : DATA_TYPES__Flaps__treal;
  e4 : DATA_TYPES__Flaps__treal;
  e_tol : DATA_TYPES__Flaps__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((e_tol.FLLIB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.FLLIB, e2.FLLIB, e3.FLLIB, e4.FLLIB, (0.1 * 50.0))) and (e_tol.FLLOB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.FLLOB, e2.FLLOB, e3.FLLOB, e4.FLLOB, (0.1 * 50.0)))) and (e_tol.FLROB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.FLROB, e2.FLROB, e3.FLROB, e4.FLROB, (0.1 * 50.0)))) and (e_tol.FLRIB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.FLRIB, e2.FLRIB, e3.FLRIB, e4.FLRIB, (0.1 * 50.0)))) else (pre ret));

tel;

node ISAS_S_140_150__flap_quad_matches(
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool
) returns (
  ret : bool
);
let
  ret = (((ISAS_S_140_150__flap_matches(flaps.FLAPS1, flaps.FLAPS2, flaps.FLAPS3, flaps.FLAPS4, flaps_within_tol.FLAPS1) and ISAS_S_140_150__flap_matches(flaps.FLAPS2, flaps.FLAPS1, flaps.FLAPS3, flaps.FLAPS4, flaps_within_tol.FLAPS2)) and ISAS_S_140_150__flap_matches(flaps.FLAPS3, flaps.FLAPS2, flaps.FLAPS1, flaps.FLAPS4, flaps_within_tol.FLAPS3)) and ISAS_S_140_150__flap_matches(flaps.FLAPS4, flaps.FLAPS2, flaps.FLAPS3, flaps.FLAPS1, flaps_within_tol.FLAPS4));

tel;

node _CLOCKED_ISAS_S_140_150__flap_quad_matches(
  _CLK : bool;
  _INIT : bool;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((_CLOCKED_ISAS_S_140_150__flap_matches(_CLK, _INIT, flaps.FLAPS1, flaps.FLAPS2, flaps.FLAPS3, flaps.FLAPS4, flaps_within_tol.FLAPS1) and _CLOCKED_ISAS_S_140_150__flap_matches(_CLK, _INIT, flaps.FLAPS2, flaps.FLAPS1, flaps.FLAPS3, flaps.FLAPS4, flaps_within_tol.FLAPS2)) and _CLOCKED_ISAS_S_140_150__flap_matches(_CLK, _INIT, flaps.FLAPS3, flaps.FLAPS2, flaps.FLAPS1, flaps.FLAPS4, flaps_within_tol.FLAPS3)) and _CLOCKED_ISAS_S_140_150__flap_matches(_CLK, _INIT, flaps.FLAPS4, flaps.FLAPS2, flaps.FLAPS3, flaps.FLAPS1, flaps_within_tol.FLAPS4)) else (pre ret));

tel;

node ISAS_S_140_150__rudder_matches(
  e1 : DATA_TYPES__Rudders__treal;
  e2 : DATA_TYPES__Rudders__treal;
  e3 : DATA_TYPES__Rudders__treal;
  e4 : DATA_TYPES__Rudders__treal;
  e_tol : DATA_TYPES__Rudders__tbool
) returns (
  ret : bool
);
let
  ret = ((e_tol.RUDL = ISAS_S_140_150__quad_matches_real(e1.RUDL, e2.RUDL, e3.RUDL, e4.RUDL, (0.1 * 50.0))) and (e_tol.RUDU = ISAS_S_140_150__quad_matches_real(e1.RUDU, e2.RUDU, e3.RUDU, e4.RUDU, (0.1 * 50.0))));

tel;

node _CLOCKED_ISAS_S_140_150__rudder_matches(
  _CLK : bool;
  _INIT : bool;
  e1 : DATA_TYPES__Rudders__treal;
  e2 : DATA_TYPES__Rudders__treal;
  e3 : DATA_TYPES__Rudders__treal;
  e4 : DATA_TYPES__Rudders__treal;
  e_tol : DATA_TYPES__Rudders__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((e_tol.RUDL = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.RUDL, e2.RUDL, e3.RUDL, e4.RUDL, (0.1 * 50.0))) and (e_tol.RUDU = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.RUDU, e2.RUDU, e3.RUDU, e4.RUDU, (0.1 * 50.0)))) else (pre ret));

tel;

node ISAS_S_140_150__rudder_quad_matches(
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool
) returns (
  ret : bool
);
let
  ret = (((ISAS_S_140_150__rudder_matches(rudders.RUDD1, rudders.RUDD2, rudders.RUDD3, rudders.RUDD4, rudders_within_tol.RUDD1) and ISAS_S_140_150__rudder_matches(rudders.RUDD2, rudders.RUDD1, rudders.RUDD3, rudders.RUDD4, rudders_within_tol.RUDD2)) and ISAS_S_140_150__rudder_matches(rudders.RUDD3, rudders.RUDD2, rudders.RUDD1, rudders.RUDD4, rudders_within_tol.RUDD3)) and ISAS_S_140_150__rudder_matches(rudders.RUDD4, rudders.RUDD2, rudders.RUDD3, rudders.RUDD1, rudders_within_tol.RUDD4));

tel;

node _CLOCKED_ISAS_S_140_150__rudder_quad_matches(
  _CLK : bool;
  _INIT : bool;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((_CLOCKED_ISAS_S_140_150__rudder_matches(_CLK, _INIT, rudders.RUDD1, rudders.RUDD2, rudders.RUDD3, rudders.RUDD4, rudders_within_tol.RUDD1) and _CLOCKED_ISAS_S_140_150__rudder_matches(_CLK, _INIT, rudders.RUDD2, rudders.RUDD1, rudders.RUDD3, rudders.RUDD4, rudders_within_tol.RUDD2)) and _CLOCKED_ISAS_S_140_150__rudder_matches(_CLK, _INIT, rudders.RUDD3, rudders.RUDD2, rudders.RUDD1, rudders.RUDD4, rudders_within_tol.RUDD3)) and _CLOCKED_ISAS_S_140_150__rudder_matches(_CLK, _INIT, rudders.RUDD4, rudders.RUDD2, rudders.RUDD3, rudders.RUDD1, rudders_within_tol.RUDD4)) else (pre ret));

tel;

node ISAS_S_140_150__aileron_matches(
  e1 : DATA_TYPES__Ailerons__treal;
  e2 : DATA_TYPES__Ailerons__treal;
  e3 : DATA_TYPES__Ailerons__treal;
  e4 : DATA_TYPES__Ailerons__treal;
  e_tol : DATA_TYPES__Ailerons__tbool
) returns (
  ret : bool
);
let
  ret = ((e_tol.AILL = ISAS_S_140_150__quad_matches_real(e1.AILL, e2.AILL, e3.AILL, e4.AILL, (0.1 * 50.0))) and (e_tol.AILR = ISAS_S_140_150__quad_matches_real(e1.AILR, e2.AILR, e3.AILR, e4.AILR, (0.1 * 50.0))));

tel;

node _CLOCKED_ISAS_S_140_150__aileron_matches(
  _CLK : bool;
  _INIT : bool;
  e1 : DATA_TYPES__Ailerons__treal;
  e2 : DATA_TYPES__Ailerons__treal;
  e3 : DATA_TYPES__Ailerons__treal;
  e4 : DATA_TYPES__Ailerons__treal;
  e_tol : DATA_TYPES__Ailerons__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((e_tol.AILL = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.AILL, e2.AILL, e3.AILL, e4.AILL, (0.1 * 50.0))) and (e_tol.AILR = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.AILR, e2.AILR, e3.AILR, e4.AILR, (0.1 * 50.0)))) else (pre ret));

tel;

node ISAS_S_140_150__aileron_quad_matches(
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool
) returns (
  ret : bool
);
let
  ret = (((ISAS_S_140_150__aileron_matches(ailerons.AIL1, ailerons.AIL2, ailerons.AIL3, ailerons.AIL4, ailerons_within_tol.AIL1) and ISAS_S_140_150__aileron_matches(ailerons.AIL2, ailerons.AIL1, ailerons.AIL3, ailerons.AIL4, ailerons_within_tol.AIL2)) and ISAS_S_140_150__aileron_matches(ailerons.AIL3, ailerons.AIL2, ailerons.AIL1, ailerons.AIL4, ailerons_within_tol.AIL3)) and ISAS_S_140_150__aileron_matches(ailerons.AIL4, ailerons.AIL2, ailerons.AIL3, ailerons.AIL1, ailerons_within_tol.AIL4));

tel;

node _CLOCKED_ISAS_S_140_150__aileron_quad_matches(
  _CLK : bool;
  _INIT : bool;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((_CLOCKED_ISAS_S_140_150__aileron_matches(_CLK, _INIT, ailerons.AIL1, ailerons.AIL2, ailerons.AIL3, ailerons.AIL4, ailerons_within_tol.AIL1) and _CLOCKED_ISAS_S_140_150__aileron_matches(_CLK, _INIT, ailerons.AIL2, ailerons.AIL1, ailerons.AIL3, ailerons.AIL4, ailerons_within_tol.AIL2)) and _CLOCKED_ISAS_S_140_150__aileron_matches(_CLK, _INIT, ailerons.AIL3, ailerons.AIL2, ailerons.AIL1, ailerons.AIL4, ailerons_within_tol.AIL3)) and _CLOCKED_ISAS_S_140_150__aileron_matches(_CLK, _INIT, ailerons.AIL4, ailerons.AIL2, ailerons.AIL3, ailerons.AIL1, ailerons_within_tol.AIL4)) else (pre ret));

tel;

node ISAS_S_140_150__elevator_matches(
  e1 : DATA_TYPES__Elevators__treal;
  e2 : DATA_TYPES__Elevators__treal;
  e3 : DATA_TYPES__Elevators__treal;
  e4 : DATA_TYPES__Elevators__treal;
  e_tol : DATA_TYPES__Elevators__tbool
) returns (
  ret : bool
);
let
  ret = ((((e_tol.ELLIB = ISAS_S_140_150__quad_matches_real(e1.ELLIB, e2.ELLIB, e3.ELLIB, e4.ELLIB, (0.1 * 50.0))) and (e_tol.ELLOB = ISAS_S_140_150__quad_matches_real(e1.ELLOB, e2.ELLOB, e3.ELLOB, e4.ELLOB, (0.1 * 50.0)))) and (e_tol.ELROB = ISAS_S_140_150__quad_matches_real(e1.ELROB, e2.ELROB, e3.ELROB, e4.ELROB, (0.1 * 50.0)))) and (e_tol.ELRIB = ISAS_S_140_150__quad_matches_real(e1.ELRIB, e2.ELRIB, e3.ELRIB, e4.ELRIB, (0.1 * 50.0))));

tel;

node _CLOCKED_ISAS_S_140_150__elevator_matches(
  _CLK : bool;
  _INIT : bool;
  e1 : DATA_TYPES__Elevators__treal;
  e2 : DATA_TYPES__Elevators__treal;
  e3 : DATA_TYPES__Elevators__treal;
  e4 : DATA_TYPES__Elevators__treal;
  e_tol : DATA_TYPES__Elevators__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((e_tol.ELLIB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.ELLIB, e2.ELLIB, e3.ELLIB, e4.ELLIB, (0.1 * 50.0))) and (e_tol.ELLOB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.ELLOB, e2.ELLOB, e3.ELLOB, e4.ELLOB, (0.1 * 50.0)))) and (e_tol.ELROB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.ELROB, e2.ELROB, e3.ELROB, e4.ELROB, (0.1 * 50.0)))) and (e_tol.ELRIB = _CLOCKED_ISAS_S_140_150__quad_matches_real(_CLK, _INIT, e1.ELRIB, e2.ELRIB, e3.ELRIB, e4.ELRIB, (0.1 * 50.0)))) else (pre ret));

tel;

node ISAS_S_140_150__elevator_quad_matches(
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool
) returns (
  ret : bool
);
let
  ret = (((ISAS_S_140_150__elevator_matches(elevators.EL1, elevators.EL2, elevators.EL3, elevators.EL4, elevators_within_tol.EL1) and ISAS_S_140_150__elevator_matches(elevators.EL2, elevators.EL1, elevators.EL3, elevators.EL4, elevators_within_tol.EL2)) and ISAS_S_140_150__elevator_matches(elevators.EL3, elevators.EL2, elevators.EL1, elevators.EL4, elevators_within_tol.EL3)) and ISAS_S_140_150__elevator_matches(elevators.EL4, elevators.EL2, elevators.EL3, elevators.EL1, elevators_within_tol.EL4));

tel;

node _CLOCKED_ISAS_S_140_150__elevator_quad_matches(
  _CLK : bool;
  _INIT : bool;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((_CLOCKED_ISAS_S_140_150__elevator_matches(_CLK, _INIT, elevators.EL1, elevators.EL2, elevators.EL3, elevators.EL4, elevators_within_tol.EL1) and _CLOCKED_ISAS_S_140_150__elevator_matches(_CLK, _INIT, elevators.EL2, elevators.EL1, elevators.EL3, elevators.EL4, elevators_within_tol.EL2)) and _CLOCKED_ISAS_S_140_150__elevator_matches(_CLK, _INIT, elevators.EL3, elevators.EL2, elevators.EL1, elevators.EL4, elevators_within_tol.EL3)) and _CLOCKED_ISAS_S_140_150__elevator_matches(_CLK, _INIT, elevators.EL4, elevators.EL2, elevators.EL3, elevators.EL1, elevators_within_tol.EL4)) else (pre ret));

tel;

node ISAS_S_140_150__req(
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  ret : bool
);
let
  ret = (((((((ISAS_S_140_150__stabilizer_quad_matches(stabilizers, stabilizer_within_tol) and ISAS_S_140_150__spoiler_quad_matches(spoilers, spoilers_within_tol)) and ISAS_S_140_150__air_data_dual_matches(air_data, air_data_within_tol)) and ISAS_S_140_150__aoa_dual_matches(aoa, aoa_within_tol)) and ISAS_S_140_150__flap_quad_matches(flaps, flaps_within_tol)) and ISAS_S_140_150__rudder_quad_matches(rudders, rudders_within_tol)) and ISAS_S_140_150__aileron_quad_matches(ailerons, ailerons_within_tol)) and ISAS_S_140_150__elevator_quad_matches(elevators, elevators_within_tol));

tel;

node _CLOCKED_ISAS_S_140_150__req(
  _CLK : bool;
  _INIT : bool;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizer_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((_CLOCKED_ISAS_S_140_150__stabilizer_quad_matches(_CLK, _INIT, stabilizers, stabilizer_within_tol) and _CLOCKED_ISAS_S_140_150__spoiler_quad_matches(_CLK, _INIT, spoilers, spoilers_within_tol)) and _CLOCKED_ISAS_S_140_150__air_data_dual_matches(_CLK, _INIT, air_data, air_data_within_tol)) and _CLOCKED_ISAS_S_140_150__aoa_dual_matches(_CLK, _INIT, aoa, aoa_within_tol)) and _CLOCKED_ISAS_S_140_150__flap_quad_matches(_CLK, _INIT, flaps, flaps_within_tol)) and _CLOCKED_ISAS_S_140_150__rudder_quad_matches(_CLK, _INIT, rudders, rudders_within_tol)) and _CLOCKED_ISAS_S_140_150__aileron_quad_matches(_CLK, _INIT, ailerons, ailerons_within_tol)) and _CLOCKED_ISAS_S_140_150__elevator_quad_matches(_CLK, _INIT, elevators, elevators_within_tol)) else (pre ret));

tel;

node ISAS_S_170__dual_select(
  within_tol : bool;
  in_range1 : bool;
  in_range2 : bool;
  select : real;
  val1 : real;
  val2 : real
) returns (
  ret : bool
);
let
  ret = (((within_tol and in_range1) and in_range2) => (select = ((val1 + val2) / 2.0)));

tel;

node _CLOCKED_ISAS_S_170__dual_select(
  _CLK : bool;
  _INIT : bool;
  within_tol : bool;
  in_range1 : bool;
  in_range2 : bool;
  select : real;
  val1 : real;
  val2 : real
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((within_tol and in_range1) and in_range2) => (select = ((val1 + val2) / 2.0))) else (pre ret));

tel;

node ISAS_S_170__req(
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal
) returns (
  ret : bool
);
let
  ret = ((((((((not aoa_failed_update.val1) and (not aoa_failed_update.val2)) and aoa_within_tol.AOA1.AOA) and aoa_within_tol.AOA2.AOA) and aoa_in_range.AOA1.AOA) and aoa_in_range.AOA2.AOA) => (aoa_select.AOA = ((aoa.AOA1.AOA + aoa.AOA2.AOA) / 2.0))) and (((not air_failed_update.val1) and (not air_failed_update.val2)) => (((ISAS_S_170__dual_select((air_data_within_tol.AD1.TAT and air_data_within_tol.AD2.TAT), air_data_in_range.AD1.TAT, air_data_in_range.AD2.TAT, air_data_select.TAT, air_data.AD1.TAT, air_data.AD2.TAT) and ISAS_S_170__dual_select((air_data_within_tol.AD1.TotPres and air_data_within_tol.AD2.TotPres), air_data_in_range.AD1.TotPres, air_data_in_range.AD2.TotPres, air_data_select.TotPres, air_data.AD1.TotPres, air_data.AD2.TotPres)) and ISAS_S_170__dual_select((air_data_within_tol.AD1.Pres and air_data_within_tol.AD2.Pres), air_data_in_range.AD1.Pres, air_data_in_range.AD2.Pres, air_data_select.Pres, air_data.AD1.Pres, air_data.AD2.Pres)) and ISAS_S_170__dual_select((air_data_within_tol.AD1.Temp and air_data_within_tol.AD2.Temp), air_data_in_range.AD1.Temp, air_data_in_range.AD2.Temp, air_data_select.Temp, air_data.AD1.Temp, air_data.AD2.Temp))));

tel;

node _CLOCKED_ISAS_S_170__req(
  _CLK : bool;
  _INIT : bool;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((((((not aoa_failed_update.val1) and (not aoa_failed_update.val2)) and aoa_within_tol.AOA1.AOA) and aoa_within_tol.AOA2.AOA) and aoa_in_range.AOA1.AOA) and aoa_in_range.AOA2.AOA) => (aoa_select.AOA = ((aoa.AOA1.AOA + aoa.AOA2.AOA) / 2.0))) and (((not air_failed_update.val1) and (not air_failed_update.val2)) => (((_CLOCKED_ISAS_S_170__dual_select(_CLK, _INIT, (air_data_within_tol.AD1.TAT and air_data_within_tol.AD2.TAT), air_data_in_range.AD1.TAT, air_data_in_range.AD2.TAT, air_data_select.TAT, air_data.AD1.TAT, air_data.AD2.TAT) and _CLOCKED_ISAS_S_170__dual_select(_CLK, _INIT, (air_data_within_tol.AD1.TotPres and air_data_within_tol.AD2.TotPres), air_data_in_range.AD1.TotPres, air_data_in_range.AD2.TotPres, air_data_select.TotPres, air_data.AD1.TotPres, air_data.AD2.TotPres)) and _CLOCKED_ISAS_S_170__dual_select(_CLK, _INIT, (air_data_within_tol.AD1.Pres and air_data_within_tol.AD2.Pres), air_data_in_range.AD1.Pres, air_data_in_range.AD2.Pres, air_data_select.Pres, air_data.AD1.Pres, air_data.AD2.Pres)) and _CLOCKED_ISAS_S_170__dual_select(_CLK, _INIT, (air_data_within_tol.AD1.Temp and air_data_within_tol.AD2.Temp), air_data_in_range.AD1.Temp, air_data_in_range.AD2.Temp, air_data_select.Temp, air_data.AD1.Temp, air_data.AD2.Temp)))) else (pre ret));

tel;

node ISAS_S_190__matches_tolerance_real(
  val1 : real;
  val2 : real;
  tol : real
) returns (
  return : bool
);
let
  return = (if (val1 <= val2) then (val2 <= (val1 + tol)) else (val1 <= (val2 + tol)));

tel;

node _CLOCKED_ISAS_S_190__matches_tolerance_real(
  _CLK : bool;
  _INIT : bool;
  val1 : real;
  val2 : real;
  tol : real
) returns (
  return : bool
);
let
  return = (if _CLK then (if (val1 <= val2) then (val2 <= (val1 + tol)) else (val1 <= (val2 + tol))) else (pre return));

tel;

node ISAS_S_190__req(
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  egi_select : DATA_TYPES__EGI__treal;
  egi_select_fault : DATA_TYPES__EGI__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = ((((((((((((aoa_failed_update.val1 or (not aoa_in_range.AOA1.AOA)) or (not ISAS_S_190__matches_tolerance_real(aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0)))) => (aoa_within_tol.AOA2.AOA = ((((not aoa_failed_update.val2) and aoa_in_range.AOA2.AOA) and (not egi_select_fault.AOA)) and ISAS_S_190__matches_tolerance_real(aoa.AOA2.AOA, egi_select.AOA, (0.1 * 50.0))))) and (((aoa_failed_update.val2 or (not aoa_in_range.AOA2.AOA)) or (not ISAS_S_190__matches_tolerance_real(aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0)))) => (aoa_within_tol.AOA1.AOA = ((((not aoa_failed_update.val1) and aoa_in_range.AOA1.AOA) and (not egi_select_fault.AOA)) and ISAS_S_190__matches_tolerance_real(aoa.AOA1.AOA, egi_select.AOA, (0.1 * 50.0)))))) and ((air_failed_update.val1 or (not air_data_in_range.AD1.TAT)) => (air_data_within_tol.AD2.TAT = ((((not air_failed_update.val2) and air_data_in_range.AD2.TAT) and (not egi_select_fault.TAT)) and ISAS_S_190__matches_tolerance_real(air_data.AD2.TAT, egi_select.TAT, (0.1 * 50.0)))))) and ((air_failed_update.val2 or (not air_data_in_range.AD2.TAT)) => (air_data_within_tol.AD1.TAT = ((((not air_failed_update.val1) and air_data_in_range.AD1.TAT) and (not egi_select_fault.TAT)) and ISAS_S_190__matches_tolerance_real(air_data.AD1.TAT, egi_select.TAT, (0.1 * 50.0)))))) and ((air_failed_update.val1 or (not air_data_in_range.AD1.TotPres)) => (air_data_within_tol.AD2.TotPres = ((((not air_failed_update.val2) and air_data_in_range.AD2.TotPres) and (not egi_select_fault.TotPres)) and ISAS_S_190__matches_tolerance_real(air_data.AD2.TotPres, egi_select.TotPres, (0.1 * 50.0)))))) and ((air_failed_update.val2 or (not air_data_in_range.AD2.TotPres)) => (air_data_within_tol.AD1.TotPres = ((((not air_failed_update.val1) and air_data_in_range.AD1.TotPres) and (not egi_select_fault.TotPres)) and ISAS_S_190__matches_tolerance_real(air_data.AD1.TotPres, egi_select.TotPres, (0.1 * 50.0)))))) and ((air_failed_update.val1 or (not air_data_in_range.AD1.Pres)) => (air_data_within_tol.AD2.Pres = ((((not air_failed_update.val2) and air_data_in_range.AD2.Pres) and (not egi_select_fault.Pres)) and ISAS_S_190__matches_tolerance_real(air_data.AD2.Pres, egi_select.Pres, (0.1 * 50.0)))))) and ((air_failed_update.val2 or (not air_data_in_range.AD2.Pres)) => (air_data_within_tol.AD1.Pres = ((((not air_failed_update.val1) and air_data_in_range.AD1.Pres) and (not egi_select_fault.Pres)) and ISAS_S_190__matches_tolerance_real(air_data.AD1.Pres, egi_select.Pres, (0.1 * 50.0)))))) and ((air_failed_update.val1 or (not air_data_in_range.AD1.Temp)) => (air_data_within_tol.AD2.Temp = ((((not air_failed_update.val2) and air_data_in_range.AD2.Temp) and (not egi_select_fault.Temp)) and ISAS_S_190__matches_tolerance_real(air_data.AD2.Temp, egi_select.Temp, (0.1 * 50.0)))))) and ((air_failed_update.val2 or (not air_data_in_range.AD2.Temp)) => (air_data_within_tol.AD1.Temp = ((((not air_failed_update.val1) and air_data_in_range.AD1.Temp) and (not egi_select_fault.Temp)) and ISAS_S_190__matches_tolerance_real(air_data.AD1.Temp, egi_select.Temp, (0.1 * 50.0))))));

tel;

node _CLOCKED_ISAS_S_190__req(
  _CLK : bool;
  _INIT : bool;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  egi_select : DATA_TYPES__EGI__treal;
  egi_select_fault : DATA_TYPES__EGI__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((((((((((aoa_failed_update.val1 or (not aoa_in_range.AOA1.AOA)) or (not _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0)))) => (aoa_within_tol.AOA2.AOA = ((((not aoa_failed_update.val2) and aoa_in_range.AOA2.AOA) and (not egi_select_fault.AOA)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, aoa.AOA2.AOA, egi_select.AOA, (0.1 * 50.0))))) and (((aoa_failed_update.val2 or (not aoa_in_range.AOA2.AOA)) or (not _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0)))) => (aoa_within_tol.AOA1.AOA = ((((not aoa_failed_update.val1) and aoa_in_range.AOA1.AOA) and (not egi_select_fault.AOA)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, aoa.AOA1.AOA, egi_select.AOA, (0.1 * 50.0)))))) and ((air_failed_update.val1 or (not air_data_in_range.AD1.TAT)) => (air_data_within_tol.AD2.TAT = ((((not air_failed_update.val2) and air_data_in_range.AD2.TAT) and (not egi_select_fault.TAT)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, air_data.AD2.TAT, egi_select.TAT, (0.1 * 50.0)))))) and ((air_failed_update.val2 or (not air_data_in_range.AD2.TAT)) => (air_data_within_tol.AD1.TAT = ((((not air_failed_update.val1) and air_data_in_range.AD1.TAT) and (not egi_select_fault.TAT)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, air_data.AD1.TAT, egi_select.TAT, (0.1 * 50.0)))))) and ((air_failed_update.val1 or (not air_data_in_range.AD1.TotPres)) => (air_data_within_tol.AD2.TotPres = ((((not air_failed_update.val2) and air_data_in_range.AD2.TotPres) and (not egi_select_fault.TotPres)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, air_data.AD2.TotPres, egi_select.TotPres, (0.1 * 50.0)))))) and ((air_failed_update.val2 or (not air_data_in_range.AD2.TotPres)) => (air_data_within_tol.AD1.TotPres = ((((not air_failed_update.val1) and air_data_in_range.AD1.TotPres) and (not egi_select_fault.TotPres)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, air_data.AD1.TotPres, egi_select.TotPres, (0.1 * 50.0)))))) and ((air_failed_update.val1 or (not air_data_in_range.AD1.Pres)) => (air_data_within_tol.AD2.Pres = ((((not air_failed_update.val2) and air_data_in_range.AD2.Pres) and (not egi_select_fault.Pres)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, air_data.AD2.Pres, egi_select.Pres, (0.1 * 50.0)))))) and ((air_failed_update.val2 or (not air_data_in_range.AD2.Pres)) => (air_data_within_tol.AD1.Pres = ((((not air_failed_update.val1) and air_data_in_range.AD1.Pres) and (not egi_select_fault.Pres)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, air_data.AD1.Pres, egi_select.Pres, (0.1 * 50.0)))))) and ((air_failed_update.val1 or (not air_data_in_range.AD1.Temp)) => (air_data_within_tol.AD2.Temp = ((((not air_failed_update.val2) and air_data_in_range.AD2.Temp) and (not egi_select_fault.Temp)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, air_data.AD2.Temp, egi_select.Temp, (0.1 * 50.0)))))) and ((air_failed_update.val2 or (not air_data_in_range.AD2.Temp)) => (air_data_within_tol.AD1.Temp = ((((not air_failed_update.val1) and air_data_in_range.AD1.Temp) and (not egi_select_fault.Temp)) and _CLOCKED_ISAS_S_190__matches_tolerance_real(_CLK, _INIT, air_data.AD1.Temp, egi_select.Temp, (0.1 * 50.0)))))) else (pre ret));

tel;

node ISAS_S_200__req(
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_select : DATA_TYPES__EGI__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal
) returns (
  ret : bool
);
let
  ret = (((((((((((aoa_faults.AOA1.AOA and (not aoa_faults.AOA2.AOA)) => (aoa_select.AOA = ((aoa.AOA2.AOA + egi_select.AOA) / 2.0))) and (((not aoa_faults.AOA1.AOA) and aoa_faults.AOA2.AOA) => (aoa_select.AOA = ((aoa.AOA1.AOA + egi_select.AOA) / 2.0)))) and ((air_data_faults.AD1.TAT and (not air_data_faults.AD2.TAT)) => (air_data_select.TAT = ((air_data.AD2.TAT + egi_select.TAT) / 2.0)))) and (((not air_data_faults.AD1.TAT) and air_data_faults.AD2.TAT) => (air_data_select.TAT = ((air_data.AD1.TAT + egi_select.TAT) / 2.0)))) and ((air_data_faults.AD1.TotPres and (not air_data_faults.AD2.TotPres)) => (air_data_select.TotPres = ((air_data.AD2.TotPres + egi_select.TotPres) / 2.0)))) and (((not air_data_faults.AD1.TotPres) and air_data_faults.AD2.TotPres) => (air_data_select.TotPres = ((air_data.AD1.TotPres + egi_select.TotPres) / 2.0)))) and ((air_data_faults.AD1.Pres and (not air_data_faults.AD2.Pres)) => (air_data_select.Pres = ((air_data.AD2.Pres + egi_select.Pres) / 2.0)))) and (((not air_data_faults.AD1.Pres) and air_data_faults.AD2.Pres) => (air_data_select.Pres = ((air_data.AD1.Pres + egi_select.Pres) / 2.0)))) and ((air_data_faults.AD1.Temp and (not air_data_faults.AD2.Temp)) => (air_data_select.Temp = ((air_data.AD2.Temp + egi_select.Temp) / 2.0)))) and (((not air_data_faults.AD1.Temp) and air_data_faults.AD2.Temp) => (air_data_select.Temp = ((air_data.AD1.Temp + egi_select.Temp) / 2.0))));

tel;

node _CLOCKED_ISAS_S_200__req(
  _CLK : bool;
  _INIT : bool;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_select : DATA_TYPES__EGI__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((((((aoa_faults.AOA1.AOA and (not aoa_faults.AOA2.AOA)) => (aoa_select.AOA = ((aoa.AOA2.AOA + egi_select.AOA) / 2.0))) and (((not aoa_faults.AOA1.AOA) and aoa_faults.AOA2.AOA) => (aoa_select.AOA = ((aoa.AOA1.AOA + egi_select.AOA) / 2.0)))) and ((air_data_faults.AD1.TAT and (not air_data_faults.AD2.TAT)) => (air_data_select.TAT = ((air_data.AD2.TAT + egi_select.TAT) / 2.0)))) and (((not air_data_faults.AD1.TAT) and air_data_faults.AD2.TAT) => (air_data_select.TAT = ((air_data.AD1.TAT + egi_select.TAT) / 2.0)))) and ((air_data_faults.AD1.TotPres and (not air_data_faults.AD2.TotPres)) => (air_data_select.TotPres = ((air_data.AD2.TotPres + egi_select.TotPres) / 2.0)))) and (((not air_data_faults.AD1.TotPres) and air_data_faults.AD2.TotPres) => (air_data_select.TotPres = ((air_data.AD1.TotPres + egi_select.TotPres) / 2.0)))) and ((air_data_faults.AD1.Pres and (not air_data_faults.AD2.Pres)) => (air_data_select.Pres = ((air_data.AD2.Pres + egi_select.Pres) / 2.0)))) and (((not air_data_faults.AD1.Pres) and air_data_faults.AD2.Pres) => (air_data_select.Pres = ((air_data.AD1.Pres + egi_select.Pres) / 2.0)))) and ((air_data_faults.AD1.Temp and (not air_data_faults.AD2.Temp)) => (air_data_select.Temp = ((air_data.AD2.Temp + egi_select.Temp) / 2.0)))) and (((not air_data_faults.AD1.Temp) and air_data_faults.AD2.Temp) => (air_data_select.Temp = ((air_data.AD1.Temp + egi_select.Temp) / 2.0)))) else (pre ret));

tel;

node ISAS_S_210__req(
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_select : DATA_TYPES__EGI__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal
) returns (
  ret : bool
);
let
  ret = ((((((aoa_faults.AOA1.AOA and aoa_faults.AOA2.AOA) => (aoa_select.AOA = egi_select.AOA)) and ((air_data_faults.AD1.TAT and air_data_faults.AD2.TAT) => (air_data_select.TAT = egi_select.TAT))) and ((air_data_faults.AD1.TotPres and air_data_faults.AD2.TotPres) => (air_data_select.TotPres = egi_select.TotPres))) and ((air_data_faults.AD1.Pres and air_data_faults.AD2.Pres) => (air_data_select.Pres = egi_select.Pres))) and ((air_data_faults.AD1.Temp and air_data_faults.AD2.Temp) => (air_data_select.Temp = egi_select.Temp)));

tel;

node _CLOCKED_ISAS_S_210__req(
  _CLK : bool;
  _INIT : bool;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_faults : DATA_TYPES__DUAL_AirData__tbool;
  egi_select : DATA_TYPES__EGI__treal;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((((aoa_faults.AOA1.AOA and aoa_faults.AOA2.AOA) => (aoa_select.AOA = egi_select.AOA)) and ((air_data_faults.AD1.TAT and air_data_faults.AD2.TAT) => (air_data_select.TAT = egi_select.TAT))) and ((air_data_faults.AD1.TotPres and air_data_faults.AD2.TotPres) => (air_data_select.TotPres = egi_select.TotPres))) and ((air_data_faults.AD1.Pres and air_data_faults.AD2.Pres) => (air_data_select.Pres = egi_select.Pres))) and ((air_data_faults.AD1.Temp and air_data_faults.AD2.Temp) => (air_data_select.Temp = egi_select.Temp))) else (pre ret));

tel;

node ISAS_S_220__matches_tolerance_real(
  val1 : real;
  val2 : real;
  tol : real
) returns (
  return : bool
);
let
  return = (if (val1 <= val2) then (val2 <= (val1 + tol)) else (val1 <= (val2 + tol)));

tel;

node _CLOCKED_ISAS_S_220__matches_tolerance_real(
  _CLK : bool;
  _INIT : bool;
  val1 : real;
  val2 : real;
  tol : real
) returns (
  return : bool
);
let
  return = (if _CLK then (if (val1 <= val2) then (val2 <= (val1 + tol)) else (val1 <= (val2 + tol))) else (pre return));

tel;

node ISAS_S_220__req(
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  egi_select : DATA_TYPES__EGI__treal;
  egi_select_fault : DATA_TYPES__EGI__tbool;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal
) returns (
  ret : bool
);
let
  ret = ((((((((((not aoa_failed_update.val1) and aoa_in_range.AOA1.AOA) and ((not aoa_failed_update.val2) and aoa_in_range.AOA2.AOA)) and (not ISAS_S_220__matches_tolerance_real(aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0)))) and (not egi_select_fault.AOA)) => (aoa_select.AOA = egi_select.AOA)) and ((((((not air_data_failed_update.val1) and air_data_in_range.AD1.TAT) and ((not air_data_failed_update.val2) and air_data_in_range.AD2.TAT)) and (not ISAS_S_220__matches_tolerance_real(air_data.AD1.TAT, air_data.AD2.TAT, (0.1 * 50.0)))) and (not egi_select_fault.TAT)) => (air_data_select.TAT = egi_select.TAT))) and ((((((not air_data_failed_update.val1) and air_data_in_range.AD1.TotPres) and ((not air_data_failed_update.val2) and air_data_in_range.AD2.TotPres)) and (not ISAS_S_220__matches_tolerance_real(air_data.AD1.TotPres, air_data.AD2.TotPres, (0.1 * 50.0)))) and (not egi_select_fault.TotPres)) => (air_data_select.TotPres = egi_select.TotPres))) and ((((((not air_data_failed_update.val1) and air_data_in_range.AD1.Pres) and ((not air_data_failed_update.val2) and air_data_in_range.AD2.Pres)) and (not ISAS_S_220__matches_tolerance_real(air_data.AD1.Pres, air_data.AD2.Pres, (0.1 * 50.0)))) and (not egi_select_fault.Pres)) => (air_data_select.Pres = egi_select.Pres))) and ((((((not air_data_failed_update.val1) and air_data_in_range.AD1.Temp) and ((not air_data_failed_update.val2) and air_data_in_range.AD2.Temp)) and (not ISAS_S_220__matches_tolerance_real(air_data.AD1.Temp, air_data.AD2.Temp, (0.1 * 50.0)))) and (not egi_select_fault.Temp)) => (air_data_select.Temp = egi_select.Temp)));

tel;

node _CLOCKED_ISAS_S_220__req(
  _CLK : bool;
  _INIT : bool;
  aoa : DATA_TYPES__DUAL_AoA__treal;
  air_data : DATA_TYPES__DUAL_AirData__treal;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  egi_select : DATA_TYPES__EGI__treal;
  egi_select_fault : DATA_TYPES__EGI__tbool;
  aoa_select : DATA_TYPES__AoA__treal;
  air_data_select : DATA_TYPES__AirData__treal
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((((((((not aoa_failed_update.val1) and aoa_in_range.AOA1.AOA) and ((not aoa_failed_update.val2) and aoa_in_range.AOA2.AOA)) and (not _CLOCKED_ISAS_S_220__matches_tolerance_real(_CLK, _INIT, aoa.AOA1.AOA, aoa.AOA2.AOA, (0.1 * 50.0)))) and (not egi_select_fault.AOA)) => (aoa_select.AOA = egi_select.AOA)) and ((((((not air_data_failed_update.val1) and air_data_in_range.AD1.TAT) and ((not air_data_failed_update.val2) and air_data_in_range.AD2.TAT)) and (not _CLOCKED_ISAS_S_220__matches_tolerance_real(_CLK, _INIT, air_data.AD1.TAT, air_data.AD2.TAT, (0.1 * 50.0)))) and (not egi_select_fault.TAT)) => (air_data_select.TAT = egi_select.TAT))) and ((((((not air_data_failed_update.val1) and air_data_in_range.AD1.TotPres) and ((not air_data_failed_update.val2) and air_data_in_range.AD2.TotPres)) and (not _CLOCKED_ISAS_S_220__matches_tolerance_real(_CLK, _INIT, air_data.AD1.TotPres, air_data.AD2.TotPres, (0.1 * 50.0)))) and (not egi_select_fault.TotPres)) => (air_data_select.TotPres = egi_select.TotPres))) and ((((((not air_data_failed_update.val1) and air_data_in_range.AD1.Pres) and ((not air_data_failed_update.val2) and air_data_in_range.AD2.Pres)) and (not _CLOCKED_ISAS_S_220__matches_tolerance_real(_CLK, _INIT, air_data.AD1.Pres, air_data.AD2.Pres, (0.1 * 50.0)))) and (not egi_select_fault.Pres)) => (air_data_select.Pres = egi_select.Pres))) and ((((((not air_data_failed_update.val1) and air_data_in_range.AD1.Temp) and ((not air_data_failed_update.val2) and air_data_in_range.AD2.Temp)) and (not _CLOCKED_ISAS_S_220__matches_tolerance_real(_CLK, _INIT, air_data.AD1.Temp, air_data.AD2.Temp, (0.1 * 50.0)))) and (not egi_select_fault.Temp)) => (air_data_select.Temp = egi_select.Temp))) else (pre ret));

tel;

node ISAS_S_260__min(
  val1 : real;
  val2 : real
) returns (
  ret : real
);
let
  ret = (if (val1 < val2) then val1 else val2);

tel;

node _CLOCKED_ISAS_S_260__min(
  _CLK : bool;
  _INIT : bool;
  val1 : real;
  val2 : real
) returns (
  ret : real
);
let
  ret = (if _CLK then (if (val1 < val2) then val1 else val2) else (pre ret));

tel;

node ISAS_S_260__max(
  val1 : real;
  val2 : real
) returns (
  ret : real
);
let
  ret = (if (val1 > val2) then val1 else val2);

tel;

node _CLOCKED_ISAS_S_260__max(
  _CLK : bool;
  _INIT : bool;
  val1 : real;
  val2 : real
) returns (
  ret : real
);
let
  ret = (if _CLK then (if (val1 > val2) then val1 else val2) else (pre ret));

tel;

node ISAS_S_260__value_select4(
  val1 : real;
  val2 : real;
  val3 : real;
  val4 : real;
  sig_tol : real
) returns (
  ret : real
);
var
  min_val : real;
  max_val : real;
  mid_val1 : real;
  mid_val2 : real;
let
  min_val = ISAS_S_260__min(ISAS_S_260__min(val1, val2), ISAS_S_260__min(val3, val4));

  max_val = ISAS_S_260__max(ISAS_S_260__max(val1, val2), ISAS_S_260__max(val3, val4));

  mid_val1 = ISAS_S_260__max(ISAS_S_260__min(val1, val2), ISAS_S_260__min(val3, val4));

  mid_val2 = ISAS_S_260__min(ISAS_S_260__max(val1, val2), ISAS_S_260__max(val3, val4));

  ret = (if ((max_val - min_val) < sig_tol) then ((((val1 + val2) + val3) + val4) / 4.0) else ((mid_val1 + mid_val2) / 2.0));

tel;

node _CLOCKED_ISAS_S_260__value_select4(
  _CLK : bool;
  _INIT : bool;
  val1 : real;
  val2 : real;
  val3 : real;
  val4 : real;
  sig_tol : real
) returns (
  ret : real
);
var
  min_val : real;
  max_val : real;
  mid_val1 : real;
  mid_val2 : real;
let
  min_val = (if _CLK then _CLOCKED_ISAS_S_260__min(_CLK, _INIT, _CLOCKED_ISAS_S_260__min(_CLK, _INIT, val1, val2), _CLOCKED_ISAS_S_260__min(_CLK, _INIT, val3, val4)) else (pre min_val));

  max_val = (if _CLK then _CLOCKED_ISAS_S_260__max(_CLK, _INIT, _CLOCKED_ISAS_S_260__max(_CLK, _INIT, val1, val2), _CLOCKED_ISAS_S_260__max(_CLK, _INIT, val3, val4)) else (pre max_val));

  mid_val1 = (if _CLK then _CLOCKED_ISAS_S_260__max(_CLK, _INIT, _CLOCKED_ISAS_S_260__min(_CLK, _INIT, val1, val2), _CLOCKED_ISAS_S_260__min(_CLK, _INIT, val3, val4)) else (pre mid_val1));

  mid_val2 = (if _CLK then _CLOCKED_ISAS_S_260__min(_CLK, _INIT, _CLOCKED_ISAS_S_260__max(_CLK, _INIT, val1, val2), _CLOCKED_ISAS_S_260__max(_CLK, _INIT, val3, val4)) else (pre mid_val2));

  ret = (if _CLK then (if ((max_val - min_val) < sig_tol) then ((((val1 + val2) + val3) + val4) / 4.0) else ((mid_val1 + mid_val2) / 2.0)) else (pre ret));

tel;

node ISAS_S_260__value_select3(
  val1 : real;
  val2 : real;
  val3 : real;
  sig_tol : real
) returns (
  ret : real
);
var
  min_val : real;
  max_val : real;
  mid_val : real;
let
  min_val = ISAS_S_260__min(ISAS_S_260__min(val1, val2), val3);

  max_val = ISAS_S_260__max(ISAS_S_260__max(val1, val2), val3);

  mid_val = ISAS_S_260__max(ISAS_S_260__max(ISAS_S_260__min(val1, val2), ISAS_S_260__min(val2, val3)), ISAS_S_260__min(val1, val3));

  ret = (if ((max_val - min_val) < sig_tol) then (((val1 + val2) + val3) / 3.0) else mid_val);

tel;

node _CLOCKED_ISAS_S_260__value_select3(
  _CLK : bool;
  _INIT : bool;
  val1 : real;
  val2 : real;
  val3 : real;
  sig_tol : real
) returns (
  ret : real
);
var
  min_val : real;
  max_val : real;
  mid_val : real;
let
  min_val = (if _CLK then _CLOCKED_ISAS_S_260__min(_CLK, _INIT, _CLOCKED_ISAS_S_260__min(_CLK, _INIT, val1, val2), val3) else (pre min_val));

  max_val = (if _CLK then _CLOCKED_ISAS_S_260__max(_CLK, _INIT, _CLOCKED_ISAS_S_260__max(_CLK, _INIT, val1, val2), val3) else (pre max_val));

  mid_val = (if _CLK then _CLOCKED_ISAS_S_260__max(_CLK, _INIT, _CLOCKED_ISAS_S_260__max(_CLK, _INIT, _CLOCKED_ISAS_S_260__min(_CLK, _INIT, val1, val2), _CLOCKED_ISAS_S_260__min(_CLK, _INIT, val2, val3)), _CLOCKED_ISAS_S_260__min(_CLK, _INIT, val1, val3)) else (pre mid_val));

  ret = (if _CLK then (if ((max_val - min_val) < sig_tol) then (((val1 + val2) + val3) / 3.0) else mid_val) else (pre ret));

tel;

node ISAS_S_260__value_select(
  val1 : real;
  val2 : real;
  val3 : real;
  val4 : real;
  f1 : bool;
  f2 : bool;
  f3 : bool;
  f4 : bool;
  sig_tol : real;
  select : real
) returns (
  ret : bool
);
var
  nf1 : bool;
  nf2 : bool;
  nf3 : bool;
  nf4 : bool;
let
  nf1 = (not f1);

  nf2 = (not f2);

  nf3 = (not f3);

  nf4 = (not f4);

  ret = (if (((nf1 and nf2) and nf3) and nf4) then (select = ISAS_S_260__value_select4(val1, val2, val3, val4, sig_tol)) else (if ((nf1 and nf2) and nf3) then (select = ISAS_S_260__value_select3(val1, val2, val3, sig_tol)) else (if ((nf4 and nf2) and nf3) then (select = ISAS_S_260__value_select3(val4, val2, val3, sig_tol)) else (if ((nf1 and nf4) and nf3) then (select = ISAS_S_260__value_select3(val1, val4, val3, sig_tol)) else (if ((nf1 and nf2) and nf4) then (select = ISAS_S_260__value_select3(val1, val2, val4, sig_tol)) else (if (nf1 and nf2) then (select = ((val1 + val2) / 2.0)) else (if (nf1 and nf3) then (select = ((val1 + val3) / 2.0)) else (if (nf1 and nf4) then (select = ((val1 + val4) / 2.0)) else (if (nf2 and nf3) then (select = ((val2 + val3) / 2.0)) else (if (nf2 and nf4) then (select = ((val2 + val2) / 2.0)) else (if (nf3 and nf4) then (select = ((val3 + val4) / 2.0)) else true)))))))))));

tel;

node _CLOCKED_ISAS_S_260__value_select(
  _CLK : bool;
  _INIT : bool;
  val1 : real;
  val2 : real;
  val3 : real;
  val4 : real;
  f1 : bool;
  f2 : bool;
  f3 : bool;
  f4 : bool;
  sig_tol : real;
  select : real
) returns (
  ret : bool
);
var
  nf1 : bool;
  nf2 : bool;
  nf3 : bool;
  nf4 : bool;
let
  nf1 = (if _CLK then (not f1) else (pre nf1));

  nf2 = (if _CLK then (not f2) else (pre nf2));

  nf3 = (if _CLK then (not f3) else (pre nf3));

  nf4 = (if _CLK then (not f4) else (pre nf4));

  ret = (if _CLK then (if (((nf1 and nf2) and nf3) and nf4) then (select = _CLOCKED_ISAS_S_260__value_select4(_CLK, _INIT, val1, val2, val3, val4, sig_tol)) else (if ((nf1 and nf2) and nf3) then (select = _CLOCKED_ISAS_S_260__value_select3(_CLK, _INIT, val1, val2, val3, sig_tol)) else (if ((nf4 and nf2) and nf3) then (select = _CLOCKED_ISAS_S_260__value_select3(_CLK, _INIT, val4, val2, val3, sig_tol)) else (if ((nf1 and nf4) and nf3) then (select = _CLOCKED_ISAS_S_260__value_select3(_CLK, _INIT, val1, val4, val3, sig_tol)) else (if ((nf1 and nf2) and nf4) then (select = _CLOCKED_ISAS_S_260__value_select3(_CLK, _INIT, val1, val2, val4, sig_tol)) else (if (nf1 and nf2) then (select = ((val1 + val2) / 2.0)) else (if (nf1 and nf3) then (select = ((val1 + val3) / 2.0)) else (if (nf1 and nf4) then (select = ((val1 + val4) / 2.0)) else (if (nf2 and nf3) then (select = ((val2 + val3) / 2.0)) else (if (nf2 and nf4) then (select = ((val2 + val2) / 2.0)) else (if (nf3 and nf4) then (select = ((val3 + val4) / 2.0)) else true))))))))))) else (pre ret));

tel;

node ISAS_S_260__req(
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  elevators_fault : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_fault : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_fault : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_fault : DATA_TYPES__QUAD_Flaps__tbool;
  spoilers_fault : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_fault : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  rudders_sig_tol : DATA_TYPES__Rudders__treal;
  flaps_sig_tol : DATA_TYPES__Flaps__treal;
  spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  stabilizers_sig_tol : DATA_TYPES__Stabilizer__treal;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal
) returns (
  ret : bool
);
let
  ret = ((((((((((((((((ISAS_S_260__value_select(elevators.EL1.ELLOB, elevators.EL2.ELLOB, elevators.EL3.ELLOB, elevators.EL4.ELLOB, elevators_fault.EL1.ELLOB, elevators_fault.EL2.ELLOB, elevators_fault.EL3.ELLOB, elevators_fault.EL4.ELLOB, elevators_sig_tol.ELLOB, elevators_select.ELLOB) and ISAS_S_260__value_select(elevators.EL1.ELLIB, elevators.EL2.ELLIB, elevators.EL3.ELLIB, elevators.EL4.ELLIB, elevators_fault.EL1.ELLIB, elevators_fault.EL2.ELLIB, elevators_fault.EL3.ELLIB, elevators_fault.EL4.ELLIB, elevators_sig_tol.ELLIB, elevators_select.ELLIB)) and ISAS_S_260__value_select(elevators.EL1.ELROB, elevators.EL2.ELROB, elevators.EL3.ELROB, elevators.EL4.ELROB, elevators_fault.EL1.ELROB, elevators_fault.EL2.ELROB, elevators_fault.EL3.ELROB, elevators_fault.EL4.ELROB, elevators_sig_tol.ELROB, elevators_select.ELROB)) and ISAS_S_260__value_select(elevators.EL1.ELRIB, elevators.EL2.ELRIB, elevators.EL3.ELRIB, elevators.EL4.ELRIB, elevators_fault.EL1.ELRIB, elevators_fault.EL2.ELRIB, elevators_fault.EL3.ELRIB, elevators_fault.EL4.ELRIB, elevators_sig_tol.ELRIB, elevators_select.ELRIB)) and ISAS_S_260__value_select(ailerons.AIL1.AILL, ailerons.AIL2.AILL, ailerons.AIL3.AILL, ailerons.AIL4.AILL, ailerons_fault.AIL1.AILL, ailerons_fault.AIL2.AILL, ailerons_fault.AIL3.AILL, ailerons_fault.AIL4.AILL, ailerons_sig_tol.AILL, ailerons_select.AILL)) and ISAS_S_260__value_select(ailerons.AIL1.AILR, ailerons.AIL2.AILR, ailerons.AIL3.AILR, ailerons.AIL4.AILR, ailerons_fault.AIL1.AILR, ailerons_fault.AIL2.AILR, ailerons_fault.AIL3.AILR, ailerons_fault.AIL4.AILR, ailerons_sig_tol.AILR, ailerons_select.AILR)) and ISAS_S_260__value_select(rudders.RUDD1.RUDU, rudders.RUDD2.RUDU, rudders.RUDD3.RUDU, rudders.RUDD4.RUDU, rudders_fault.RUDD1.RUDU, rudders_fault.RUDD2.RUDU, rudders_fault.RUDD3.RUDU, rudders_fault.RUDD4.RUDU, rudders_sig_tol.RUDU, rudders_select.RUDU)) and ISAS_S_260__value_select(rudders.RUDD1.RUDL, rudders.RUDD2.RUDL, rudders.RUDD3.RUDL, rudders.RUDD4.RUDL, rudders_fault.RUDD1.RUDL, rudders_fault.RUDD2.RUDL, rudders_fault.RUDD3.RUDL, rudders_fault.RUDD4.RUDL, rudders_sig_tol.RUDL, rudders_select.RUDL)) and ISAS_S_260__value_select(flaps.FLAPS1.FLLOB, flaps.FLAPS2.FLLOB, flaps.FLAPS3.FLLOB, flaps.FLAPS4.FLLOB, flaps_fault.FLAPS1.FLLOB, flaps_fault.FLAPS2.FLLOB, flaps_fault.FLAPS3.FLLOB, flaps_fault.FLAPS4.FLLOB, flaps_sig_tol.FLLOB, flaps_select.FLLOB)) and ISAS_S_260__value_select(flaps.FLAPS1.FLLIB, flaps.FLAPS2.FLLIB, flaps.FLAPS3.FLLIB, flaps.FLAPS4.FLLIB, flaps_fault.FLAPS1.FLLIB, flaps_fault.FLAPS2.FLLIB, flaps_fault.FLAPS3.FLLIB, flaps_fault.FLAPS4.FLLIB, flaps_sig_tol.FLLIB, flaps_select.FLLIB)) and ISAS_S_260__value_select(flaps.FLAPS1.FLROB, flaps.FLAPS2.FLROB, flaps.FLAPS3.FLROB, flaps.FLAPS4.FLROB, flaps_fault.FLAPS1.FLROB, flaps_fault.FLAPS2.FLROB, flaps_fault.FLAPS3.FLROB, flaps_fault.FLAPS4.FLROB, flaps_sig_tol.FLROB, flaps_select.FLROB)) and ISAS_S_260__value_select(flaps.FLAPS1.FLRIB, flaps.FLAPS2.FLRIB, flaps.FLAPS3.FLRIB, flaps.FLAPS4.FLRIB, flaps_fault.FLAPS1.FLRIB, flaps_fault.FLAPS2.FLRIB, flaps_fault.FLAPS3.FLRIB, flaps_fault.FLAPS4.FLRIB, flaps_sig_tol.FLRIB, flaps_select.FLRIB)) and ISAS_S_260__value_select(spoilers.SPOIL1.SPLOB, spoilers.SPOIL2.SPLOB, spoilers.SPOIL3.SPLOB, spoilers.SPOIL4.SPLOB, spoilers_fault.SPOIL1.SPLOB, spoilers_fault.SPOIL2.SPLOB, spoilers_fault.SPOIL3.SPLOB, spoilers_fault.SPOIL4.SPLOB, spoilers_sig_tol.SPLOB, spoilers_select.SPLOB)) and ISAS_S_260__value_select(spoilers.SPOIL1.SPLIB, spoilers.SPOIL2.SPLIB, spoilers.SPOIL3.SPLIB, spoilers.SPOIL4.SPLIB, spoilers_fault.SPOIL1.SPLIB, spoilers_fault.SPOIL2.SPLIB, spoilers_fault.SPOIL3.SPLIB, spoilers_fault.SPOIL4.SPLIB, spoilers_sig_tol.SPLIB, spoilers_select.SPLIB)) and ISAS_S_260__value_select(spoilers.SPOIL1.SPROB, spoilers.SPOIL2.SPROB, spoilers.SPOIL3.SPROB, spoilers.SPOIL4.SPROB, spoilers_fault.SPOIL1.SPROB, spoilers_fault.SPOIL2.SPROB, spoilers_fault.SPOIL3.SPROB, spoilers_fault.SPOIL4.SPROB, spoilers_sig_tol.SPROB, spoilers_select.SPROB)) and ISAS_S_260__value_select(spoilers.SPOIL1.SPRIB, spoilers.SPOIL2.SPRIB, spoilers.SPOIL3.SPRIB, spoilers.SPOIL4.SPRIB, spoilers_fault.SPOIL1.SPRIB, spoilers_fault.SPOIL2.SPRIB, spoilers_fault.SPOIL3.SPRIB, spoilers_fault.SPOIL4.SPRIB, spoilers_sig_tol.SPRIB, spoilers_select.SPRIB)) and ISAS_S_260__value_select(stabilizers.STAB1.VAL, stabilizers.STAB2.VAL, stabilizers.STAB3.VAL, stabilizers.STAB4.VAL, stabilizers_fault.STAB1, stabilizers_fault.STAB2, stabilizers_fault.STAB3, stabilizers_fault.STAB4, stabilizers_sig_tol.VAL, stabilizers_select.VAL));

tel;

node _CLOCKED_ISAS_S_260__req(
  _CLK : bool;
  _INIT : bool;
  elevators : DATA_TYPES__QUAD_Elevators__treal;
  ailerons : DATA_TYPES__QUAD_Ailerons__treal;
  rudders : DATA_TYPES__QUAD_Rudders__treal;
  flaps : DATA_TYPES__QUAD_Flaps__treal;
  spoilers : DATA_TYPES__QUAD_Spoilers__treal;
  stabilizers : DATA_TYPES__QUAD_Stabilizer__treal;
  elevators_fault : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_fault : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_fault : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_fault : DATA_TYPES__QUAD_Flaps__tbool;
  spoilers_fault : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_fault : DATA_TYPES__QUAD_Stabilizer__tbool;
  elevators_sig_tol : DATA_TYPES__Elevators__treal;
  ailerons_sig_tol : DATA_TYPES__Ailerons__treal;
  rudders_sig_tol : DATA_TYPES__Rudders__treal;
  flaps_sig_tol : DATA_TYPES__Flaps__treal;
  spoilers_sig_tol : DATA_TYPES__Spoilers__treal;
  stabilizers_sig_tol : DATA_TYPES__Stabilizer__treal;
  elevators_select : DATA_TYPES__Elevators__treal;
  ailerons_select : DATA_TYPES__Ailerons__treal;
  rudders_select : DATA_TYPES__Rudders__treal;
  flaps_select : DATA_TYPES__Flaps__treal;
  spoilers_select : DATA_TYPES__Spoilers__treal;
  stabilizers_select : DATA_TYPES__Stabilizer__treal
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((((((((((((((_CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, elevators.EL1.ELLOB, elevators.EL2.ELLOB, elevators.EL3.ELLOB, elevators.EL4.ELLOB, elevators_fault.EL1.ELLOB, elevators_fault.EL2.ELLOB, elevators_fault.EL3.ELLOB, elevators_fault.EL4.ELLOB, elevators_sig_tol.ELLOB, elevators_select.ELLOB) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, elevators.EL1.ELLIB, elevators.EL2.ELLIB, elevators.EL3.ELLIB, elevators.EL4.ELLIB, elevators_fault.EL1.ELLIB, elevators_fault.EL2.ELLIB, elevators_fault.EL3.ELLIB, elevators_fault.EL4.ELLIB, elevators_sig_tol.ELLIB, elevators_select.ELLIB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, elevators.EL1.ELROB, elevators.EL2.ELROB, elevators.EL3.ELROB, elevators.EL4.ELROB, elevators_fault.EL1.ELROB, elevators_fault.EL2.ELROB, elevators_fault.EL3.ELROB, elevators_fault.EL4.ELROB, elevators_sig_tol.ELROB, elevators_select.ELROB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, elevators.EL1.ELRIB, elevators.EL2.ELRIB, elevators.EL3.ELRIB, elevators.EL4.ELRIB, elevators_fault.EL1.ELRIB, elevators_fault.EL2.ELRIB, elevators_fault.EL3.ELRIB, elevators_fault.EL4.ELRIB, elevators_sig_tol.ELRIB, elevators_select.ELRIB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, ailerons.AIL1.AILL, ailerons.AIL2.AILL, ailerons.AIL3.AILL, ailerons.AIL4.AILL, ailerons_fault.AIL1.AILL, ailerons_fault.AIL2.AILL, ailerons_fault.AIL3.AILL, ailerons_fault.AIL4.AILL, ailerons_sig_tol.AILL, ailerons_select.AILL)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, ailerons.AIL1.AILR, ailerons.AIL2.AILR, ailerons.AIL3.AILR, ailerons.AIL4.AILR, ailerons_fault.AIL1.AILR, ailerons_fault.AIL2.AILR, ailerons_fault.AIL3.AILR, ailerons_fault.AIL4.AILR, ailerons_sig_tol.AILR, ailerons_select.AILR)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, rudders.RUDD1.RUDU, rudders.RUDD2.RUDU, rudders.RUDD3.RUDU, rudders.RUDD4.RUDU, rudders_fault.RUDD1.RUDU, rudders_fault.RUDD2.RUDU, rudders_fault.RUDD3.RUDU, rudders_fault.RUDD4.RUDU, rudders_sig_tol.RUDU, rudders_select.RUDU)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, rudders.RUDD1.RUDL, rudders.RUDD2.RUDL, rudders.RUDD3.RUDL, rudders.RUDD4.RUDL, rudders_fault.RUDD1.RUDL, rudders_fault.RUDD2.RUDL, rudders_fault.RUDD3.RUDL, rudders_fault.RUDD4.RUDL, rudders_sig_tol.RUDL, rudders_select.RUDL)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, flaps.FLAPS1.FLLOB, flaps.FLAPS2.FLLOB, flaps.FLAPS3.FLLOB, flaps.FLAPS4.FLLOB, flaps_fault.FLAPS1.FLLOB, flaps_fault.FLAPS2.FLLOB, flaps_fault.FLAPS3.FLLOB, flaps_fault.FLAPS4.FLLOB, flaps_sig_tol.FLLOB, flaps_select.FLLOB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, flaps.FLAPS1.FLLIB, flaps.FLAPS2.FLLIB, flaps.FLAPS3.FLLIB, flaps.FLAPS4.FLLIB, flaps_fault.FLAPS1.FLLIB, flaps_fault.FLAPS2.FLLIB, flaps_fault.FLAPS3.FLLIB, flaps_fault.FLAPS4.FLLIB, flaps_sig_tol.FLLIB, flaps_select.FLLIB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, flaps.FLAPS1.FLROB, flaps.FLAPS2.FLROB, flaps.FLAPS3.FLROB, flaps.FLAPS4.FLROB, flaps_fault.FLAPS1.FLROB, flaps_fault.FLAPS2.FLROB, flaps_fault.FLAPS3.FLROB, flaps_fault.FLAPS4.FLROB, flaps_sig_tol.FLROB, flaps_select.FLROB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, flaps.FLAPS1.FLRIB, flaps.FLAPS2.FLRIB, flaps.FLAPS3.FLRIB, flaps.FLAPS4.FLRIB, flaps_fault.FLAPS1.FLRIB, flaps_fault.FLAPS2.FLRIB, flaps_fault.FLAPS3.FLRIB, flaps_fault.FLAPS4.FLRIB, flaps_sig_tol.FLRIB, flaps_select.FLRIB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, spoilers.SPOIL1.SPLOB, spoilers.SPOIL2.SPLOB, spoilers.SPOIL3.SPLOB, spoilers.SPOIL4.SPLOB, spoilers_fault.SPOIL1.SPLOB, spoilers_fault.SPOIL2.SPLOB, spoilers_fault.SPOIL3.SPLOB, spoilers_fault.SPOIL4.SPLOB, spoilers_sig_tol.SPLOB, spoilers_select.SPLOB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, spoilers.SPOIL1.SPLIB, spoilers.SPOIL2.SPLIB, spoilers.SPOIL3.SPLIB, spoilers.SPOIL4.SPLIB, spoilers_fault.SPOIL1.SPLIB, spoilers_fault.SPOIL2.SPLIB, spoilers_fault.SPOIL3.SPLIB, spoilers_fault.SPOIL4.SPLIB, spoilers_sig_tol.SPLIB, spoilers_select.SPLIB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, spoilers.SPOIL1.SPROB, spoilers.SPOIL2.SPROB, spoilers.SPOIL3.SPROB, spoilers.SPOIL4.SPROB, spoilers_fault.SPOIL1.SPROB, spoilers_fault.SPOIL2.SPROB, spoilers_fault.SPOIL3.SPROB, spoilers_fault.SPOIL4.SPROB, spoilers_sig_tol.SPROB, spoilers_select.SPROB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, spoilers.SPOIL1.SPRIB, spoilers.SPOIL2.SPRIB, spoilers.SPOIL3.SPRIB, spoilers.SPOIL4.SPRIB, spoilers_fault.SPOIL1.SPRIB, spoilers_fault.SPOIL2.SPRIB, spoilers_fault.SPOIL3.SPRIB, spoilers_fault.SPOIL4.SPRIB, spoilers_sig_tol.SPRIB, spoilers_select.SPRIB)) and _CLOCKED_ISAS_S_260__value_select(_CLK, _INIT, stabilizers.STAB1.VAL, stabilizers.STAB2.VAL, stabilizers.STAB3.VAL, stabilizers.STAB4.VAL, stabilizers_fault.STAB1, stabilizers_fault.STAB2, stabilizers_fault.STAB3, stabilizers_fault.STAB4, stabilizers_sig_tol.VAL, stabilizers_select.VAL)) else (pre ret));

tel;

node ISAS_S_240__fault(
  in_range : bool;
  failed_update : bool;
  within_tol : bool;
  fault_latch : bool
) returns (
  ret : bool
);
var
  consec_faults : int;
  cur_fault : bool;
  fault_latched : bool;
let
  cur_fault = (((not in_range) or failed_update) or (not within_tol));

  consec_faults = (if cur_fault then 1 else (0 -> (if cur_fault then ((pre consec_faults) + 1) else 0)));

  fault_latched = (false -> ((pre fault_latched) or (if (consec_faults = 5) then true else false)));

  ret = (fault_latch = (if fault_latched then true else cur_fault));

tel;

node _CLOCKED_ISAS_S_240__fault(
  _CLK : bool;
  _INIT : bool;
  in_range : bool;
  failed_update : bool;
  within_tol : bool;
  fault_latch : bool
) returns (
  ret : bool
);
var
  consec_faults : int;
  cur_fault : bool;
  fault_latched : bool;
  _STATE0 : int;
  _STATE1 : bool;
let
  cur_fault = (if _CLK then (((not in_range) or failed_update) or (not within_tol)) else (pre cur_fault));

  consec_faults = (if _CLK then (if cur_fault then 1 else (if _INIT then 0 else (if cur_fault then (_STATE0 + 1) else 0))) else (pre consec_faults));

  fault_latched = (if _CLK then (if _INIT then false else (_STATE1 or (if (consec_faults = 5) then true else false))) else (pre fault_latched));

  ret = (if _CLK then (fault_latch = (if fault_latched then true else cur_fault)) else (pre ret));

  _STATE0 = (if _CLK then (pre consec_faults) else (pre _STATE0));

  _STATE1 = (if _CLK then (pre fault_latched) else (pre _STATE1));

tel;

node ISAS_S_240__elevators_faults(
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  elevators_failed_update : DATA_TYPES__quad_bool;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  elevators_latched_faults : DATA_TYPES__QUAD_Elevators__tbool
) returns (
  ret : bool
);
let
  ret = (((((((((((((((ISAS_S_240__fault(elevators_in_range.EL1.ELLOB, elevators_failed_update.val1, elevators_in_range.EL1.ELLOB, elevators_latched_faults.EL1.ELLOB) and ISAS_S_240__fault(elevators_in_range.EL1.ELLIB, elevators_failed_update.val1, elevators_in_range.EL1.ELLIB, elevators_latched_faults.EL1.ELLIB)) and ISAS_S_240__fault(elevators_in_range.EL1.ELRIB, elevators_failed_update.val1, elevators_in_range.EL1.ELRIB, elevators_latched_faults.EL1.ELRIB)) and ISAS_S_240__fault(elevators_in_range.EL1.ELROB, elevators_failed_update.val1, elevators_in_range.EL1.ELROB, elevators_latched_faults.EL1.ELROB)) and ISAS_S_240__fault(elevators_in_range.EL2.ELLOB, elevators_failed_update.val2, elevators_in_range.EL2.ELLOB, elevators_latched_faults.EL2.ELLOB)) and ISAS_S_240__fault(elevators_in_range.EL2.ELLIB, elevators_failed_update.val2, elevators_in_range.EL2.ELLIB, elevators_latched_faults.EL2.ELLIB)) and ISAS_S_240__fault(elevators_in_range.EL2.ELRIB, elevators_failed_update.val2, elevators_in_range.EL2.ELRIB, elevators_latched_faults.EL2.ELRIB)) and ISAS_S_240__fault(elevators_in_range.EL2.ELROB, elevators_failed_update.val2, elevators_in_range.EL2.ELROB, elevators_latched_faults.EL2.ELROB)) and ISAS_S_240__fault(elevators_in_range.EL3.ELLOB, elevators_failed_update.val3, elevators_in_range.EL3.ELLOB, elevators_latched_faults.EL3.ELLOB)) and ISAS_S_240__fault(elevators_in_range.EL3.ELLIB, elevators_failed_update.val3, elevators_in_range.EL3.ELLIB, elevators_latched_faults.EL3.ELLIB)) and ISAS_S_240__fault(elevators_in_range.EL3.ELRIB, elevators_failed_update.val3, elevators_in_range.EL3.ELRIB, elevators_latched_faults.EL3.ELRIB)) and ISAS_S_240__fault(elevators_in_range.EL3.ELROB, elevators_failed_update.val3, elevators_in_range.EL3.ELROB, elevators_latched_faults.EL3.ELROB)) and ISAS_S_240__fault(elevators_in_range.EL4.ELLOB, elevators_failed_update.val4, elevators_in_range.EL4.ELLOB, elevators_latched_faults.EL4.ELLOB)) and ISAS_S_240__fault(elevators_in_range.EL4.ELLIB, elevators_failed_update.val4, elevators_in_range.EL4.ELLIB, elevators_latched_faults.EL4.ELLIB)) and ISAS_S_240__fault(elevators_in_range.EL4.ELRIB, elevators_failed_update.val4, elevators_in_range.EL4.ELRIB, elevators_latched_faults.EL4.ELRIB)) and ISAS_S_240__fault(elevators_in_range.EL4.ELROB, elevators_failed_update.val4, elevators_in_range.EL4.ELROB, elevators_latched_faults.EL4.ELROB));

tel;

node _CLOCKED_ISAS_S_240__elevators_faults(
  _CLK : bool;
  _INIT : bool;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  elevators_failed_update : DATA_TYPES__quad_bool;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  elevators_latched_faults : DATA_TYPES__QUAD_Elevators__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((((((((((_CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL1.ELLOB, elevators_failed_update.val1, elevators_in_range.EL1.ELLOB, elevators_latched_faults.EL1.ELLOB) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL1.ELLIB, elevators_failed_update.val1, elevators_in_range.EL1.ELLIB, elevators_latched_faults.EL1.ELLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL1.ELRIB, elevators_failed_update.val1, elevators_in_range.EL1.ELRIB, elevators_latched_faults.EL1.ELRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL1.ELROB, elevators_failed_update.val1, elevators_in_range.EL1.ELROB, elevators_latched_faults.EL1.ELROB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL2.ELLOB, elevators_failed_update.val2, elevators_in_range.EL2.ELLOB, elevators_latched_faults.EL2.ELLOB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL2.ELLIB, elevators_failed_update.val2, elevators_in_range.EL2.ELLIB, elevators_latched_faults.EL2.ELLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL2.ELRIB, elevators_failed_update.val2, elevators_in_range.EL2.ELRIB, elevators_latched_faults.EL2.ELRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL2.ELROB, elevators_failed_update.val2, elevators_in_range.EL2.ELROB, elevators_latched_faults.EL2.ELROB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL3.ELLOB, elevators_failed_update.val3, elevators_in_range.EL3.ELLOB, elevators_latched_faults.EL3.ELLOB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL3.ELLIB, elevators_failed_update.val3, elevators_in_range.EL3.ELLIB, elevators_latched_faults.EL3.ELLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL3.ELRIB, elevators_failed_update.val3, elevators_in_range.EL3.ELRIB, elevators_latched_faults.EL3.ELRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL3.ELROB, elevators_failed_update.val3, elevators_in_range.EL3.ELROB, elevators_latched_faults.EL3.ELROB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL4.ELLOB, elevators_failed_update.val4, elevators_in_range.EL4.ELLOB, elevators_latched_faults.EL4.ELLOB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL4.ELLIB, elevators_failed_update.val4, elevators_in_range.EL4.ELLIB, elevators_latched_faults.EL4.ELLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL4.ELRIB, elevators_failed_update.val4, elevators_in_range.EL4.ELRIB, elevators_latched_faults.EL4.ELRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, elevators_in_range.EL4.ELROB, elevators_failed_update.val4, elevators_in_range.EL4.ELROB, elevators_latched_faults.EL4.ELROB)) else (pre ret));

tel;

node ISAS_S_240__ailerons_faults(
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  ailerons_latched_faults : DATA_TYPES__QUAD_Ailerons__tbool
) returns (
  ret : bool
);
let
  ret = (((((((ISAS_S_240__fault(ailerons_in_range.AIL1.AILL, ailerons_failed_update.val1, ailerons_in_range.AIL1.AILL, ailerons_latched_faults.AIL1.AILL) and ISAS_S_240__fault(ailerons_in_range.AIL1.AILR, ailerons_failed_update.val1, ailerons_in_range.AIL1.AILR, ailerons_latched_faults.AIL1.AILR)) and ISAS_S_240__fault(ailerons_in_range.AIL2.AILL, ailerons_failed_update.val2, ailerons_in_range.AIL2.AILL, ailerons_latched_faults.AIL2.AILL)) and ISAS_S_240__fault(ailerons_in_range.AIL2.AILR, ailerons_failed_update.val2, ailerons_in_range.AIL2.AILR, ailerons_latched_faults.AIL2.AILR)) and ISAS_S_240__fault(ailerons_in_range.AIL3.AILL, ailerons_failed_update.val3, ailerons_in_range.AIL3.AILL, ailerons_latched_faults.AIL3.AILL)) and ISAS_S_240__fault(ailerons_in_range.AIL3.AILR, ailerons_failed_update.val3, ailerons_in_range.AIL3.AILR, ailerons_latched_faults.AIL3.AILR)) and ISAS_S_240__fault(ailerons_in_range.AIL4.AILL, ailerons_failed_update.val4, ailerons_in_range.AIL4.AILL, ailerons_latched_faults.AIL4.AILL)) and ISAS_S_240__fault(ailerons_in_range.AIL4.AILR, ailerons_failed_update.val4, ailerons_in_range.AIL4.AILR, ailerons_latched_faults.AIL4.AILR));

tel;

node _CLOCKED_ISAS_S_240__ailerons_faults(
  _CLK : bool;
  _INIT : bool;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  ailerons_latched_faults : DATA_TYPES__QUAD_Ailerons__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((_CLOCKED_ISAS_S_240__fault(_CLK, _INIT, ailerons_in_range.AIL1.AILL, ailerons_failed_update.val1, ailerons_in_range.AIL1.AILL, ailerons_latched_faults.AIL1.AILL) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, ailerons_in_range.AIL1.AILR, ailerons_failed_update.val1, ailerons_in_range.AIL1.AILR, ailerons_latched_faults.AIL1.AILR)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, ailerons_in_range.AIL2.AILL, ailerons_failed_update.val2, ailerons_in_range.AIL2.AILL, ailerons_latched_faults.AIL2.AILL)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, ailerons_in_range.AIL2.AILR, ailerons_failed_update.val2, ailerons_in_range.AIL2.AILR, ailerons_latched_faults.AIL2.AILR)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, ailerons_in_range.AIL3.AILL, ailerons_failed_update.val3, ailerons_in_range.AIL3.AILL, ailerons_latched_faults.AIL3.AILL)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, ailerons_in_range.AIL3.AILR, ailerons_failed_update.val3, ailerons_in_range.AIL3.AILR, ailerons_latched_faults.AIL3.AILR)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, ailerons_in_range.AIL4.AILL, ailerons_failed_update.val4, ailerons_in_range.AIL4.AILL, ailerons_latched_faults.AIL4.AILL)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, ailerons_in_range.AIL4.AILR, ailerons_failed_update.val4, ailerons_in_range.AIL4.AILR, ailerons_latched_faults.AIL4.AILR)) else (pre ret));

tel;

node ISAS_S_240__rudders_faults(
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  rudders_latched_faults : DATA_TYPES__QUAD_Rudders__tbool
) returns (
  ret : bool
);
let
  ret = (((((((ISAS_S_240__fault(rudders_in_range.RUDD1.RUDU, rudders_failed_update.val1, rudders_in_range.RUDD1.RUDU, rudders_latched_faults.RUDD1.RUDU) and ISAS_S_240__fault(rudders_in_range.RUDD1.RUDL, rudders_failed_update.val1, rudders_in_range.RUDD1.RUDL, rudders_latched_faults.RUDD1.RUDL)) and ISAS_S_240__fault(rudders_in_range.RUDD2.RUDU, rudders_failed_update.val2, rudders_in_range.RUDD2.RUDU, rudders_latched_faults.RUDD2.RUDU)) and ISAS_S_240__fault(rudders_in_range.RUDD2.RUDL, rudders_failed_update.val2, rudders_in_range.RUDD2.RUDL, rudders_latched_faults.RUDD2.RUDL)) and ISAS_S_240__fault(rudders_in_range.RUDD3.RUDU, rudders_failed_update.val3, rudders_in_range.RUDD3.RUDU, rudders_latched_faults.RUDD3.RUDU)) and ISAS_S_240__fault(rudders_in_range.RUDD3.RUDL, rudders_failed_update.val3, rudders_in_range.RUDD3.RUDL, rudders_latched_faults.RUDD3.RUDL)) and ISAS_S_240__fault(rudders_in_range.RUDD4.RUDU, rudders_failed_update.val4, rudders_in_range.RUDD4.RUDU, rudders_latched_faults.RUDD4.RUDU)) and ISAS_S_240__fault(rudders_in_range.RUDD4.RUDL, rudders_failed_update.val4, rudders_in_range.RUDD4.RUDL, rudders_latched_faults.RUDD4.RUDL));

tel;

node _CLOCKED_ISAS_S_240__rudders_faults(
  _CLK : bool;
  _INIT : bool;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  rudders_latched_faults : DATA_TYPES__QUAD_Rudders__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((_CLOCKED_ISAS_S_240__fault(_CLK, _INIT, rudders_in_range.RUDD1.RUDU, rudders_failed_update.val1, rudders_in_range.RUDD1.RUDU, rudders_latched_faults.RUDD1.RUDU) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, rudders_in_range.RUDD1.RUDL, rudders_failed_update.val1, rudders_in_range.RUDD1.RUDL, rudders_latched_faults.RUDD1.RUDL)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, rudders_in_range.RUDD2.RUDU, rudders_failed_update.val2, rudders_in_range.RUDD2.RUDU, rudders_latched_faults.RUDD2.RUDU)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, rudders_in_range.RUDD2.RUDL, rudders_failed_update.val2, rudders_in_range.RUDD2.RUDL, rudders_latched_faults.RUDD2.RUDL)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, rudders_in_range.RUDD3.RUDU, rudders_failed_update.val3, rudders_in_range.RUDD3.RUDU, rudders_latched_faults.RUDD3.RUDU)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, rudders_in_range.RUDD3.RUDL, rudders_failed_update.val3, rudders_in_range.RUDD3.RUDL, rudders_latched_faults.RUDD3.RUDL)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, rudders_in_range.RUDD4.RUDU, rudders_failed_update.val4, rudders_in_range.RUDD4.RUDU, rudders_latched_faults.RUDD4.RUDU)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, rudders_in_range.RUDD4.RUDL, rudders_failed_update.val4, rudders_in_range.RUDD4.RUDL, rudders_latched_faults.RUDD4.RUDL)) else (pre ret));

tel;

node ISAS_S_240__flaps_faults(
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  flaps_latched_faults : DATA_TYPES__QUAD_Flaps__tbool
) returns (
  ret : bool
);
let
  ret = (((((((((((((((ISAS_S_240__fault(flaps_in_range.FLAPS1.FLLOB, flaps_failed_update.val1, flaps_in_range.FLAPS1.FLLOB, flaps_latched_faults.FLAPS1.FLLOB) and ISAS_S_240__fault(flaps_in_range.FLAPS1.FLLIB, flaps_failed_update.val1, flaps_in_range.FLAPS1.FLLIB, flaps_latched_faults.FLAPS1.FLLIB)) and ISAS_S_240__fault(flaps_in_range.FLAPS1.FLRIB, flaps_failed_update.val1, flaps_in_range.FLAPS1.FLRIB, flaps_latched_faults.FLAPS1.FLRIB)) and ISAS_S_240__fault(flaps_in_range.FLAPS1.FLROB, flaps_failed_update.val1, flaps_in_range.FLAPS1.FLROB, flaps_latched_faults.FLAPS1.FLROB)) and ISAS_S_240__fault(flaps_in_range.FLAPS2.FLLOB, flaps_failed_update.val2, flaps_in_range.FLAPS2.FLLOB, flaps_latched_faults.FLAPS2.FLLOB)) and ISAS_S_240__fault(flaps_in_range.FLAPS2.FLLIB, flaps_failed_update.val2, flaps_in_range.FLAPS2.FLLIB, flaps_latched_faults.FLAPS2.FLLIB)) and ISAS_S_240__fault(flaps_in_range.FLAPS2.FLRIB, flaps_failed_update.val2, flaps_in_range.FLAPS2.FLRIB, flaps_latched_faults.FLAPS2.FLRIB)) and ISAS_S_240__fault(flaps_in_range.FLAPS2.FLROB, flaps_failed_update.val2, flaps_in_range.FLAPS2.FLROB, flaps_latched_faults.FLAPS2.FLROB)) and ISAS_S_240__fault(flaps_in_range.FLAPS3.FLLOB, flaps_failed_update.val3, flaps_in_range.FLAPS3.FLLOB, flaps_latched_faults.FLAPS3.FLLOB)) and ISAS_S_240__fault(flaps_in_range.FLAPS3.FLLIB, flaps_failed_update.val3, flaps_in_range.FLAPS3.FLLIB, flaps_latched_faults.FLAPS3.FLLIB)) and ISAS_S_240__fault(flaps_in_range.FLAPS3.FLRIB, flaps_failed_update.val3, flaps_in_range.FLAPS3.FLRIB, flaps_latched_faults.FLAPS3.FLRIB)) and ISAS_S_240__fault(flaps_in_range.FLAPS3.FLROB, flaps_failed_update.val3, flaps_in_range.FLAPS3.FLROB, flaps_latched_faults.FLAPS3.FLROB)) and ISAS_S_240__fault(flaps_in_range.FLAPS4.FLLOB, flaps_failed_update.val4, flaps_in_range.FLAPS4.FLLOB, flaps_latched_faults.FLAPS4.FLLOB)) and ISAS_S_240__fault(flaps_in_range.FLAPS4.FLLIB, flaps_failed_update.val4, flaps_in_range.FLAPS4.FLLIB, flaps_latched_faults.FLAPS4.FLLIB)) and ISAS_S_240__fault(flaps_in_range.FLAPS4.FLRIB, flaps_failed_update.val4, flaps_in_range.FLAPS4.FLRIB, flaps_latched_faults.FLAPS4.FLRIB)) and ISAS_S_240__fault(flaps_in_range.FLAPS4.FLROB, flaps_failed_update.val4, flaps_in_range.FLAPS4.FLROB, flaps_latched_faults.FLAPS4.FLROB));

tel;

node _CLOCKED_ISAS_S_240__flaps_faults(
  _CLK : bool;
  _INIT : bool;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  flaps_latched_faults : DATA_TYPES__QUAD_Flaps__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((((((((((_CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS1.FLLOB, flaps_failed_update.val1, flaps_in_range.FLAPS1.FLLOB, flaps_latched_faults.FLAPS1.FLLOB) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS1.FLLIB, flaps_failed_update.val1, flaps_in_range.FLAPS1.FLLIB, flaps_latched_faults.FLAPS1.FLLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS1.FLRIB, flaps_failed_update.val1, flaps_in_range.FLAPS1.FLRIB, flaps_latched_faults.FLAPS1.FLRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS1.FLROB, flaps_failed_update.val1, flaps_in_range.FLAPS1.FLROB, flaps_latched_faults.FLAPS1.FLROB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS2.FLLOB, flaps_failed_update.val2, flaps_in_range.FLAPS2.FLLOB, flaps_latched_faults.FLAPS2.FLLOB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS2.FLLIB, flaps_failed_update.val2, flaps_in_range.FLAPS2.FLLIB, flaps_latched_faults.FLAPS2.FLLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS2.FLRIB, flaps_failed_update.val2, flaps_in_range.FLAPS2.FLRIB, flaps_latched_faults.FLAPS2.FLRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS2.FLROB, flaps_failed_update.val2, flaps_in_range.FLAPS2.FLROB, flaps_latched_faults.FLAPS2.FLROB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS3.FLLOB, flaps_failed_update.val3, flaps_in_range.FLAPS3.FLLOB, flaps_latched_faults.FLAPS3.FLLOB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS3.FLLIB, flaps_failed_update.val3, flaps_in_range.FLAPS3.FLLIB, flaps_latched_faults.FLAPS3.FLLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS3.FLRIB, flaps_failed_update.val3, flaps_in_range.FLAPS3.FLRIB, flaps_latched_faults.FLAPS3.FLRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS3.FLROB, flaps_failed_update.val3, flaps_in_range.FLAPS3.FLROB, flaps_latched_faults.FLAPS3.FLROB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS4.FLLOB, flaps_failed_update.val4, flaps_in_range.FLAPS4.FLLOB, flaps_latched_faults.FLAPS4.FLLOB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS4.FLLIB, flaps_failed_update.val4, flaps_in_range.FLAPS4.FLLIB, flaps_latched_faults.FLAPS4.FLLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS4.FLRIB, flaps_failed_update.val4, flaps_in_range.FLAPS4.FLRIB, flaps_latched_faults.FLAPS4.FLRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, flaps_in_range.FLAPS4.FLROB, flaps_failed_update.val4, flaps_in_range.FLAPS4.FLROB, flaps_latched_faults.FLAPS4.FLROB)) else (pre ret));

tel;

node ISAS_S_240__spoilers_faults(
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  spoilers_latched_faults : DATA_TYPES__QUAD_Spoilers__tbool
) returns (
  ret : bool
);
let
  ret = (((((((((((((((ISAS_S_240__fault(spoilers_in_range.SPOIL1.SPLOB, spoilers_failed_update.val1, spoilers_in_range.SPOIL1.SPLOB, spoilers_latched_faults.SPOIL1.SPLOB) and ISAS_S_240__fault(spoilers_in_range.SPOIL1.SPLIB, spoilers_failed_update.val1, spoilers_in_range.SPOIL1.SPLIB, spoilers_latched_faults.SPOIL1.SPLIB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL1.SPRIB, spoilers_failed_update.val1, spoilers_in_range.SPOIL1.SPRIB, spoilers_latched_faults.SPOIL1.SPRIB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL1.SPROB, spoilers_failed_update.val1, spoilers_in_range.SPOIL1.SPROB, spoilers_latched_faults.SPOIL1.SPROB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL2.SPLOB, spoilers_failed_update.val2, spoilers_in_range.SPOIL2.SPLOB, spoilers_latched_faults.SPOIL2.SPLOB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL2.SPLIB, spoilers_failed_update.val2, spoilers_in_range.SPOIL2.SPLIB, spoilers_latched_faults.SPOIL2.SPLIB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL2.SPRIB, spoilers_failed_update.val2, spoilers_in_range.SPOIL2.SPRIB, spoilers_latched_faults.SPOIL2.SPRIB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL2.SPROB, spoilers_failed_update.val2, spoilers_in_range.SPOIL2.SPROB, spoilers_latched_faults.SPOIL2.SPROB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL3.SPLOB, spoilers_failed_update.val3, spoilers_in_range.SPOIL3.SPLOB, spoilers_latched_faults.SPOIL3.SPLOB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL3.SPLIB, spoilers_failed_update.val3, spoilers_in_range.SPOIL3.SPLIB, spoilers_latched_faults.SPOIL3.SPLIB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL3.SPRIB, spoilers_failed_update.val3, spoilers_in_range.SPOIL3.SPRIB, spoilers_latched_faults.SPOIL3.SPRIB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL3.SPROB, spoilers_failed_update.val3, spoilers_in_range.SPOIL3.SPROB, spoilers_latched_faults.SPOIL3.SPROB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL4.SPLOB, spoilers_failed_update.val4, spoilers_in_range.SPOIL4.SPLOB, spoilers_latched_faults.SPOIL4.SPLOB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL4.SPLIB, spoilers_failed_update.val4, spoilers_in_range.SPOIL4.SPLIB, spoilers_latched_faults.SPOIL4.SPLIB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL4.SPRIB, spoilers_failed_update.val4, spoilers_in_range.SPOIL4.SPRIB, spoilers_latched_faults.SPOIL4.SPRIB)) and ISAS_S_240__fault(spoilers_in_range.SPOIL4.SPROB, spoilers_failed_update.val4, spoilers_in_range.SPOIL4.SPROB, spoilers_latched_faults.SPOIL4.SPROB));

tel;

node _CLOCKED_ISAS_S_240__spoilers_faults(
  _CLK : bool;
  _INIT : bool;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  spoilers_latched_faults : DATA_TYPES__QUAD_Spoilers__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((((((((((_CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL1.SPLOB, spoilers_failed_update.val1, spoilers_in_range.SPOIL1.SPLOB, spoilers_latched_faults.SPOIL1.SPLOB) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL1.SPLIB, spoilers_failed_update.val1, spoilers_in_range.SPOIL1.SPLIB, spoilers_latched_faults.SPOIL1.SPLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL1.SPRIB, spoilers_failed_update.val1, spoilers_in_range.SPOIL1.SPRIB, spoilers_latched_faults.SPOIL1.SPRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL1.SPROB, spoilers_failed_update.val1, spoilers_in_range.SPOIL1.SPROB, spoilers_latched_faults.SPOIL1.SPROB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL2.SPLOB, spoilers_failed_update.val2, spoilers_in_range.SPOIL2.SPLOB, spoilers_latched_faults.SPOIL2.SPLOB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL2.SPLIB, spoilers_failed_update.val2, spoilers_in_range.SPOIL2.SPLIB, spoilers_latched_faults.SPOIL2.SPLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL2.SPRIB, spoilers_failed_update.val2, spoilers_in_range.SPOIL2.SPRIB, spoilers_latched_faults.SPOIL2.SPRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL2.SPROB, spoilers_failed_update.val2, spoilers_in_range.SPOIL2.SPROB, spoilers_latched_faults.SPOIL2.SPROB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL3.SPLOB, spoilers_failed_update.val3, spoilers_in_range.SPOIL3.SPLOB, spoilers_latched_faults.SPOIL3.SPLOB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL3.SPLIB, spoilers_failed_update.val3, spoilers_in_range.SPOIL3.SPLIB, spoilers_latched_faults.SPOIL3.SPLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL3.SPRIB, spoilers_failed_update.val3, spoilers_in_range.SPOIL3.SPRIB, spoilers_latched_faults.SPOIL3.SPRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL3.SPROB, spoilers_failed_update.val3, spoilers_in_range.SPOIL3.SPROB, spoilers_latched_faults.SPOIL3.SPROB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL4.SPLOB, spoilers_failed_update.val4, spoilers_in_range.SPOIL4.SPLOB, spoilers_latched_faults.SPOIL4.SPLOB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL4.SPLIB, spoilers_failed_update.val4, spoilers_in_range.SPOIL4.SPLIB, spoilers_latched_faults.SPOIL4.SPLIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL4.SPRIB, spoilers_failed_update.val4, spoilers_in_range.SPOIL4.SPRIB, spoilers_latched_faults.SPOIL4.SPRIB)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, spoilers_in_range.SPOIL4.SPROB, spoilers_failed_update.val4, spoilers_in_range.SPOIL4.SPROB, spoilers_latched_faults.SPOIL4.SPROB)) else (pre ret));

tel;

node ISAS_S_240__stabilizers_faults(
  stabilizers_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  stabilizers_failed_update : DATA_TYPES__quad_bool;
  stabilizers_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  stabilizers_latched_faults : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  ret : bool
);
let
  ret = (((((((((((((((ISAS_S_240__fault(stabilizers_in_range.STAB1, stabilizers_failed_update.val1, stabilizers_in_range.STAB1, stabilizers_latched_faults.STAB1) and ISAS_S_240__fault(stabilizers_in_range.STAB1, stabilizers_failed_update.val1, stabilizers_in_range.STAB1, stabilizers_latched_faults.STAB1)) and ISAS_S_240__fault(stabilizers_in_range.STAB1, stabilizers_failed_update.val1, stabilizers_in_range.STAB1, stabilizers_latched_faults.STAB1)) and ISAS_S_240__fault(stabilizers_in_range.STAB1, stabilizers_failed_update.val1, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and ISAS_S_240__fault(stabilizers_in_range.STAB2, stabilizers_failed_update.val2, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and ISAS_S_240__fault(stabilizers_in_range.STAB2, stabilizers_failed_update.val2, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and ISAS_S_240__fault(stabilizers_in_range.STAB2, stabilizers_failed_update.val2, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and ISAS_S_240__fault(stabilizers_in_range.STAB2, stabilizers_failed_update.val2, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and ISAS_S_240__fault(stabilizers_in_range.STAB3, stabilizers_failed_update.val3, stabilizers_in_range.STAB3, stabilizers_latched_faults.STAB3)) and ISAS_S_240__fault(stabilizers_in_range.STAB3, stabilizers_failed_update.val3, stabilizers_in_range.STAB3, stabilizers_latched_faults.STAB3)) and ISAS_S_240__fault(stabilizers_in_range.STAB3, stabilizers_failed_update.val3, stabilizers_in_range.STAB3, stabilizers_latched_faults.STAB3)) and ISAS_S_240__fault(stabilizers_in_range.STAB3, stabilizers_failed_update.val3, stabilizers_in_range.STAB3, stabilizers_latched_faults.STAB3)) and ISAS_S_240__fault(stabilizers_in_range.STAB4, stabilizers_failed_update.val4, stabilizers_in_range.STAB4, stabilizers_latched_faults.STAB4)) and ISAS_S_240__fault(stabilizers_in_range.STAB4, stabilizers_failed_update.val4, stabilizers_in_range.STAB4, stabilizers_latched_faults.STAB4)) and ISAS_S_240__fault(stabilizers_in_range.STAB4, stabilizers_failed_update.val4, stabilizers_in_range.STAB4, stabilizers_latched_faults.STAB4)) and ISAS_S_240__fault(stabilizers_in_range.STAB4, stabilizers_failed_update.val4, stabilizers_in_range.STAB4, stabilizers_latched_faults.STAB4));

tel;

node _CLOCKED_ISAS_S_240__stabilizers_faults(
  _CLK : bool;
  _INIT : bool;
  stabilizers_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  stabilizers_failed_update : DATA_TYPES__quad_bool;
  stabilizers_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  stabilizers_latched_faults : DATA_TYPES__QUAD_Stabilizer__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((((((((((_CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB1, stabilizers_failed_update.val1, stabilizers_in_range.STAB1, stabilizers_latched_faults.STAB1) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB1, stabilizers_failed_update.val1, stabilizers_in_range.STAB1, stabilizers_latched_faults.STAB1)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB1, stabilizers_failed_update.val1, stabilizers_in_range.STAB1, stabilizers_latched_faults.STAB1)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB1, stabilizers_failed_update.val1, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB2, stabilizers_failed_update.val2, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB2, stabilizers_failed_update.val2, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB2, stabilizers_failed_update.val2, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB2, stabilizers_failed_update.val2, stabilizers_in_range.STAB2, stabilizers_latched_faults.STAB2)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB3, stabilizers_failed_update.val3, stabilizers_in_range.STAB3, stabilizers_latched_faults.STAB3)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB3, stabilizers_failed_update.val3, stabilizers_in_range.STAB3, stabilizers_latched_faults.STAB3)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB3, stabilizers_failed_update.val3, stabilizers_in_range.STAB3, stabilizers_latched_faults.STAB3)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB3, stabilizers_failed_update.val3, stabilizers_in_range.STAB3, stabilizers_latched_faults.STAB3)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB4, stabilizers_failed_update.val4, stabilizers_in_range.STAB4, stabilizers_latched_faults.STAB4)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB4, stabilizers_failed_update.val4, stabilizers_in_range.STAB4, stabilizers_latched_faults.STAB4)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB4, stabilizers_failed_update.val4, stabilizers_in_range.STAB4, stabilizers_latched_faults.STAB4)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, stabilizers_in_range.STAB4, stabilizers_failed_update.val4, stabilizers_in_range.STAB4, stabilizers_latched_faults.STAB4)) else (pre ret));

tel;

node ISAS_S_240__aoa_faults(
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  aoa_latched_faults : DATA_TYPES__DUAL_AoA__tbool
) returns (
  ret : bool
);
let
  ret = (ISAS_S_240__fault(aoa_in_range.AOA1.AOA, aoa_failed_update.val1, aoa_within_tol.AOA1.AOA, aoa_latched_faults.AOA1.AOA) and ISAS_S_240__fault(aoa_in_range.AOA2.AOA, aoa_failed_update.val2, aoa_within_tol.AOA2.AOA, aoa_latched_faults.AOA2.AOA));

tel;

node _CLOCKED_ISAS_S_240__aoa_faults(
  _CLK : bool;
  _INIT : bool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  aoa_latched_faults : DATA_TYPES__DUAL_AoA__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (_CLOCKED_ISAS_S_240__fault(_CLK, _INIT, aoa_in_range.AOA1.AOA, aoa_failed_update.val1, aoa_within_tol.AOA1.AOA, aoa_latched_faults.AOA1.AOA) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, aoa_in_range.AOA2.AOA, aoa_failed_update.val2, aoa_within_tol.AOA2.AOA, aoa_latched_faults.AOA2.AOA)) else (pre ret));

tel;

node ISAS_S_240__air_data_faults(
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  air_data_latched_faults : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = (((((((ISAS_S_240__fault(air_data_in_range.AD1.TAT, air_data_failed_update.val1, air_data_within_tol.AD1.TAT, air_data_latched_faults.AD1.TAT) and ISAS_S_240__fault(air_data_in_range.AD1.TotPres, air_data_failed_update.val1, air_data_within_tol.AD1.TotPres, air_data_latched_faults.AD1.TotPres)) and ISAS_S_240__fault(air_data_in_range.AD1.Pres, air_data_failed_update.val1, air_data_within_tol.AD1.Pres, air_data_latched_faults.AD1.Pres)) and ISAS_S_240__fault(air_data_in_range.AD1.Temp, air_data_failed_update.val1, air_data_within_tol.AD1.Temp, air_data_latched_faults.AD1.Temp)) and ISAS_S_240__fault(air_data_in_range.AD2.TAT, air_data_failed_update.val2, air_data_within_tol.AD2.TAT, air_data_latched_faults.AD2.TAT)) and ISAS_S_240__fault(air_data_in_range.AD2.TotPres, air_data_failed_update.val2, air_data_within_tol.AD2.TotPres, air_data_latched_faults.AD2.TotPres)) and ISAS_S_240__fault(air_data_in_range.AD2.Pres, air_data_failed_update.val2, air_data_within_tol.AD2.Pres, air_data_latched_faults.AD2.Pres)) and ISAS_S_240__fault(air_data_in_range.AD2.Temp, air_data_failed_update.val2, air_data_within_tol.AD2.Temp, air_data_latched_faults.AD2.Temp));

tel;

node _CLOCKED_ISAS_S_240__air_data_faults(
  _CLK : bool;
  _INIT : bool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  air_data_latched_faults : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((_CLOCKED_ISAS_S_240__fault(_CLK, _INIT, air_data_in_range.AD1.TAT, air_data_failed_update.val1, air_data_within_tol.AD1.TAT, air_data_latched_faults.AD1.TAT) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, air_data_in_range.AD1.TotPres, air_data_failed_update.val1, air_data_within_tol.AD1.TotPres, air_data_latched_faults.AD1.TotPres)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, air_data_in_range.AD1.Pres, air_data_failed_update.val1, air_data_within_tol.AD1.Pres, air_data_latched_faults.AD1.Pres)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, air_data_in_range.AD1.Temp, air_data_failed_update.val1, air_data_within_tol.AD1.Temp, air_data_latched_faults.AD1.Temp)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, air_data_in_range.AD2.TAT, air_data_failed_update.val2, air_data_within_tol.AD2.TAT, air_data_latched_faults.AD2.TAT)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, air_data_in_range.AD2.TotPres, air_data_failed_update.val2, air_data_within_tol.AD2.TotPres, air_data_latched_faults.AD2.TotPres)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, air_data_in_range.AD2.Pres, air_data_failed_update.val2, air_data_within_tol.AD2.Pres, air_data_latched_faults.AD2.Pres)) and _CLOCKED_ISAS_S_240__fault(_CLK, _INIT, air_data_in_range.AD2.Temp, air_data_failed_update.val2, air_data_within_tol.AD2.Temp, air_data_latched_faults.AD2.Temp)) else (pre ret));

tel;

node ISAS_S_240__req(
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  elevators_failed_update : DATA_TYPES__quad_bool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  stabilizers_failed_update : DATA_TYPES__quad_bool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  elevators_latched_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_latched_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_latched_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_latched_faults : DATA_TYPES__QUAD_Flaps__tbool;
  spoilers_latched_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_latched_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  aoa_latched_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_latched_faults : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = (((((((ISAS_S_240__elevators_faults(elevators_within_tol, elevators_failed_update, elevators_in_range, elevators_latched_faults) and ISAS_S_240__ailerons_faults(ailerons_within_tol, ailerons_failed_update, ailerons_in_range, ailerons_latched_faults)) and ISAS_S_240__rudders_faults(rudders_within_tol, rudders_failed_update, rudders_in_range, rudders_latched_faults)) and ISAS_S_240__flaps_faults(flaps_within_tol, flaps_failed_update, flaps_in_range, flaps_latched_faults)) and ISAS_S_240__spoilers_faults(spoilers_within_tol, spoilers_failed_update, spoilers_in_range, spoilers_latched_faults)) and ISAS_S_240__stabilizers_faults(stabilizers_within_tol, stabilizers_failed_update, stabilizers_in_range, stabilizers_latched_faults)) and ISAS_S_240__aoa_faults(aoa_within_tol, aoa_failed_update, aoa_in_range, aoa_latched_faults)) and ISAS_S_240__air_data_faults(air_data_within_tol, air_data_failed_update, air_data_in_range, air_data_latched_faults));

tel;

node _CLOCKED_ISAS_S_240__req(
  _CLK : bool;
  _INIT : bool;
  elevators_within_tol : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_within_tol : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_within_tol : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_within_tol : DATA_TYPES__QUAD_Flaps__tbool;
  spoilers_within_tol : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_within_tol : DATA_TYPES__QUAD_Stabilizer__tbool;
  aoa_within_tol : DATA_TYPES__DUAL_AoA__tbool;
  air_data_within_tol : DATA_TYPES__DUAL_AirData__tbool;
  elevators_failed_update : DATA_TYPES__quad_bool;
  ailerons_failed_update : DATA_TYPES__quad_bool;
  rudders_failed_update : DATA_TYPES__quad_bool;
  flaps_failed_update : DATA_TYPES__quad_bool;
  spoilers_failed_update : DATA_TYPES__quad_bool;
  stabilizers_failed_update : DATA_TYPES__quad_bool;
  aoa_failed_update : DATA_TYPES__dual_bool;
  air_data_failed_update : DATA_TYPES__dual_bool;
  elevators_in_range : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_in_range : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_in_range : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_in_range : DATA_TYPES__QUAD_Flaps__tbool;
  spoilers_in_range : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_in_range : DATA_TYPES__QUAD_Stabilizer__tbool;
  aoa_in_range : DATA_TYPES__DUAL_AoA__tbool;
  air_data_in_range : DATA_TYPES__DUAL_AirData__tbool;
  elevators_latched_faults : DATA_TYPES__QUAD_Elevators__tbool;
  ailerons_latched_faults : DATA_TYPES__QUAD_Ailerons__tbool;
  rudders_latched_faults : DATA_TYPES__QUAD_Rudders__tbool;
  flaps_latched_faults : DATA_TYPES__QUAD_Flaps__tbool;
  spoilers_latched_faults : DATA_TYPES__QUAD_Spoilers__tbool;
  stabilizers_latched_faults : DATA_TYPES__QUAD_Stabilizer__tbool;
  aoa_latched_faults : DATA_TYPES__DUAL_AoA__tbool;
  air_data_latched_faults : DATA_TYPES__DUAL_AirData__tbool
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((_CLOCKED_ISAS_S_240__elevators_faults(_CLK, _INIT, elevators_within_tol, elevators_failed_update, elevators_in_range, elevators_latched_faults) and _CLOCKED_ISAS_S_240__ailerons_faults(_CLK, _INIT, ailerons_within_tol, ailerons_failed_update, ailerons_in_range, ailerons_latched_faults)) and _CLOCKED_ISAS_S_240__rudders_faults(_CLK, _INIT, rudders_within_tol, rudders_failed_update, rudders_in_range, rudders_latched_faults)) and _CLOCKED_ISAS_S_240__flaps_faults(_CLK, _INIT, flaps_within_tol, flaps_failed_update, flaps_in_range, flaps_latched_faults)) and _CLOCKED_ISAS_S_240__spoilers_faults(_CLK, _INIT, spoilers_within_tol, spoilers_failed_update, spoilers_in_range, spoilers_latched_faults)) and _CLOCKED_ISAS_S_240__stabilizers_faults(_CLK, _INIT, stabilizers_within_tol, stabilizers_failed_update, stabilizers_in_range, stabilizers_latched_faults)) and _CLOCKED_ISAS_S_240__aoa_faults(_CLK, _INIT, aoa_within_tol, aoa_failed_update, aoa_in_range, aoa_latched_faults)) and _CLOCKED_ISAS_S_240__air_data_faults(_CLK, _INIT, air_data_within_tol, air_data_failed_update, air_data_in_range, air_data_latched_faults)) else (pre ret));

tel;

node OSAS_S_100__req(
  act : real;
  act_ret : real
) returns (
  return : bool
);
var
  pre_act : real;
let
  pre_act = (0.0 -> (pre act));

  return = ((act_ret > (1.025 * pre_act)) or (act_ret < (0.975 * pre_act)));

tel;

node _CLOCKED_OSAS_S_100__req(
  _CLK : bool;
  _INIT : bool;
  act : real;
  act_ret : real
) returns (
  return : bool
);
var
  pre_act : real;
  _STATE0 : real;
let
  pre_act = (if _CLK then (if _INIT then 0.0 else _STATE0) else (pre pre_act));

  return = (if _CLK then ((act_ret > (1.025 * pre_act)) or (act_ret < (0.975 * pre_act))) else (pre return));

  _STATE0 = (if _CLK then (pre act) else (pre _STATE0));

tel;

node RUN_LENGTH__f(
  sig : bool
) returns (
  count : int
);
let
  count = (if sig then ((0 -> (pre count)) + 1) else 0);

tel;

node _CLOCKED_RUN_LENGTH__f(
  _CLK : bool;
  _INIT : bool;
  sig : bool
) returns (
  count : int
);
var
  _STATE0 : int;
let
  count = (if _CLK then (if sig then ((if _INIT then 0 else _STATE0) + 1) else 0) else (pre count));

  _STATE0 = (if _CLK then (pre count) else (pre _STATE0));

tel;

node OSAS_S_110__req_helper(
  act : real;
  act_ret : real;
  fail_count : int
) returns (
  res : bool
);
var
  fault : bool;
  previous_fail_count : int;
let
  fault = OSAS_S_100__req(act, act_ret);

  previous_fail_count = (0 -> (pre fail_count));

  res = (fail_count = (if fault then (previous_fail_count + 1) else (if (RUN_LENGTH__f((not fault)) >= 4) then 0 else previous_fail_count)));

tel;

node _CLOCKED_OSAS_S_110__req_helper(
  _CLK : bool;
  _INIT : bool;
  act : real;
  act_ret : real;
  fail_count : int
) returns (
  res : bool
);
var
  fault : bool;
  previous_fail_count : int;
  _STATE0 : int;
let
  fault = (if _CLK then _CLOCKED_OSAS_S_100__req(_CLK, _INIT, act, act_ret) else (pre fault));

  previous_fail_count = (if _CLK then (if _INIT then 0 else _STATE0) else (pre previous_fail_count));

  res = (if _CLK then (fail_count = (if fault then (previous_fail_count + 1) else (if (_CLOCKED_RUN_LENGTH__f(_CLK, _INIT, (not fault)) >= 4) then 0 else previous_fail_count))) else (pre res));

  _STATE0 = (if _CLK then (pre fail_count) else (pre _STATE0));

tel;

node OSAS_S_110__req(
  acts : DATA_TYPES__Actuators__impl;
  acts_ret : DATA_TYPES__Actuators__impl;
  fail_counts : DATA_TYPES__NumActuators__impl
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_110__req_helper(acts.AILL, acts_ret.AILL, fail_counts.AILL) and OSAS_S_110__req_helper(acts.AILR, acts_ret.AILR, fail_counts.AILR)) and OSAS_S_110__req_helper(acts.BRAKE, acts_ret.BRAKE, fail_counts.BRAKE)) and OSAS_S_110__req_helper(acts.ELLIB, acts_ret.ELLIB, fail_counts.ELLIB)) and OSAS_S_110__req_helper(acts.ELLOB, acts_ret.ELLOB, fail_counts.ELLOB)) and OSAS_S_110__req_helper(acts.ELRIB, acts_ret.ELRIB, fail_counts.ELRIB)) and OSAS_S_110__req_helper(acts.ELROB, acts_ret.ELROB, fail_counts.ELROB)) and OSAS_S_110__req_helper(acts.FLAPLI, acts_ret.FLAPLI, fail_counts.FLAPLI)) and OSAS_S_110__req_helper(acts.FLAPLO, acts_ret.FLAPLO, fail_counts.FLAPLO)) and OSAS_S_110__req_helper(acts.FLAPRI, acts_ret.FLAPRI, fail_counts.FLAPRI)) and OSAS_S_110__req_helper(acts.FLAPRO, acts_ret.FLAPRO, fail_counts.FLAPRO)) and OSAS_S_110__req_helper(acts.GEAR, acts_ret.GEAR, fail_counts.GEAR)) and OSAS_S_110__req_helper(acts.RUDLO, acts_ret.RUDLO, fail_counts.RUDLO)) and OSAS_S_110__req_helper(acts.RUDUP, acts_ret.RUDUP, fail_counts.RUDUP)) and OSAS_S_110__req_helper(acts.SPLLIB, acts_ret.SPLLIB, fail_counts.SPLLIB)) and OSAS_S_110__req_helper(acts.SPLLOB, acts_ret.SPLLOB, fail_counts.SPLLOB)) and OSAS_S_110__req_helper(acts.SPLRIB, acts_ret.SPLRIB, fail_counts.SPLRIB)) and OSAS_S_110__req_helper(acts.SPLROB, acts_ret.SPLROB, fail_counts.SPLROB)) and OSAS_S_110__req_helper(acts.STEER, acts_ret.STEER, fail_counts.STEER)) and OSAS_S_110__req_helper(acts.THROTR, acts_ret.THROTR, fail_counts.THROTR)) and OSAS_S_110__req_helper(acts.THROTL, acts_ret.THROTL, fail_counts.THROTL));

tel;

node _CLOCKED_OSAS_S_110__req(
  _CLK : bool;
  _INIT : bool;
  acts : DATA_TYPES__Actuators__impl;
  acts_ret : DATA_TYPES__Actuators__impl;
  fail_counts : DATA_TYPES__NumActuators__impl
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.AILL, acts_ret.AILL, fail_counts.AILL) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.AILR, acts_ret.AILR, fail_counts.AILR)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.BRAKE, acts_ret.BRAKE, fail_counts.BRAKE)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.ELLIB, acts_ret.ELLIB, fail_counts.ELLIB)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.ELLOB, acts_ret.ELLOB, fail_counts.ELLOB)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.ELRIB, acts_ret.ELRIB, fail_counts.ELRIB)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.ELROB, acts_ret.ELROB, fail_counts.ELROB)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.FLAPLI, acts_ret.FLAPLI, fail_counts.FLAPLI)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.FLAPLO, acts_ret.FLAPLO, fail_counts.FLAPLO)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.FLAPRI, acts_ret.FLAPRI, fail_counts.FLAPRI)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.FLAPRO, acts_ret.FLAPRO, fail_counts.FLAPRO)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.GEAR, acts_ret.GEAR, fail_counts.GEAR)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.RUDLO, acts_ret.RUDLO, fail_counts.RUDLO)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.RUDUP, acts_ret.RUDUP, fail_counts.RUDUP)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.SPLLIB, acts_ret.SPLLIB, fail_counts.SPLLIB)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.SPLLOB, acts_ret.SPLLOB, fail_counts.SPLLOB)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.SPLRIB, acts_ret.SPLRIB, fail_counts.SPLRIB)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.SPLROB, acts_ret.SPLROB, fail_counts.SPLROB)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.STEER, acts_ret.STEER, fail_counts.STEER)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.THROTR, acts_ret.THROTR, fail_counts.THROTR)) and _CLOCKED_OSAS_S_110__req_helper(_CLK, _INIT, acts.THROTL, acts_ret.THROTL, fail_counts.THROTL)) else (pre res));

tel;

node OCCURRED__f(
  cond : bool
) returns (
  h : bool
);
let
  h = (cond or (cond -> (pre h)));

tel;

node _CLOCKED_OCCURRED__f(
  _CLK : bool;
  _INIT : bool;
  cond : bool
) returns (
  h : bool
);
var
  _STATE0 : bool;
let
  h = (if _CLK then (cond or (if _INIT then cond else _STATE0)) else (pre h));

  _STATE0 = (if _CLK then (pre h) else (pre _STATE0));

tel;

node OSAS_S_120__req_helper(
  act : real;
  act_ret : real;
  fail : bool
) returns (
  res : bool
);
let
  res = (fail = (if OCCURRED__f((RUN_LENGTH__f(OSAS_S_100__req(act, act_ret)) >= 5)) then true else (false -> (pre fail))));

tel;

node _CLOCKED_OSAS_S_120__req_helper(
  _CLK : bool;
  _INIT : bool;
  act : real;
  act_ret : real;
  fail : bool
) returns (
  res : bool
);
var
  _STATE0 : bool;
let
  res = (if _CLK then (fail = (if _CLOCKED_OCCURRED__f(_CLK, _INIT, (_CLOCKED_RUN_LENGTH__f(_CLK, _INIT, _CLOCKED_OSAS_S_100__req(_CLK, _INIT, act, act_ret)) >= 5)) then true else (if _INIT then false else _STATE0))) else (pre res));

  _STATE0 = (if _CLK then (pre fail) else (pre _STATE0));

tel;

node OSAS_S_120__req(
  acts : DATA_TYPES__Actuators__impl;
  acts_ret : DATA_TYPES__Actuators__impl;
  fails : DATA_TYPES__BoolActuators__impl
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_120__req_helper(acts.AILL, acts_ret.AILL, fails.AILL) and OSAS_S_120__req_helper(acts.AILR, acts_ret.AILR, fails.AILR)) and OSAS_S_120__req_helper(acts.BRAKE, acts_ret.BRAKE, fails.BRAKE)) and OSAS_S_120__req_helper(acts.ELLIB, acts_ret.ELLIB, fails.ELLIB)) and OSAS_S_120__req_helper(acts.ELLOB, acts_ret.ELLOB, fails.ELLOB)) and OSAS_S_120__req_helper(acts.ELRIB, acts_ret.ELRIB, fails.ELRIB)) and OSAS_S_120__req_helper(acts.ELROB, acts_ret.ELROB, fails.ELROB)) and OSAS_S_120__req_helper(acts.FLAPLI, acts_ret.FLAPLI, fails.FLAPLI)) and OSAS_S_120__req_helper(acts.FLAPLO, acts_ret.FLAPLO, fails.FLAPLO)) and OSAS_S_120__req_helper(acts.FLAPRI, acts_ret.FLAPRI, fails.FLAPRI)) and OSAS_S_120__req_helper(acts.FLAPRO, acts_ret.FLAPRO, fails.FLAPRO)) and OSAS_S_120__req_helper(acts.GEAR, acts_ret.GEAR, fails.GEAR)) and OSAS_S_120__req_helper(acts.RUDLO, acts_ret.RUDLO, fails.RUDLO)) and OSAS_S_120__req_helper(acts.RUDUP, acts_ret.RUDUP, fails.RUDUP)) and OSAS_S_120__req_helper(acts.SPLLIB, acts_ret.SPLLIB, fails.SPLLIB)) and OSAS_S_120__req_helper(acts.SPLLOB, acts_ret.SPLLOB, fails.SPLLOB)) and OSAS_S_120__req_helper(acts.SPLRIB, acts_ret.SPLRIB, fails.SPLRIB)) and OSAS_S_120__req_helper(acts.SPLROB, acts_ret.SPLROB, fails.SPLROB)) and OSAS_S_120__req_helper(acts.STEER, acts_ret.STEER, fails.STEER)) and OSAS_S_120__req_helper(acts.THROTR, acts_ret.THROTR, fails.THROTR)) and OSAS_S_120__req_helper(acts.THROTL, acts_ret.THROTL, fails.THROTL));

tel;

node _CLOCKED_OSAS_S_120__req(
  _CLK : bool;
  _INIT : bool;
  acts : DATA_TYPES__Actuators__impl;
  acts_ret : DATA_TYPES__Actuators__impl;
  fails : DATA_TYPES__BoolActuators__impl
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.AILL, acts_ret.AILL, fails.AILL) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.AILR, acts_ret.AILR, fails.AILR)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.BRAKE, acts_ret.BRAKE, fails.BRAKE)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.ELLIB, acts_ret.ELLIB, fails.ELLIB)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.ELLOB, acts_ret.ELLOB, fails.ELLOB)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.ELRIB, acts_ret.ELRIB, fails.ELRIB)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.ELROB, acts_ret.ELROB, fails.ELROB)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.FLAPLI, acts_ret.FLAPLI, fails.FLAPLI)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.FLAPLO, acts_ret.FLAPLO, fails.FLAPLO)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.FLAPRI, acts_ret.FLAPRI, fails.FLAPRI)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.FLAPRO, acts_ret.FLAPRO, fails.FLAPRO)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.GEAR, acts_ret.GEAR, fails.GEAR)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.RUDLO, acts_ret.RUDLO, fails.RUDLO)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.RUDUP, acts_ret.RUDUP, fails.RUDUP)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.SPLLIB, acts_ret.SPLLIB, fails.SPLLIB)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.SPLLOB, acts_ret.SPLLOB, fails.SPLLOB)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.SPLRIB, acts_ret.SPLRIB, fails.SPLRIB)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.SPLROB, acts_ret.SPLROB, fails.SPLROB)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.STEER, acts_ret.STEER, fails.STEER)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.THROTR, acts_ret.THROTR, fails.THROTR)) and _CLOCKED_OSAS_S_120__req_helper(_CLK, _INIT, acts.THROTL, acts_ret.THROTL, fails.THROTL)) else (pre res));

tel;

node OSAS_S_140__req_helper(
  act : real;
  fail : bool
) returns (
  res : bool
);
let
  res = (fail => (act = 0.0));

tel;

node _CLOCKED_OSAS_S_140__req_helper(
  _CLK : bool;
  _INIT : bool;
  act : real;
  fail : bool
) returns (
  res : bool
);
let
  res = (if _CLK then (fail => (act = 0.0)) else (pre res));

tel;

node OSAS_S_140__req(
  acts : DATA_TYPES__Actuators__impl;
  fails : DATA_TYPES__BoolActuators__impl
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_140__req_helper(acts.AILL, fails.AILL) and OSAS_S_140__req_helper(acts.AILR, fails.AILR)) and OSAS_S_140__req_helper(acts.BRAKE, fails.BRAKE)) and OSAS_S_140__req_helper(acts.ELLIB, fails.ELLIB)) and OSAS_S_140__req_helper(acts.ELLOB, fails.ELLOB)) and OSAS_S_140__req_helper(acts.ELRIB, fails.ELRIB)) and OSAS_S_140__req_helper(acts.ELROB, fails.ELROB)) and OSAS_S_140__req_helper(acts.FLAPLI, fails.FLAPLI)) and OSAS_S_140__req_helper(acts.FLAPLO, fails.FLAPLO)) and OSAS_S_140__req_helper(acts.FLAPRI, fails.FLAPRI)) and OSAS_S_140__req_helper(acts.FLAPRO, fails.FLAPRO)) and OSAS_S_140__req_helper(acts.GEAR, fails.GEAR)) and OSAS_S_140__req_helper(acts.RUDLO, fails.RUDLO)) and OSAS_S_140__req_helper(acts.RUDUP, fails.RUDUP)) and OSAS_S_140__req_helper(acts.SPLLIB, fails.SPLLIB)) and OSAS_S_140__req_helper(acts.SPLLOB, fails.SPLLOB)) and OSAS_S_140__req_helper(acts.SPLRIB, fails.SPLRIB)) and OSAS_S_140__req_helper(acts.SPLROB, fails.SPLROB)) and OSAS_S_140__req_helper(acts.STEER, fails.STEER)) and OSAS_S_140__req_helper(acts.THROTR, fails.THROTR)) and OSAS_S_140__req_helper(acts.THROTL, fails.THROTL));

tel;

node _CLOCKED_OSAS_S_140__req(
  _CLK : bool;
  _INIT : bool;
  acts : DATA_TYPES__Actuators__impl;
  fails : DATA_TYPES__BoolActuators__impl
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.AILL, fails.AILL) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.AILR, fails.AILR)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.BRAKE, fails.BRAKE)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.ELLIB, fails.ELLIB)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.ELLOB, fails.ELLOB)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.ELRIB, fails.ELRIB)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.ELROB, fails.ELROB)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.FLAPLI, fails.FLAPLI)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.FLAPLO, fails.FLAPLO)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.FLAPRI, fails.FLAPRI)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.FLAPRO, fails.FLAPRO)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.GEAR, fails.GEAR)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.RUDLO, fails.RUDLO)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.RUDUP, fails.RUDUP)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.SPLLIB, fails.SPLLIB)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.SPLLOB, fails.SPLLOB)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.SPLRIB, fails.SPLRIB)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.SPLROB, fails.SPLROB)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.STEER, fails.STEER)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.THROTR, fails.THROTR)) and _CLOCKED_OSAS_S_140__req_helper(_CLK, _INIT, acts.THROTL, fails.THROTL)) else (pre res));

tel;

node OSAS_S_170__req_helper(
  act_gain : real;
  ccdl_failed : bool
) returns (
  res : bool
);
let
  res = (ccdl_failed => (act_gain = 1.0));

tel;

node _CLOCKED_OSAS_S_170__req_helper(
  _CLK : bool;
  _INIT : bool;
  act_gain : real;
  ccdl_failed : bool
) returns (
  res : bool
);
let
  res = (if _CLK then (ccdl_failed => (act_gain = 1.0)) else (pre res));

tel;

node OSAS_S_170__req(
  acts_gain : DATA_TYPES__Actuators__impl;
  ccdl_failed : bool
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_170__req_helper(acts_gain.AILL, ccdl_failed) and OSAS_S_170__req_helper(acts_gain.AILR, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.BRAKE, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.ELLIB, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.ELLOB, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.ELRIB, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.ELROB, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.FLAPLI, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.FLAPLO, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.FLAPRI, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.FLAPRO, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.GEAR, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.RUDLO, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.RUDUP, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.SPLLIB, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.SPLLOB, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.SPLRIB, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.SPLROB, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.STEER, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.THROTR, ccdl_failed)) and OSAS_S_170__req_helper(acts_gain.THROTL, ccdl_failed));

tel;

node _CLOCKED_OSAS_S_170__req(
  _CLK : bool;
  _INIT : bool;
  acts_gain : DATA_TYPES__Actuators__impl;
  ccdl_failed : bool
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.AILL, ccdl_failed) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.AILR, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.BRAKE, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.ELLIB, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.ELLOB, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.ELRIB, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.ELROB, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.FLAPLI, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.FLAPLO, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.FLAPRI, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.FLAPRO, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.GEAR, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.RUDLO, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.RUDUP, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.SPLLIB, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.SPLLOB, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.SPLRIB, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.SPLROB, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.STEER, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.THROTR, ccdl_failed)) and _CLOCKED_OSAS_S_170__req_helper(_CLK, _INIT, acts_gain.THROTL, ccdl_failed)) else (pre res));

tel;

node OSAS_S_180__actuator_gain(
  num_valid : int
) returns (
  result : real
);
let
  result = (if (num_valid = 3) then 1.0 else (if (num_valid = 2) then (4.0 / 3.0) else (if (num_valid = 1) then 2.0 else (if (num_valid = 0) then 4.0 else 1.0))));

tel;

node _CLOCKED_OSAS_S_180__actuator_gain(
  _CLK : bool;
  _INIT : bool;
  num_valid : int
) returns (
  result : real
);
let
  result = (if _CLK then (if (num_valid = 3) then 1.0 else (if (num_valid = 2) then (4.0 / 3.0) else (if (num_valid = 1) then 2.0 else (if (num_valid = 0) then 4.0 else 1.0)))) else (pre result));

tel;

node OSAS_S_180__req_helper(
  act_gain : real;
  num_valid : int;
  ccdl_failed : bool
) returns (
  res : bool
);
let
  res = ((not ccdl_failed) => (act_gain = OSAS_S_180__actuator_gain(num_valid)));

tel;

node _CLOCKED_OSAS_S_180__req_helper(
  _CLK : bool;
  _INIT : bool;
  act_gain : real;
  num_valid : int;
  ccdl_failed : bool
) returns (
  res : bool
);
let
  res = (if _CLK then ((not ccdl_failed) => (act_gain = _CLOCKED_OSAS_S_180__actuator_gain(_CLK, _INIT, num_valid))) else (pre res));

tel;

node OSAS_S_180__req(
  acts_gain : DATA_TYPES__Actuators__impl;
  acts_num_valid : DATA_TYPES__NumActuators__impl;
  ccdl_failed : bool
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_180__req_helper(acts_gain.AILL, acts_num_valid.AILL, ccdl_failed) and OSAS_S_180__req_helper(acts_gain.AILR, acts_num_valid.AILR, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.BRAKE, acts_num_valid.BRAKE, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.ELLIB, acts_num_valid.ELLIB, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.ELLOB, acts_num_valid.ELLOB, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.ELRIB, acts_num_valid.ELRIB, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.ELROB, acts_num_valid.ELROB, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.FLAPLI, acts_num_valid.FLAPLI, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.FLAPLO, acts_num_valid.FLAPLO, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.FLAPRI, acts_num_valid.FLAPRI, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.FLAPRO, acts_num_valid.FLAPRO, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.GEAR, acts_num_valid.GEAR, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.RUDLO, acts_num_valid.RUDLO, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.RUDUP, acts_num_valid.RUDUP, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.SPLLIB, acts_num_valid.SPLLIB, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.SPLLOB, acts_num_valid.SPLLOB, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.SPLRIB, acts_num_valid.SPLRIB, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.SPLROB, acts_num_valid.SPLROB, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.STEER, acts_num_valid.STEER, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.THROTR, acts_num_valid.THROTR, ccdl_failed)) and OSAS_S_180__req_helper(acts_gain.THROTL, acts_num_valid.THROTL, ccdl_failed));

tel;

node _CLOCKED_OSAS_S_180__req(
  _CLK : bool;
  _INIT : bool;
  acts_gain : DATA_TYPES__Actuators__impl;
  acts_num_valid : DATA_TYPES__NumActuators__impl;
  ccdl_failed : bool
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.AILL, acts_num_valid.AILL, ccdl_failed) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.AILR, acts_num_valid.AILR, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.BRAKE, acts_num_valid.BRAKE, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.ELLIB, acts_num_valid.ELLIB, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.ELLOB, acts_num_valid.ELLOB, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.ELRIB, acts_num_valid.ELRIB, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.ELROB, acts_num_valid.ELROB, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.FLAPLI, acts_num_valid.FLAPLI, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.FLAPLO, acts_num_valid.FLAPLO, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.FLAPRI, acts_num_valid.FLAPRI, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.FLAPRO, acts_num_valid.FLAPRO, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.GEAR, acts_num_valid.GEAR, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.RUDLO, acts_num_valid.RUDLO, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.RUDUP, acts_num_valid.RUDUP, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.SPLLIB, acts_num_valid.SPLLIB, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.SPLLOB, acts_num_valid.SPLLOB, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.SPLRIB, acts_num_valid.SPLRIB, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.SPLROB, acts_num_valid.SPLROB, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.STEER, acts_num_valid.STEER, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.THROTR, acts_num_valid.THROTR, ccdl_failed)) and _CLOCKED_OSAS_S_180__req_helper(_CLK, _INIT, acts_gain.THROTL, acts_num_valid.THROTL, ccdl_failed)) else (pre res));

tel;

node OSAS_S_190__req_helper(
  act_in : real;
  act_out : real;
  act_gain : real
) returns (
  res : bool
);
let
  res = (if (act_gain = 1.0) then (act_out = act_in) else (if (act_gain = 2.0) then (act_out = (act_in * 2.0)) else (if (act_gain = (4.0 / 3.0)) then (act_out = ((act_in * 4.0) / 3.0)) else (if (act_gain = 4.0) then (act_out = (act_in * 4.0)) else (act_out = 0.0)))));

tel;

node _CLOCKED_OSAS_S_190__req_helper(
  _CLK : bool;
  _INIT : bool;
  act_in : real;
  act_out : real;
  act_gain : real
) returns (
  res : bool
);
let
  res = (if _CLK then (if (act_gain = 1.0) then (act_out = act_in) else (if (act_gain = 2.0) then (act_out = (act_in * 2.0)) else (if (act_gain = (4.0 / 3.0)) then (act_out = ((act_in * 4.0) / 3.0)) else (if (act_gain = 4.0) then (act_out = (act_in * 4.0)) else (act_out = 0.0))))) else (pre res));

tel;

node OSAS_S_190__req(
  acts_in : DATA_TYPES__Actuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  acts_gain : DATA_TYPES__Actuators__impl
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_190__req_helper(acts_in.AILL, acts_out.AILL, acts_gain.AILL) and OSAS_S_190__req_helper(acts_in.AILR, acts_out.AILR, acts_gain.AILR)) and OSAS_S_190__req_helper(acts_in.BRAKE, acts_out.BRAKE, acts_gain.BRAKE)) and OSAS_S_190__req_helper(acts_in.ELLIB, acts_out.ELLIB, acts_gain.ELLIB)) and OSAS_S_190__req_helper(acts_in.ELLOB, acts_out.ELLOB, acts_gain.ELLOB)) and OSAS_S_190__req_helper(acts_in.ELRIB, acts_out.ELRIB, acts_gain.ELRIB)) and OSAS_S_190__req_helper(acts_in.ELROB, acts_out.ELROB, acts_gain.ELROB)) and OSAS_S_190__req_helper(acts_in.FLAPLI, acts_out.FLAPLI, acts_gain.FLAPLI)) and OSAS_S_190__req_helper(acts_in.FLAPLO, acts_out.FLAPLO, acts_gain.FLAPLO)) and OSAS_S_190__req_helper(acts_in.FLAPRI, acts_out.FLAPRI, acts_gain.FLAPRI)) and OSAS_S_190__req_helper(acts_in.FLAPRO, acts_out.FLAPRO, acts_gain.FLAPRO)) and OSAS_S_190__req_helper(acts_in.GEAR, acts_out.GEAR, acts_gain.GEAR)) and OSAS_S_190__req_helper(acts_in.RUDLO, acts_out.RUDLO, acts_gain.RUDLO)) and OSAS_S_190__req_helper(acts_in.RUDUP, acts_out.RUDUP, acts_gain.RUDUP)) and OSAS_S_190__req_helper(acts_in.SPLLIB, acts_out.SPLLIB, acts_gain.SPLLIB)) and OSAS_S_190__req_helper(acts_in.SPLLOB, acts_out.SPLLOB, acts_gain.SPLLOB)) and OSAS_S_190__req_helper(acts_in.SPLRIB, acts_out.SPLRIB, acts_gain.SPLRIB)) and OSAS_S_190__req_helper(acts_in.SPLROB, acts_out.SPLROB, acts_gain.SPLROB)) and OSAS_S_190__req_helper(acts_in.STEER, acts_out.STEER, acts_gain.STEER)) and OSAS_S_190__req_helper(acts_in.THROTR, acts_out.THROTR, acts_gain.THROTR)) and OSAS_S_190__req_helper(acts_in.THROTL, acts_out.THROTL, acts_gain.THROTL));

tel;

node _CLOCKED_OSAS_S_190__req(
  _CLK : bool;
  _INIT : bool;
  acts_in : DATA_TYPES__Actuators__impl;
  acts_out : DATA_TYPES__Actuators__impl;
  acts_gain : DATA_TYPES__Actuators__impl
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.AILL, acts_out.AILL, acts_gain.AILL) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.AILR, acts_out.AILR, acts_gain.AILR)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.BRAKE, acts_out.BRAKE, acts_gain.BRAKE)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.ELLIB, acts_out.ELLIB, acts_gain.ELLIB)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.ELLOB, acts_out.ELLOB, acts_gain.ELLOB)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.ELRIB, acts_out.ELRIB, acts_gain.ELRIB)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.ELROB, acts_out.ELROB, acts_gain.ELROB)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.FLAPLI, acts_out.FLAPLI, acts_gain.FLAPLI)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.FLAPLO, acts_out.FLAPLO, acts_gain.FLAPLO)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.FLAPRI, acts_out.FLAPRI, acts_gain.FLAPRI)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.FLAPRO, acts_out.FLAPRO, acts_gain.FLAPRO)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.GEAR, acts_out.GEAR, acts_gain.GEAR)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.RUDLO, acts_out.RUDLO, acts_gain.RUDLO)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.RUDUP, acts_out.RUDUP, acts_gain.RUDUP)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.SPLLIB, acts_out.SPLLIB, acts_gain.SPLLIB)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.SPLLOB, acts_out.SPLLOB, acts_gain.SPLLOB)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.SPLRIB, acts_out.SPLRIB, acts_gain.SPLRIB)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.SPLROB, acts_out.SPLROB, acts_gain.SPLROB)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.STEER, acts_out.STEER, acts_gain.STEER)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.THROTR, acts_out.THROTR, acts_gain.THROTR)) and _CLOCKED_OSAS_S_190__req_helper(_CLK, _INIT, acts_in.THROTL, acts_out.THROTL, acts_gain.THROTL)) else (pre res));

tel;

node OSAS_S_240__req_helper(
  act_gain : real;
  osas_failed : bool
) returns (
  res : bool
);
let
  res = (osas_failed => (act_gain = 0.0));

tel;

node _CLOCKED_OSAS_S_240__req_helper(
  _CLK : bool;
  _INIT : bool;
  act_gain : real;
  osas_failed : bool
) returns (
  res : bool
);
let
  res = (if _CLK then (osas_failed => (act_gain = 0.0)) else (pre res));

tel;

node OSAS_S_240__req(
  acts_gain : DATA_TYPES__Actuators__impl;
  osas_failed : bool
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_240__req_helper(acts_gain.AILL, osas_failed) and OSAS_S_240__req_helper(acts_gain.AILR, osas_failed)) and OSAS_S_240__req_helper(acts_gain.BRAKE, osas_failed)) and OSAS_S_240__req_helper(acts_gain.ELLIB, osas_failed)) and OSAS_S_240__req_helper(acts_gain.ELLOB, osas_failed)) and OSAS_S_240__req_helper(acts_gain.ELRIB, osas_failed)) and OSAS_S_240__req_helper(acts_gain.ELROB, osas_failed)) and OSAS_S_240__req_helper(acts_gain.FLAPLI, osas_failed)) and OSAS_S_240__req_helper(acts_gain.FLAPLO, osas_failed)) and OSAS_S_240__req_helper(acts_gain.FLAPRI, osas_failed)) and OSAS_S_240__req_helper(acts_gain.FLAPRO, osas_failed)) and OSAS_S_240__req_helper(acts_gain.GEAR, osas_failed)) and OSAS_S_240__req_helper(acts_gain.RUDLO, osas_failed)) and OSAS_S_240__req_helper(acts_gain.RUDUP, osas_failed)) and OSAS_S_240__req_helper(acts_gain.SPLLIB, osas_failed)) and OSAS_S_240__req_helper(acts_gain.SPLLOB, osas_failed)) and OSAS_S_240__req_helper(acts_gain.SPLRIB, osas_failed)) and OSAS_S_240__req_helper(acts_gain.SPLROB, osas_failed)) and OSAS_S_240__req_helper(acts_gain.STEER, osas_failed)) and OSAS_S_240__req_helper(acts_gain.THROTR, osas_failed)) and OSAS_S_240__req_helper(acts_gain.THROTL, osas_failed));

tel;

node _CLOCKED_OSAS_S_240__req(
  _CLK : bool;
  _INIT : bool;
  acts_gain : DATA_TYPES__Actuators__impl;
  osas_failed : bool
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.AILL, osas_failed) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.AILR, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.BRAKE, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.ELLIB, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.ELLOB, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.ELRIB, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.ELROB, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.FLAPLI, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.FLAPLO, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.FLAPRI, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.FLAPRO, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.GEAR, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.RUDLO, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.RUDUP, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.SPLLIB, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.SPLLOB, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.SPLRIB, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.SPLROB, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.STEER, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.THROTR, osas_failed)) and _CLOCKED_OSAS_S_240__req_helper(_CLK, _INIT, acts_gain.THROTL, osas_failed)) else (pre res));

tel;

node OSAS_S_250__req_helper(
  act_gain : real;
  ctrl_laws_failed : bool
) returns (
  res : bool
);
let
  res = (ctrl_laws_failed => (act_gain = 0.0));

tel;

node _CLOCKED_OSAS_S_250__req_helper(
  _CLK : bool;
  _INIT : bool;
  act_gain : real;
  ctrl_laws_failed : bool
) returns (
  res : bool
);
let
  res = (if _CLK then (ctrl_laws_failed => (act_gain = 0.0)) else (pre res));

tel;

node OSAS_S_250__req(
  acts_gain : DATA_TYPES__Actuators__impl;
  ctrl_laws_failed : bool
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_250__req_helper(acts_gain.AILL, ctrl_laws_failed) and OSAS_S_250__req_helper(acts_gain.AILR, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.BRAKE, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.ELLIB, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.ELLOB, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.ELRIB, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.ELROB, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.FLAPLI, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.FLAPLO, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.FLAPRI, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.FLAPRO, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.GEAR, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.RUDLO, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.RUDUP, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.SPLLIB, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.SPLLOB, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.SPLRIB, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.SPLROB, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.STEER, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.THROTR, ctrl_laws_failed)) and OSAS_S_250__req_helper(acts_gain.THROTL, ctrl_laws_failed));

tel;

node _CLOCKED_OSAS_S_250__req(
  _CLK : bool;
  _INIT : bool;
  acts_gain : DATA_TYPES__Actuators__impl;
  ctrl_laws_failed : bool
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.AILL, ctrl_laws_failed) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.AILR, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.BRAKE, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.ELLIB, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.ELLOB, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.ELRIB, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.ELROB, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.FLAPLI, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.FLAPLO, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.FLAPRI, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.FLAPRO, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.GEAR, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.RUDLO, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.RUDUP, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.SPLLIB, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.SPLLOB, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.SPLRIB, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.SPLROB, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.STEER, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.THROTR, ctrl_laws_failed)) and _CLOCKED_OSAS_S_250__req_helper(_CLK, _INIT, acts_gain.THROTL, ctrl_laws_failed)) else (pre res));

tel;

node OSAS_S_210_220_230__req_helper(
  sov1 : bool;
  sov2 : bool;
  isas_fail : bool;
  latched_fail : bool;
  ccdl_num_fail : int
) returns (
  res : bool
);
let
  res = (((sov1 = sov2) and (sov1 = true)) -> (if isas_fail then false else (if (latched_fail and (ccdl_num_fail >= 2)) then false else (pre sov1))));

tel;

node _CLOCKED_OSAS_S_210_220_230__req_helper(
  _CLK : bool;
  _INIT : bool;
  sov1 : bool;
  sov2 : bool;
  isas_fail : bool;
  latched_fail : bool;
  ccdl_num_fail : int
) returns (
  res : bool
);
var
  _STATE0 : bool;
let
  res = (if _CLK then (if _INIT then ((sov1 = sov2) and (sov1 = true)) else (if isas_fail then false else (if (latched_fail and (ccdl_num_fail >= 2)) then false else _STATE0))) else (pre res));

  _STATE0 = (if _CLK then (pre sov1) else (pre _STATE0));

tel;

node OSAS_S_210_220_230__req(
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl;
  isas_fails : DATA_TYPES__BoolActuators__impl;
  latched_fails : DATA_TYPES__BoolActuators__impl;
  ccdl_num_fails : DATA_TYPES__NumActuators__impl
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((OSAS_S_210_220_230__req_helper(sovs1.AILL, sovs2.AILL, isas_fails.AILL, latched_fails.AILL, ccdl_num_fails.AILL) and OSAS_S_210_220_230__req_helper(sovs1.AILR, sovs2.AILR, isas_fails.AILR, latched_fails.AILR, ccdl_num_fails.AILR)) and OSAS_S_210_220_230__req_helper(sovs1.BRAKE, sovs2.BRAKE, isas_fails.BRAKE, latched_fails.BRAKE, ccdl_num_fails.BRAKE)) and OSAS_S_210_220_230__req_helper(sovs1.ELLIB, sovs2.ELLIB, isas_fails.ELLIB, latched_fails.ELLIB, ccdl_num_fails.ELLIB)) and OSAS_S_210_220_230__req_helper(sovs1.ELLOB, sovs2.ELLOB, isas_fails.ELLOB, latched_fails.ELLOB, ccdl_num_fails.ELLOB)) and OSAS_S_210_220_230__req_helper(sovs1.ELRIB, sovs2.ELRIB, isas_fails.ELRIB, latched_fails.ELRIB, ccdl_num_fails.ELRIB)) and OSAS_S_210_220_230__req_helper(sovs1.ELROB, sovs2.ELROB, isas_fails.ELROB, latched_fails.ELROB, ccdl_num_fails.ELROB)) and OSAS_S_210_220_230__req_helper(sovs1.FLAPLI, sovs2.FLAPLI, isas_fails.FLAPLI, latched_fails.FLAPLI, ccdl_num_fails.FLAPLI)) and OSAS_S_210_220_230__req_helper(sovs1.FLAPLO, sovs2.FLAPLO, isas_fails.FLAPLO, latched_fails.FLAPLO, ccdl_num_fails.FLAPLO)) and OSAS_S_210_220_230__req_helper(sovs1.FLAPRI, sovs2.FLAPRI, isas_fails.FLAPRI, latched_fails.FLAPRI, ccdl_num_fails.FLAPRI)) and OSAS_S_210_220_230__req_helper(sovs1.FLAPRO, sovs2.FLAPRO, isas_fails.FLAPRO, latched_fails.FLAPRO, ccdl_num_fails.FLAPRO)) and OSAS_S_210_220_230__req_helper(sovs1.GEAR, sovs2.GEAR, isas_fails.GEAR, latched_fails.GEAR, ccdl_num_fails.GEAR)) and OSAS_S_210_220_230__req_helper(sovs1.RUDLO, sovs2.RUDLO, isas_fails.RUDLO, latched_fails.RUDLO, ccdl_num_fails.RUDLO)) and OSAS_S_210_220_230__req_helper(sovs1.RUDUP, sovs2.RUDUP, isas_fails.RUDUP, latched_fails.RUDUP, ccdl_num_fails.RUDUP)) and OSAS_S_210_220_230__req_helper(sovs1.SPLLIB, sovs2.SPLLIB, isas_fails.SPLLIB, latched_fails.SPLLIB, ccdl_num_fails.SPLLIB)) and OSAS_S_210_220_230__req_helper(sovs1.SPLLOB, sovs2.SPLLOB, isas_fails.SPLLOB, latched_fails.SPLLOB, ccdl_num_fails.SPLLOB)) and OSAS_S_210_220_230__req_helper(sovs1.SPLRIB, sovs2.SPLRIB, isas_fails.SPLRIB, latched_fails.SPLRIB, ccdl_num_fails.SPLRIB)) and OSAS_S_210_220_230__req_helper(sovs1.SPLROB, sovs2.SPLROB, isas_fails.SPLROB, latched_fails.SPLROB, ccdl_num_fails.SPLROB)) and OSAS_S_210_220_230__req_helper(sovs1.STEER, sovs2.STEER, isas_fails.STEER, latched_fails.STEER, ccdl_num_fails.STEER)) and OSAS_S_210_220_230__req_helper(sovs1.THROTR, sovs2.THROTR, isas_fails.THROTR, latched_fails.THROTR, ccdl_num_fails.THROTR)) and OSAS_S_210_220_230__req_helper(sovs1.THROTL, sovs2.THROTL, isas_fails.THROTL, latched_fails.THROTL, ccdl_num_fails.THROTL));

tel;

node _CLOCKED_OSAS_S_210_220_230__req(
  _CLK : bool;
  _INIT : bool;
  sovs1 : DATA_TYPES__BoolActuators__impl;
  sovs2 : DATA_TYPES__BoolActuators__impl;
  isas_fails : DATA_TYPES__BoolActuators__impl;
  latched_fails : DATA_TYPES__BoolActuators__impl;
  ccdl_num_fails : DATA_TYPES__NumActuators__impl
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.AILL, sovs2.AILL, isas_fails.AILL, latched_fails.AILL, ccdl_num_fails.AILL) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.AILR, sovs2.AILR, isas_fails.AILR, latched_fails.AILR, ccdl_num_fails.AILR)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.BRAKE, sovs2.BRAKE, isas_fails.BRAKE, latched_fails.BRAKE, ccdl_num_fails.BRAKE)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.ELLIB, sovs2.ELLIB, isas_fails.ELLIB, latched_fails.ELLIB, ccdl_num_fails.ELLIB)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.ELLOB, sovs2.ELLOB, isas_fails.ELLOB, latched_fails.ELLOB, ccdl_num_fails.ELLOB)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.ELRIB, sovs2.ELRIB, isas_fails.ELRIB, latched_fails.ELRIB, ccdl_num_fails.ELRIB)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.ELROB, sovs2.ELROB, isas_fails.ELROB, latched_fails.ELROB, ccdl_num_fails.ELROB)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.FLAPLI, sovs2.FLAPLI, isas_fails.FLAPLI, latched_fails.FLAPLI, ccdl_num_fails.FLAPLI)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.FLAPLO, sovs2.FLAPLO, isas_fails.FLAPLO, latched_fails.FLAPLO, ccdl_num_fails.FLAPLO)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.FLAPRI, sovs2.FLAPRI, isas_fails.FLAPRI, latched_fails.FLAPRI, ccdl_num_fails.FLAPRI)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.FLAPRO, sovs2.FLAPRO, isas_fails.FLAPRO, latched_fails.FLAPRO, ccdl_num_fails.FLAPRO)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.GEAR, sovs2.GEAR, isas_fails.GEAR, latched_fails.GEAR, ccdl_num_fails.GEAR)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.RUDLO, sovs2.RUDLO, isas_fails.RUDLO, latched_fails.RUDLO, ccdl_num_fails.RUDLO)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.RUDUP, sovs2.RUDUP, isas_fails.RUDUP, latched_fails.RUDUP, ccdl_num_fails.RUDUP)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.SPLLIB, sovs2.SPLLIB, isas_fails.SPLLIB, latched_fails.SPLLIB, ccdl_num_fails.SPLLIB)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.SPLLOB, sovs2.SPLLOB, isas_fails.SPLLOB, latched_fails.SPLLOB, ccdl_num_fails.SPLLOB)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.SPLRIB, sovs2.SPLRIB, isas_fails.SPLRIB, latched_fails.SPLRIB, ccdl_num_fails.SPLRIB)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.SPLROB, sovs2.SPLROB, isas_fails.SPLROB, latched_fails.SPLROB, ccdl_num_fails.SPLROB)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.STEER, sovs2.STEER, isas_fails.STEER, latched_fails.STEER, ccdl_num_fails.STEER)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.THROTR, sovs2.THROTR, isas_fails.THROTR, latched_fails.THROTR, ccdl_num_fails.THROTR)) and _CLOCKED_OSAS_S_210_220_230__req_helper(_CLK, _INIT, sovs1.THROTL, sovs2.THROTL, isas_fails.THROTL, latched_fails.THROTL, ccdl_num_fails.THROTL)) else (pre res));

tel;

node CLAW__CLAW__bound_rec(
  act : real;
  low : real;
  high : real
) returns (
  ret : bool
);
let
  ret = ((low <= act) and (act <= high));

tel;

node _CLOCKED_CLAW__CLAW__bound_rec(
  _CLK : bool;
  _INIT : bool;
  act : real;
  low : real;
  high : real
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((low <= act) and (act <= high)) else (pre ret));

tel;

node FCS_RC1__valid_to_num(
  f1 : bool;
  f2 : bool;
  f3 : bool;
  f4 : bool;
  nv : int
) returns (
  ret : bool
);
let
  ret = (((((((((((((((((((f1 and f2) and f3) and f4) => (nv = 0)) and ((((f1 and f2) and f3) and (not f4)) => (nv = 1))) and ((((f1 and f2) and (not f3)) and f4) => (nv = 1))) and ((((f1 and f2) and (not f3)) and (not f4)) => (nv = 2))) and ((((f1 and (not f2)) and f3) and f4) => (nv = 1))) and ((((f1 and (not f2)) and f3) and (not f4)) => (nv = 2))) and ((((f1 and (not f2)) and (not f3)) and f4) => (nv = 2))) and ((((f1 and (not f2)) and (not f3)) and (not f4)) => (nv = 3))) and (((((not f1) and f2) and f3) and f4) => (nv = 1))) and (((((not f1) and f2) and f3) and (not f4)) => (nv = 2))) and (((((not f1) and f2) and (not f3)) and f4) => (nv = 2))) and (((((not f1) and f2) and (not f3)) and (not f4)) => (nv = 3))) and (((((not f1) and (not f2)) and f3) and f4) => (nv = 2))) and (((((not f1) and (not f2)) and f3) and (not f4)) => (nv = 3))) and (((((not f1) and (not f2)) and (not f3)) and f4) => (nv = 3))) and (((((not f1) and (not f2)) and (not f3)) and (not f4)) => (nv = 4)));

tel;

node _CLOCKED_FCS_RC1__valid_to_num(
  _CLK : bool;
  _INIT : bool;
  f1 : bool;
  f2 : bool;
  f3 : bool;
  f4 : bool;
  nv : int
) returns (
  ret : bool
);
let
  ret = (if _CLK then (((((((((((((((((((f1 and f2) and f3) and f4) => (nv = 0)) and ((((f1 and f2) and f3) and (not f4)) => (nv = 1))) and ((((f1 and f2) and (not f3)) and f4) => (nv = 1))) and ((((f1 and f2) and (not f3)) and (not f4)) => (nv = 2))) and ((((f1 and (not f2)) and f3) and f4) => (nv = 1))) and ((((f1 and (not f2)) and f3) and (not f4)) => (nv = 2))) and ((((f1 and (not f2)) and (not f3)) and f4) => (nv = 2))) and ((((f1 and (not f2)) and (not f3)) and (not f4)) => (nv = 3))) and (((((not f1) and f2) and f3) and f4) => (nv = 1))) and (((((not f1) and f2) and f3) and (not f4)) => (nv = 2))) and (((((not f1) and f2) and (not f3)) and f4) => (nv = 2))) and (((((not f1) and f2) and (not f3)) and (not f4)) => (nv = 3))) and (((((not f1) and (not f2)) and f3) and f4) => (nv = 2))) and (((((not f1) and (not f2)) and f3) and (not f4)) => (nv = 3))) and (((((not f1) and (not f2)) and (not f3)) and f4) => (nv = 3))) and (((((not f1) and (not f2)) and (not f3)) and (not f4)) => (nv = 4))) else (pre ret));

tel;

node FCS_RC1__valids_to_nums(
  num_valids : DATA_TYPES__NumActuators__impl;
  f1 : DATA_TYPES__BoolActuators__impl;
  f2 : DATA_TYPES__BoolActuators__impl;
  f3 : DATA_TYPES__BoolActuators__impl;
  f4 : DATA_TYPES__BoolActuators__impl
) returns (
  ret : bool
);
let
  ret = ((((((((((((((((((((FCS_RC1__valid_to_num(f1.THROTL, f2.THROTL, f3.THROTL, f4.THROTL, num_valids.THROTL) and FCS_RC1__valid_to_num(f1.THROTR, f2.THROTR, f3.THROTR, f4.THROTR, num_valids.THROTR)) and FCS_RC1__valid_to_num(f1.ELLOB, f2.ELLOB, f3.ELLOB, f4.ELLOB, num_valids.ELLOB)) and FCS_RC1__valid_to_num(f1.ELLIB, f2.ELLIB, f3.ELLIB, f4.ELLIB, num_valids.ELLIB)) and FCS_RC1__valid_to_num(f1.ELROB, f2.ELROB, f3.ELROB, f4.ELROB, num_valids.ELROB)) and FCS_RC1__valid_to_num(f1.ELRIB, f2.ELRIB, f3.ELRIB, f4.ELRIB, num_valids.ELRIB)) and FCS_RC1__valid_to_num(f1.AILL, f2.AILL, f3.AILL, f4.AILL, num_valids.AILL)) and FCS_RC1__valid_to_num(f1.AILR, f2.AILR, f3.AILR, f4.AILR, num_valids.AILR)) and FCS_RC1__valid_to_num(f1.RUDUP, f2.RUDUP, f3.RUDUP, f4.RUDUP, num_valids.RUDUP)) and FCS_RC1__valid_to_num(f1.RUDLO, f2.RUDLO, f3.RUDLO, f4.RUDLO, num_valids.RUDLO)) and FCS_RC1__valid_to_num(f1.SPLLIB, f2.SPLLIB, f3.SPLLIB, f4.SPLLIB, num_valids.SPLLIB)) and FCS_RC1__valid_to_num(f1.SPLLOB, f2.SPLLOB, f3.SPLLOB, f4.SPLLOB, num_valids.SPLLOB)) and FCS_RC1__valid_to_num(f1.SPLRIB, f2.SPLRIB, f3.SPLRIB, f4.SPLRIB, num_valids.SPLRIB)) and FCS_RC1__valid_to_num(f1.SPLROB, f2.SPLROB, f3.SPLROB, f4.SPLROB, num_valids.SPLROB)) and FCS_RC1__valid_to_num(f1.FLAPLI, f2.FLAPLI, f3.FLAPLI, f4.FLAPLI, num_valids.FLAPLI)) and FCS_RC1__valid_to_num(f1.FLAPLO, f2.FLAPLO, f3.FLAPLO, f4.FLAPLO, num_valids.FLAPLO)) and FCS_RC1__valid_to_num(f1.FLAPRI, f2.FLAPRI, f3.FLAPRI, f4.FLAPRI, num_valids.FLAPRI)) and FCS_RC1__valid_to_num(f1.FLAPRO, f2.FLAPRO, f3.FLAPRO, f4.FLAPRO, num_valids.FLAPRO)) and FCS_RC1__valid_to_num(f1.GEAR, f2.GEAR, f3.GEAR, f4.GEAR, num_valids.GEAR)) and FCS_RC1__valid_to_num(f1.BRAKE, f2.BRAKE, f3.BRAKE, f4.BRAKE, num_valids.BRAKE)) and FCS_RC1__valid_to_num(f1.STEER, f2.STEER, f3.STEER, f4.STEER, num_valids.STEER));

tel;

node _CLOCKED_FCS_RC1__valids_to_nums(
  _CLK : bool;
  _INIT : bool;
  num_valids : DATA_TYPES__NumActuators__impl;
  f1 : DATA_TYPES__BoolActuators__impl;
  f2 : DATA_TYPES__BoolActuators__impl;
  f3 : DATA_TYPES__BoolActuators__impl;
  f4 : DATA_TYPES__BoolActuators__impl
) returns (
  ret : bool
);
let
  ret = (if _CLK then ((((((((((((((((((((_CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.THROTL, f2.THROTL, f3.THROTL, f4.THROTL, num_valids.THROTL) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.THROTR, f2.THROTR, f3.THROTR, f4.THROTR, num_valids.THROTR)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.ELLOB, f2.ELLOB, f3.ELLOB, f4.ELLOB, num_valids.ELLOB)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.ELLIB, f2.ELLIB, f3.ELLIB, f4.ELLIB, num_valids.ELLIB)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.ELROB, f2.ELROB, f3.ELROB, f4.ELROB, num_valids.ELROB)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.ELRIB, f2.ELRIB, f3.ELRIB, f4.ELRIB, num_valids.ELRIB)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.AILL, f2.AILL, f3.AILL, f4.AILL, num_valids.AILL)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.AILR, f2.AILR, f3.AILR, f4.AILR, num_valids.AILR)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.RUDUP, f2.RUDUP, f3.RUDUP, f4.RUDUP, num_valids.RUDUP)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.RUDLO, f2.RUDLO, f3.RUDLO, f4.RUDLO, num_valids.RUDLO)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.SPLLIB, f2.SPLLIB, f3.SPLLIB, f4.SPLLIB, num_valids.SPLLIB)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.SPLLOB, f2.SPLLOB, f3.SPLLOB, f4.SPLLOB, num_valids.SPLLOB)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.SPLRIB, f2.SPLRIB, f3.SPLRIB, f4.SPLRIB, num_valids.SPLRIB)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.SPLROB, f2.SPLROB, f3.SPLROB, f4.SPLROB, num_valids.SPLROB)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.FLAPLI, f2.FLAPLI, f3.FLAPLI, f4.FLAPLI, num_valids.FLAPLI)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.FLAPLO, f2.FLAPLO, f3.FLAPLO, f4.FLAPLO, num_valids.FLAPLO)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.FLAPRI, f2.FLAPRI, f3.FLAPRI, f4.FLAPRI, num_valids.FLAPRI)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.FLAPRO, f2.FLAPRO, f3.FLAPRO, f4.FLAPRO, num_valids.FLAPRO)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.GEAR, f2.GEAR, f3.GEAR, f4.GEAR, num_valids.GEAR)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.BRAKE, f2.BRAKE, f3.BRAKE, f4.BRAKE, num_valids.BRAKE)) and _CLOCKED_FCS_RC1__valid_to_num(_CLK, _INIT, f1.STEER, f2.STEER, f3.STEER, f4.STEER, num_valids.STEER)) else (pre ret));

tel;

node FCS_RC1__sum_in_range(
  a1 : real;
  a2 : real;
  a3 : real;
  a4 : real;
  low : real;
  high : real
) returns (
  res : bool
);
var
  avg : real;
let
  avg = ((((a1 + a2) + a3) + a4) / 4.0);

  res = ((low <= avg) and (avg <= high));

tel;

node _CLOCKED_FCS_RC1__sum_in_range(
  _CLK : bool;
  _INIT : bool;
  a1 : real;
  a2 : real;
  a3 : real;
  a4 : real;
  low : real;
  high : real
) returns (
  res : bool
);
var
  avg : real;
let
  avg = (if _CLK then ((((a1 + a2) + a3) + a4) / 4.0) else (pre avg));

  res = (if _CLK then ((low <= avg) and (avg <= high)) else (pre res));

tel;

node FCS_RC1__req(
  acts1 : DATA_TYPES__Actuators__impl;
  acts2 : DATA_TYPES__Actuators__impl;
  acts3 : DATA_TYPES__Actuators__impl;
  acts4 : DATA_TYPES__Actuators__impl
) returns (
  res : bool
);
let
  res = ((((((((((((((((((((FCS_RC1__sum_in_range(acts1.AILL, acts2.AILL, acts3.AILL, acts4.AILL, 0.0, 50.0) and FCS_RC1__sum_in_range(acts1.AILR, acts2.AILR, acts3.AILR, acts4.AILR, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.BRAKE, acts2.BRAKE, acts3.BRAKE, acts4.BRAKE, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.ELLIB, acts2.ELLIB, acts3.ELLIB, acts4.ELLIB, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.ELLOB, acts2.ELLOB, acts3.ELLOB, acts4.ELLOB, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.ELRIB, acts2.ELRIB, acts3.ELRIB, acts4.ELRIB, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.ELROB, acts2.ELROB, acts3.ELROB, acts4.ELROB, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.FLAPLO, acts2.FLAPLO, acts3.FLAPLO, acts4.FLAPLO, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.FLAPLI, acts2.FLAPLI, acts3.FLAPLI, acts4.FLAPLI, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.FLAPRI, acts2.FLAPRI, acts3.FLAPRI, acts4.FLAPRI, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.FLAPRO, acts2.FLAPRO, acts3.FLAPRO, acts4.FLAPRO, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.GEAR, acts2.GEAR, acts3.GEAR, acts4.GEAR, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.RUDLO, acts2.RUDLO, acts3.RUDLO, acts4.RUDLO, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.RUDUP, acts2.RUDUP, acts3.RUDUP, acts4.RUDUP, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.SPLLIB, acts2.SPLLIB, acts3.SPLLIB, acts4.SPLLIB, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.SPLLOB, acts2.SPLLOB, acts3.SPLLOB, acts4.SPLLOB, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.SPLRIB, acts2.SPLRIB, acts3.SPLRIB, acts4.SPLRIB, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.SPLROB, acts2.SPLROB, acts3.SPLROB, acts4.SPLROB, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.STEER, acts2.STEER, acts3.STEER, acts4.STEER, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.THROTL, acts2.THROTL, acts3.THROTL, acts4.THROTL, 0.0, 50.0)) and FCS_RC1__sum_in_range(acts1.THROTR, acts2.THROTR, acts3.THROTR, acts4.THROTR, 0.0, 50.0));

tel;

node _CLOCKED_FCS_RC1__req(
  _CLK : bool;
  _INIT : bool;
  acts1 : DATA_TYPES__Actuators__impl;
  acts2 : DATA_TYPES__Actuators__impl;
  acts3 : DATA_TYPES__Actuators__impl;
  acts4 : DATA_TYPES__Actuators__impl
) returns (
  res : bool
);
let
  res = (if _CLK then ((((((((((((((((((((_CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.AILL, acts2.AILL, acts3.AILL, acts4.AILL, 0.0, 50.0) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.AILR, acts2.AILR, acts3.AILR, acts4.AILR, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.BRAKE, acts2.BRAKE, acts3.BRAKE, acts4.BRAKE, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.ELLIB, acts2.ELLIB, acts3.ELLIB, acts4.ELLIB, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.ELLOB, acts2.ELLOB, acts3.ELLOB, acts4.ELLOB, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.ELRIB, acts2.ELRIB, acts3.ELRIB, acts4.ELRIB, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.ELROB, acts2.ELROB, acts3.ELROB, acts4.ELROB, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.FLAPLO, acts2.FLAPLO, acts3.FLAPLO, acts4.FLAPLO, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.FLAPLI, acts2.FLAPLI, acts3.FLAPLI, acts4.FLAPLI, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.FLAPRI, acts2.FLAPRI, acts3.FLAPRI, acts4.FLAPRI, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.FLAPRO, acts2.FLAPRO, acts3.FLAPRO, acts4.FLAPRO, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.GEAR, acts2.GEAR, acts3.GEAR, acts4.GEAR, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.RUDLO, acts2.RUDLO, acts3.RUDLO, acts4.RUDLO, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.RUDUP, acts2.RUDUP, acts3.RUDUP, acts4.RUDUP, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.SPLLIB, acts2.SPLLIB, acts3.SPLLIB, acts4.SPLLIB, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.SPLLOB, acts2.SPLLOB, acts3.SPLLOB, acts4.SPLLOB, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.SPLRIB, acts2.SPLRIB, acts3.SPLRIB, acts4.SPLRIB, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.SPLROB, acts2.SPLROB, acts3.SPLROB, acts4.SPLROB, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.STEER, acts2.STEER, acts3.STEER, acts4.STEER, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.THROTL, acts2.THROTL, acts3.THROTL, acts4.THROTL, 0.0, 50.0)) and _CLOCKED_FCS_RC1__sum_in_range(_CLK, _INIT, acts1.THROTR, acts2.THROTR, acts3.THROTR, acts4.THROTR, 0.0, 50.0)) else (pre res));

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

