type DATATYPES__System_Monitor_Output__Impl = struct {System_Monitor_Failed : Base_Types__Boolean};
type DATATYPES__GPCA_SW_Outputs__Impl = struct {Actual_Infusion_Duration : Base_Types__Integer; Audio_Notification_Command : Base_Types__Integer; Commanded_Flow_Rate : Base_Types__Integer; Configured : Base_Types__Integer; Current_System_Mode : Base_Types__Integer; Drug_Concentration : Base_Types__Integer; Drug_Name : Base_Types__Integer; Duration_Intermittent_Bolus : Base_Types__Integer; Duration_Patient_Bolus : Base_Types__Integer; Entered_Reservoir_Volume : Base_Types__Integer; Error_Message_ID : Base_Types__Integer; Flow_Rate_Basal : Base_Types__Integer; Flow_Rate_Intermittent_Bolus : Base_Types__Integer; Flow_Rate_KVO : Base_Types__Integer; Flow_Rate_Patient_Bolus : Base_Types__Integer; Infusion_Total_Duration : Base_Types__Integer; Interval_Intermittent_Bolus : Base_Types__Integer; Is_Audio_Disabled : Base_Types__Integer; Is_Locked_Out : Base_Types__Boolean; Lockout_Period_Patient_Bolus : Base_Types__Integer; Log : Base_Types__Integer; Max_Number_of_Patient_Bolus : Base_Types__Integer; New_Infusion : Base_Types__Boolean; Notification_Message : Base_Types__Integer; Patient_ID : Base_Types__Integer; Request_Config_Type : Base_Types__Boolean; Request_Confirm_Infusion_Initiate : Base_Types__Boolean; Request_Confirm_Stop : Base_Types__Boolean; Request_Infusion_Info : Base_Types__Boolean; Request_Patient_Drug_Info : Base_Types__Boolean; Reservoir_Volume : Base_Types__Integer; VTBI_Total : Base_Types__Integer; Volume_Infused : Base_Types__Integer};
type DATATYPES__System_Status_Outputs__Impl = struct {Idle_Time_Exceeded : Base_Types__Boolean; In_Therapy : Base_Types__Boolean; Log_Message_ID : Base_Types__Integer; Paused_Time_Exceeded : Base_Types__Boolean; Reservoir_Empty : Base_Types__Boolean; Reservoir_Volume : Base_Types__Integer; Volume_Infused : Base_Types__Integer};
type DATATYPES__Log_Output__Impl = struct {Log : Base_Types__Integer; Logging_Failed : Base_Types__Boolean};
type DATATYPES__Patient_Inputs__Impl = struct {Patient_Bolus_Request : Base_Types__Boolean};
type DATATYPES__Device_Configuration_Inputs__Impl = struct {Audio_Enable_Duration : Base_Types__Integer; Audio_Level : Base_Types__Integer; Config_Warning_Duration : Base_Types__Integer; Empty_Reservoir : Base_Types__Integer; Log_Interval : Base_Types__Integer; Low_Reservoir : Base_Types__Integer; Max_Config_Duration : Base_Types__Integer; Max_Confirm_Stop_Duration : Base_Types__Integer; Max_Display_Duration : Base_Types__Integer; Max_Duration_Over_Infusion : Base_Types__Integer; Max_Duration_Under_Infusion : Base_Types__Integer; Max_Idle_Duration : Base_Types__Integer; Max_Paused_Duration : Base_Types__Integer; System_Test_Inteval : Base_Types__Integer; Tolerance_Max : Base_Types__Integer; Tolerance_Min : Base_Types__Integer};
type DATATYPES__Operator_Commands__Impl = struct {Back : Base_Types__Boolean; Cancel : Base_Types__Boolean; Configuration_Type : Base_Types__Integer; Confirm_Stop : Base_Types__Boolean; Data_Config : Base_Types__Boolean; Disable_Audio : Base_Types__Integer; Infusion_Cancel : Base_Types__Boolean; Infusion_Inhibit : Base_Types__Boolean; Infusion_Initiate : Base_Types__Boolean; Keyboard : Base_Types__Boolean; Next : Base_Types__Boolean; Notification_Cancel : Base_Types__Boolean; System_Start : Base_Types__Boolean; System_Stop : Base_Types__Boolean};
type DATATYPES__Config_Outputs__Impl = struct {Config_Mode : Base_Types__Integer; Config_Timer : Base_Types__Integer; Configured : Base_Types__Integer; Drug_Concentration : Base_Types__Integer; Drug_Name : Base_Types__Integer; Duration_Intermittent_Bolus : Base_Types__Integer; Duration_Patient_Bolus : Base_Types__Integer; Entered_Reservoir_Volume : Base_Types__Integer; Error_Message_ID : Base_Types__Integer; Flow_Rate_Basal : Base_Types__Integer; Flow_Rate_Intermittent_Bolus : Base_Types__Integer; Flow_Rate_KVO : Base_Types__Integer; Flow_Rate_Patient_Bolus : Base_Types__Integer; Infusion_Total_Duration : Base_Types__Integer; Interval_Intermittent_Bolus : Base_Types__Integer; Lockout_Period_Patient_Bolus : Base_Types__Integer; Log_Message_ID : Base_Types__Integer; Max_Number_of_Patient_Bolus : Base_Types__Integer; Patient_ID : Base_Types__Integer; Request_Config_Type : Base_Types__Boolean; Request_Confirm_Infusion_Initiate : Base_Types__Boolean; Request_Infusion_Info : Base_Types__Boolean; Request_Patient_Drug_Info : Base_Types__Boolean; Reservoir_Volume : Base_Types__Integer; VTBI_Total : Base_Types__Integer};
type DATATYPES__Infusion_Manager_Outputs__Impl = struct {Actual_Infusion_Duration : Base_Types__Integer; Commanded_Flow_Rate : Base_Types__Integer; Current_System_Mode : Base_Types__Integer; Is_Locked_Out : Base_Types__Boolean; Log_Message_ID : Base_Types__Integer; New_Infusion : Base_Types__Boolean};
type DATATYPES__Drug_Database_Inputs__Impl = struct {Drug_Concentration_High : Base_Types__Integer; Drug_Concentration_Low : Base_Types__Integer; Drug_Name : Base_Types__Integer; Flow_Rate_High : Base_Types__Integer; Flow_Rate_KVO : Base_Types__Integer; Flow_Rate_Low : Base_Types__Integer; Inteval_Patient_Bolus : Base_Types__Integer; Known_Prescription : Base_Types__Boolean; Number_Max_Patient_Bolus : Base_Types__Integer; VTBI_High : Base_Types__Integer; VTBI_Low : Base_Types__Integer};
type DATATYPES__Alarm_Outputs__Impl = struct {Audio_Notification_Command : Base_Types__Integer; Highest_Level_Alarm : Base_Types__Integer; Is_Audio_Disabled : Base_Types__Integer; Log_Message_ID : Base_Types__Integer; Notification_Message : Base_Types__Integer};
type DATATYPES__Top_Level_Mode_Outputs__Impl = struct {Log_Message_ID : Base_Types__Integer; Request_Confirm_Stop : Base_Types__Boolean; System_On : Base_Types__Boolean};
type DATATYPES__Prescription_Inputs__Impl = struct {Drug_Concentration : Base_Types__Integer; Drug_Name : Base_Types__Integer; Duration_Intermittent_Bolus : Base_Types__Integer; Duration_Patient_Bolus : Base_Types__Integer; Entered_Reservoir_Volume : Base_Types__Integer; Flow_Rate_Basal : Base_Types__Integer; Flow_Rate_Intermittent_Bolus : Base_Types__Integer; Flow_Rate_Patient_Bolus : Base_Types__Integer; Interval_Intermittent_Bolus : Base_Types__Integer; Lockout_Period_Patient_Bolus : Base_Types__Integer; Max_Number_of_Patient_Bolus : Base_Types__Integer; Patient_ID : Base_Types__Integer; Total_Duration : Base_Types__Integer; VTBI_Total : Base_Types__Integer};
type DATATYPES__Device_Sensor_Inputs__Impl = struct {Air_In_Line : Base_Types__Boolean; Air_Pressure : Base_Types__Boolean; Battery_Depleted : Base_Types__Boolean; Battery_Low : Base_Types__Boolean; Battery_Unable_To_Charge : Base_Types__Boolean; CPU_Error : Base_Types__Boolean; Door_Open : Base_Types__Boolean; Flow_Rate : Base_Types__Integer; Flow_Rate_Not_Stable : Base_Types__Boolean; Humidity : Base_Types__Boolean; Memory_Corrupted : Base_Types__Boolean; Occlusion : Base_Types__Boolean; Post_Successful : Base_Types__Boolean; Pump_Overheated : Base_Types__Boolean; Pump_Primed : Base_Types__Boolean; Pump_Too_Hot : Base_Types__Boolean; RTC_Error : Base_Types__Boolean; Supply_Voltage : Base_Types__Boolean; Temp : Base_Types__Boolean; Watchdog_Interrupted : Base_Types__Boolean};
type Base_Types__Boolean = bool;
type Base_Types__Unsigned = int;
type Base_Types__Unsigned_64 = int;
type Base_Types__Unsigned_32 = int;
type Base_Types__Unsigned_16 = int;
type Base_Types__Unsigned_8 = int;
type Base_Types__Integer = int;
type Base_Types__Integer_64 = int;
type Base_Types__Integer_32 = int;
type Base_Types__Integer_16 = int;
type Base_Types__Integer_8 = int;
type Base_Types__Float = real;
type Base_Types__Float_32 = real;
type Base_Types__Float_64 = real;

node _TOP__TLM(
  __ASSUME__HIST : bool;
  OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  time : real;
  system_start_implies_system_on : bool;
  not_system_start_implies_system_off : bool;
  system_stop_implies_not_system_on : bool;
  TLM_MODE_OUT : DATATYPES__Top_Level_Mode_Outputs__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
let
  __GUARANTEE0 = system_start_implies_system_on;

  __GUARANTEE1 = not_system_start_implies_system_off;

  __GUARANTEE2 = system_stop_implies_not_system_on;

  __ASSERT = (true and ((system_stop_implies_not_system_on = (OP_CMD_IN.System_Stop => (not TLM_MODE_OUT.System_On))) and ((not_system_start_implies_system_off = ((not OP_CMD_IN.System_Start) => (not TLM_MODE_OUT.System_On))) and ((system_start_implies_system_on = (OP_CMD_IN.System_Start => TLM_MODE_OUT.System_On)) and ((__ASSUME__HIST => (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true)))) and true)))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2;

tel;

node _TOP__SYS_STAT(
  __ASSUME__HIST : bool;
  IM_IN : DATATYPES__Infusion_Manager_Outputs__Impl;
  TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  SENSOR_IN : DATATYPES__Device_Sensor_Inputs__Impl;
  CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  CONFIG_IN : DATATYPES__Config_Outputs__Impl;
  time : real;
  empty_reservoir_condition : bool;
  empty_reservoir_exclusive : bool;
  mode_grt_1_implies_In_Therapy : bool;
  mode_not_grt_1_implies_not_In_Therapy : bool;
  SYS_STAT_OUT : DATATYPES__System_Status_Outputs__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
let
  __GUARANTEE0 = empty_reservoir_condition;

  __GUARANTEE1 = empty_reservoir_exclusive;

  __GUARANTEE2 = mode_grt_1_implies_In_Therapy;

  __GUARANTEE3 = mode_not_grt_1_implies_not_In_Therapy;

  __ASSERT = (true and ((mode_not_grt_1_implies_not_In_Therapy = ((TLM_MODE_IN.System_On and (not (IM_IN.Current_System_Mode > 1))) => (not SYS_STAT_OUT.In_Therapy))) and ((mode_grt_1_implies_In_Therapy = ((TLM_MODE_IN.System_On and (IM_IN.Current_System_Mode > 1)) => SYS_STAT_OUT.In_Therapy)) and ((empty_reservoir_exclusive = ((TLM_MODE_IN.System_On and SYS_STAT_OUT.Reservoir_Empty) => (SYS_STAT_OUT.Reservoir_Volume < CONST_IN.Empty_Reservoir))) and ((empty_reservoir_condition = (SYS_STAT_OUT.Reservoir_Empty = (TLM_MODE_IN.System_On and (SYS_STAT_OUT.Reservoir_Volume < CONST_IN.Empty_Reservoir)))) and ((__ASSUME__HIST => (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true))))) and true))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3;

tel;

node _TOP__ALARM(
  __ASSUME__HIST : bool;
  IM_IN : DATATYPES__Infusion_Manager_Outputs__Impl;
  TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  SYS_MON_IN : DATATYPES__System_Monitor_Output__Impl;
  LOGGING_IN : DATATYPES__Log_Output__Impl;
  OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  DB_IN : DATATYPES__Drug_Database_Inputs__Impl;
  SENSOR_IN : DATATYPES__Device_Sensor_Inputs__Impl;
  CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  SYS_STAT_IN : DATATYPES__System_Status_Outputs__Impl;
  CONFIG_IN : DATATYPES__Config_Outputs__Impl;
  time : real;
  ALM_Initial : bool;
  level_4_alarm : bool;
  Time_FR_Over_Min_Tol : int;
  Is_Over_Infusion : bool;
  level_3_alarm : bool;
  low_reservoiur : bool;
  level_2_alarm : bool;
  Time_FR_Under_Min_Tol : int;
  is_under_infusion : bool;
  level_1_alarm : bool;
  Paused_Time_Counter : int;
  Idle_Time_Counter : int;
  Config_Timer : int;
  alarm_range : bool;
  level4_conditions_implies_highest_level_4 : bool;
  level3_conditions_implies_highest_level_3 : bool;
  level2_conditions_implies_highest_level_2 : bool;
  level1_conditions_implies_highest_level_1 : bool;
  no_conditions_implies_highest_level_0 : bool;
  alarm_gte_L3_causes_audio_output_EQ_audio_level : bool;
  no_audio_if_audio_disabled : bool;
  alarm_gt_3_no_audio_disable_implies_audio : bool;
  empty_reservoir_implies_visual_1 : bool;
  patient_bolus_counter : int;
  alarm_3_or_4_implies_audio : bool;
  level_4_alarm_visual : bool;
  emptry_res_visual_implies_error : bool;
  enviro_visual_implies_error : bool;
  hardware_visual_implies_error : bool;
  level_3_alarm_visual : bool;
  over_fr_visual_implies_error : bool;
  over_vtbi_visual_implies_error : bool;
  air_visual_implies_error : bool;
  occlusion_visual_implies_error : bool;
  door_visual_implies_error : bool;
  level_2_alarm_visual : bool;
  low_res_visial_implies_error : bool;
  level_1_alarm_visual : bool;
  under_fr_visual_implies_error : bool;
  unstable_fr_visual_implies_error : bool;
  idle_time_visual_implies_error : bool;
  pause_time_visual_implies_error : bool;
  config_time_visual_implies_error : bool;
  battery_visual_implies_error : bool;
  pump_hot_visual_implies_error : bool;
  not_system_on_implies_no_alarm : bool;
  ALARM_OUT : DATATYPES__Alarm_Outputs__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
  __GUARANTEE11 : bool;
  __GUARANTEE12 : bool;
  __GUARANTEE13 : bool;
  __GUARANTEE14 : bool;
  __GUARANTEE15 : bool;
  __GUARANTEE16 : bool;
  __GUARANTEE17 : bool;
  __GUARANTEE18 : bool;
  __GUARANTEE19 : bool;
  __GUARANTEE20 : bool;
  __GUARANTEE21 : bool;
  __GUARANTEE22 : bool;
  __GUARANTEE23 : bool;
  __GUARANTEE24 : bool;
  __GUARANTEE25 : bool;
  __GUARANTEE26 : bool;
  __GUARANTEE27 : bool;
  __GUARANTEE28 : bool;
  __GUARANTEE29 : bool;
  __GUARANTEE30 : bool;
  __GUARANTEE31 : bool;
let
  __GUARANTEE0 = alarm_range;

  __GUARANTEE1 = level4_conditions_implies_highest_level_4;

  __GUARANTEE2 = level3_conditions_implies_highest_level_3;

  __GUARANTEE3 = level2_conditions_implies_highest_level_2;

  __GUARANTEE4 = level1_conditions_implies_highest_level_1;

  __GUARANTEE5 = no_conditions_implies_highest_level_0;

  __GUARANTEE6 = alarm_gte_L3_causes_audio_output_EQ_audio_level;

  __GUARANTEE7 = no_audio_if_audio_disabled;

  __GUARANTEE8 = alarm_gt_3_no_audio_disable_implies_audio;

  __GUARANTEE9 = empty_reservoir_implies_visual_1;

  __GUARANTEE10 = alarm_3_or_4_implies_audio;

  __GUARANTEE11 = level_4_alarm_visual;

  __GUARANTEE12 = emptry_res_visual_implies_error;

  __GUARANTEE13 = enviro_visual_implies_error;

  __GUARANTEE14 = hardware_visual_implies_error;

  __GUARANTEE15 = level_3_alarm_visual;

  __GUARANTEE16 = over_fr_visual_implies_error;

  __GUARANTEE17 = over_vtbi_visual_implies_error;

  __GUARANTEE18 = air_visual_implies_error;

  __GUARANTEE19 = occlusion_visual_implies_error;

  __GUARANTEE20 = door_visual_implies_error;

  __GUARANTEE21 = level_2_alarm_visual;

  __GUARANTEE22 = low_res_visial_implies_error;

  __GUARANTEE23 = level_1_alarm_visual;

  __GUARANTEE24 = under_fr_visual_implies_error;

  __GUARANTEE25 = unstable_fr_visual_implies_error;

  __GUARANTEE26 = idle_time_visual_implies_error;

  __GUARANTEE27 = pause_time_visual_implies_error;

  __GUARANTEE28 = config_time_visual_implies_error;

  __GUARANTEE29 = battery_visual_implies_error;

  __GUARANTEE30 = pump_hot_visual_implies_error;

  __GUARANTEE31 = not_system_on_implies_no_alarm;

  __ASSERT = (true and ((not_system_on_implies_no_alarm = ((ALARM_OUT.Highest_Level_Alarm > 0) => TLM_MODE_IN.System_On)) and ((pump_hot_visual_implies_error = ((ALARM_OUT.Notification_Message = 16) => SENSOR_IN.Pump_Overheated)) and ((battery_visual_implies_error = ((ALARM_OUT.Notification_Message = 15) => ((SENSOR_IN.Supply_Voltage or SENSOR_IN.Battery_Low) or SENSOR_IN.Battery_Unable_To_Charge))) and ((config_time_visual_implies_error = ((ALARM_OUT.Notification_Message = 14) => (Config_Timer > CONST_IN.Config_Warning_Duration))) and ((pause_time_visual_implies_error = ((ALARM_OUT.Notification_Message = 13) => (Paused_Time_Counter > CONST_IN.Max_Paused_Duration))) and ((idle_time_visual_implies_error = (true -> ((ALARM_OUT.Notification_Message = 12) => (Idle_Time_Counter > CONST_IN.Max_Idle_Duration)))) and ((unstable_fr_visual_implies_error = ((ALARM_OUT.Notification_Message = 11) => ((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and SENSOR_IN.Flow_Rate_Not_Stable))) and ((under_fr_visual_implies_error = (true -> ((ALARM_OUT.Notification_Message = 10) => is_under_infusion))) and ((level_1_alarm_visual = (true -> ((ALARM_OUT.Highest_Level_Alarm = 1) => (((((((((ALARM_OUT.Notification_Message = 10) or (ALARM_OUT.Notification_Message = 11)) or (ALARM_OUT.Notification_Message = 12)) or (ALARM_OUT.Notification_Message = 13)) or (ALARM_OUT.Notification_Message = 14)) or (ALARM_OUT.Notification_Message = 15)) or (ALARM_OUT.Notification_Message = 16)) or (ALARM_OUT.Notification_Message = 17)) or (ALARM_OUT.Notification_Message = 18))))) and ((low_res_visial_implies_error = ((ALARM_OUT.Notification_Message = 9) => low_reservoiur)) and ((level_2_alarm_visual = (true -> ((ALARM_OUT.Highest_Level_Alarm = 2) => (ALARM_OUT.Notification_Message = 9)))) and ((door_visual_implies_error = ((ALARM_OUT.Notification_Message = 8) => SENSOR_IN.Door_Open)) and ((occlusion_visual_implies_error = ((ALARM_OUT.Notification_Message = 7) => SENSOR_IN.Occlusion)) and ((air_visual_implies_error = ((ALARM_OUT.Notification_Message = 6) => SENSOR_IN.Air_In_Line)) and ((over_vtbi_visual_implies_error = ((ALARM_OUT.Notification_Message = 5) => ((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and (SYS_STAT_IN.Volume_Infused > DB_IN.VTBI_High)))) and ((over_fr_visual_implies_error = ((ALARM_OUT.Notification_Message = 4) => Is_Over_Infusion)) and ((level_3_alarm_visual = ((ALARM_OUT.Highest_Level_Alarm = 3) => (((((ALARM_OUT.Notification_Message = 4) or (ALARM_OUT.Notification_Message = 5)) or (ALARM_OUT.Notification_Message = 6)) or (ALARM_OUT.Notification_Message = 7)) or (ALARM_OUT.Notification_Message = 8)))) and ((hardware_visual_implies_error = ((ALARM_OUT.Notification_Message = 3) => (((((SENSOR_IN.Battery_Depleted or SENSOR_IN.RTC_Error) or SENSOR_IN.CPU_Error) or SENSOR_IN.Memory_Corrupted) or SENSOR_IN.Pump_Too_Hot) or SENSOR_IN.Watchdog_Interrupted))) and ((enviro_visual_implies_error = ((ALARM_OUT.Notification_Message = 2) => ((SENSOR_IN.Temp or SENSOR_IN.Air_Pressure) or SENSOR_IN.Humidity))) and ((emptry_res_visual_implies_error = (true -> (((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and SYS_STAT_IN.Reservoir_Empty) => (ALARM_OUT.Notification_Message = 1)))) and ((level_4_alarm_visual = (true -> (level_4_alarm => (((ALARM_OUT.Notification_Message = 1) or (ALARM_OUT.Notification_Message = 2)) or (ALARM_OUT.Notification_Message = 3))))) and ((alarm_3_or_4_implies_audio = (((TLM_MODE_IN.System_On and (ALARM_OUT.Highest_Level_Alarm >= 3)) and (OP_CMD_IN.Disable_Audio = 0)) => (ALARM_OUT.Audio_Notification_Command = CONST_IN.Audio_Level))) and ((empty_reservoir_implies_visual_1 = (true -> (((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and SYS_STAT_IN.Reservoir_Empty) = (ALARM_OUT.Notification_Message = 1)))) and ((alarm_gt_3_no_audio_disable_implies_audio = (true -> (((TLM_MODE_IN.System_On and (ALARM_OUT.Highest_Level_Alarm >= 3)) and (OP_CMD_IN.Disable_Audio = 0)) => ((ALARM_OUT.Audio_Notification_Command = CONST_IN.Audio_Level) and (ALARM_OUT.Is_Audio_Disabled = OP_CMD_IN.Disable_Audio))))) and ((no_audio_if_audio_disabled = ((TLM_MODE_IN.System_On and (OP_CMD_IN.Disable_Audio > 0)) => ((ALARM_OUT.Audio_Notification_Command = 0) and (ALARM_OUT.Is_Audio_Disabled = OP_CMD_IN.Disable_Audio)))) and ((alarm_gte_L3_causes_audio_output_EQ_audio_level = (((TLM_MODE_IN.System_On and (ALARM_OUT.Highest_Level_Alarm >= 3)) and (OP_CMD_IN.Disable_Audio = 0)) => ((ALARM_OUT.Audio_Notification_Command = CONST_IN.Audio_Level) and (ALARM_OUT.Is_Audio_Disabled = 0)))) and ((no_conditions_implies_highest_level_0 = (true -> (((((not level_1_alarm) and (not level_2_alarm)) and (not level_3_alarm)) and (not level_4_alarm)) => (ALARM_OUT.Highest_Level_Alarm = 0)))) and ((level1_conditions_implies_highest_level_1 = (true -> ((((level_1_alarm and (not level_2_alarm)) and (not level_3_alarm)) and (not level_4_alarm)) => (ALARM_OUT.Highest_Level_Alarm = 1)))) and ((level2_conditions_implies_highest_level_2 = (true -> (((level_2_alarm and (not level_3_alarm)) and (not level_4_alarm)) => (ALARM_OUT.Highest_Level_Alarm = 2)))) and ((level3_conditions_implies_highest_level_3 = (true -> ((level_3_alarm and (not level_4_alarm)) => (ALARM_OUT.Highest_Level_Alarm = 3)))) and ((level4_conditions_implies_highest_level_4 = (level_4_alarm => (ALARM_OUT.Highest_Level_Alarm = 4))) and ((alarm_range = (((((ALARM_OUT.Highest_Level_Alarm = 1) or (ALARM_OUT.Highest_Level_Alarm = 2)) or (ALARM_OUT.Highest_Level_Alarm = 3)) or (ALARM_OUT.Highest_Level_Alarm = 4)) or (ALARM_OUT.Highest_Level_Alarm = 0))) and ((patient_bolus_counter = (0 -> (if ((IM_IN.Current_System_Mode = 3) and (not ((pre IM_IN.Current_System_Mode) = 3))) then ((pre patient_bolus_counter) + 1) else (pre patient_bolus_counter)))) and ((Config_Timer = (0 -> (if (CONFIG_IN.Configured > 0) then ((pre Config_Timer) + 1) else 0))) and ((Idle_Time_Counter = (0 -> (if (IM_IN.Current_System_Mode = 1) then ((pre Idle_Time_Counter) + 1) else 0))) and ((Paused_Time_Counter = (0 -> (if (((IM_IN.Current_System_Mode = 6) or (IM_IN.Current_System_Mode = 7)) or (IM_IN.Current_System_Mode = 8)) then ((pre Paused_Time_Counter) + 1) else 0))) and ((level_1_alarm = (TLM_MODE_IN.System_On and ((((((((SENSOR_IN.Pump_Overheated or SENSOR_IN.Supply_Voltage) or SENSOR_IN.Battery_Low) or SENSOR_IN.Battery_Unable_To_Charge) or (SYS_STAT_IN.In_Therapy and SENSOR_IN.Flow_Rate_Not_Stable)) or is_under_infusion) or (Idle_Time_Counter > CONST_IN.Max_Idle_Duration)) or (Paused_Time_Counter > CONST_IN.Max_Paused_Duration)) or (Config_Timer > CONST_IN.Config_Warning_Duration)))) and ((is_under_infusion = (((CONST_IN.Max_Duration_Under_Infusion < Time_FR_Under_Min_Tol) or DEFS__Is_Infusion_below_tolerance(SENSOR_IN.Flow_Rate, IM_IN.Commanded_Flow_Rate, CONST_IN.Tolerance_Max)) or (SENSOR_IN.Flow_Rate < DB_IN.Flow_Rate_Low))) and ((Time_FR_Under_Min_Tol = (0 -> (if DEFS__Is_Infusion_below_tolerance(SENSOR_IN.Flow_Rate, IM_IN.Commanded_Flow_Rate, CONST_IN.Tolerance_Min) then ((pre Time_FR_Under_Min_Tol) + 1) else 0))) and ((level_2_alarm = (false -> low_reservoiur)) and ((low_reservoiur = (false -> ((TLM_MODE_IN.System_On and SYS_STAT_IN.In_Therapy) and (SYS_STAT_IN.Reservoir_Volume < CONST_IN.Low_Reservoir)))) and ((level_3_alarm = (TLM_MODE_IN.System_On and ((((((SYS_STAT_IN.Volume_Infused > DB_IN.VTBI_High) and SYS_STAT_IN.In_Therapy) or SENSOR_IN.Air_In_Line) or SENSOR_IN.Occlusion) or SENSOR_IN.Door_Open) or Is_Over_Infusion))) and ((Is_Over_Infusion = (false -> (((CONST_IN.Max_Duration_Over_Infusion < Time_FR_Over_Min_Tol) or DEFS__Is_Infusion_above_tolerance(SENSOR_IN.Flow_Rate, IM_IN.Commanded_Flow_Rate, CONST_IN.Tolerance_Max)) or (SENSOR_IN.Flow_Rate > DB_IN.Flow_Rate_High)))) and ((Time_FR_Over_Min_Tol = (0 -> (if DEFS__Is_Infusion_above_tolerance(SENSOR_IN.Flow_Rate, IM_IN.Commanded_Flow_Rate, CONST_IN.Tolerance_Min) then ((pre Time_FR_Over_Min_Tol) + 1) else 0))) and ((level_4_alarm = (TLM_MODE_IN.System_On and ((((((((((SYS_STAT_IN.Reservoir_Empty and SYS_STAT_IN.In_Therapy) or SENSOR_IN.Temp) or SENSOR_IN.Air_Pressure) or SENSOR_IN.Humidity) or SENSOR_IN.CPU_Error) or SENSOR_IN.Battery_Depleted) or SENSOR_IN.RTC_Error) or SENSOR_IN.Memory_Corrupted) or SENSOR_IN.Pump_Too_Hot) or SENSOR_IN.Watchdog_Interrupted))) and ((ALM_Initial = (true -> false)) and ((__ASSUME__HIST => (__GUARANTEE31 and (__GUARANTEE30 and (__GUARANTEE29 and (__GUARANTEE28 and (__GUARANTEE27 and (__GUARANTEE26 and (__GUARANTEE25 and (__GUARANTEE24 and (__GUARANTEE23 and (__GUARANTEE22 and (__GUARANTEE21 and (__GUARANTEE20 and (__GUARANTEE19 and (__GUARANTEE18 and (__GUARANTEE17 and (__GUARANTEE16 and (__GUARANTEE15 and (__GUARANTEE14 and (__GUARANTEE13 and (__GUARANTEE12 and (__GUARANTEE11 and (__GUARANTEE10 and (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true))))))))))))))))))))))))))))))))) and true))))))))))))))))))))))))))))))))))))))))))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9, __GUARANTEE10, __GUARANTEE11, __GUARANTEE12, __GUARANTEE13, __GUARANTEE14, __GUARANTEE15, __GUARANTEE16, __GUARANTEE17, __GUARANTEE18, __GUARANTEE19, __GUARANTEE20, __GUARANTEE21, __GUARANTEE22, __GUARANTEE23, __GUARANTEE24, __GUARANTEE25, __GUARANTEE26, __GUARANTEE27, __GUARANTEE28, __GUARANTEE29, __GUARANTEE30, __GUARANTEE31;

tel;

node _TOP__CONFIG(
  __ASSUME__HIST : bool;
  TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  PRES_IN : DATATYPES__Prescription_Inputs__Impl;
  OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  DB_IN : DATATYPES__Drug_Database_Inputs__Impl;
  CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  SYS_STAT_IN : DATATYPES__System_Status_Outputs__Impl;
  time : real;
  flow_rate_kvo_gt_0 : bool;
  config_range : bool;
  Infusion_Total_Duration : bool;
  config_gt_1_implies_values_configured : bool;
  configuration_type_request : bool;
  validate_configured_patient_drug_info : bool;
  validate_configured_infusion_info : bool;
  CONFIG_OUT : DATATYPES__Config_Outputs__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
let
  __GUARANTEE0 = flow_rate_kvo_gt_0;

  __GUARANTEE1 = config_range;

  __GUARANTEE2 = Infusion_Total_Duration;

  __GUARANTEE3 = config_gt_1_implies_values_configured;

  __GUARANTEE4 = configuration_type_request;

  __GUARANTEE5 = validate_configured_patient_drug_info;

  __GUARANTEE6 = validate_configured_infusion_info;

  __ASSERT = (true and ((validate_configured_infusion_info = (((CONFIG_OUT.Configured > 0) and ((((((((((((PRES_IN.VTBI_Total > DB_IN.VTBI_High) or (PRES_IN.VTBI_Total < DB_IN.VTBI_Low)) or (PRES_IN.Flow_Rate_Basal < DB_IN.Flow_Rate_Low)) or (PRES_IN.Flow_Rate_Basal > DB_IN.Flow_Rate_High)) or (PRES_IN.Flow_Rate_Intermittent_Bolus < DB_IN.Flow_Rate_Low)) or (PRES_IN.Flow_Rate_Intermittent_Bolus > DB_IN.Flow_Rate_High)) or (PRES_IN.Flow_Rate_Patient_Bolus < DB_IN.Flow_Rate_Low)) or (PRES_IN.Flow_Rate_Patient_Bolus > DB_IN.Flow_Rate_High)) or (PRES_IN.Duration_Intermittent_Bolus > PRES_IN.Interval_Intermittent_Bolus)) or (PRES_IN.Max_Number_of_Patient_Bolus > DB_IN.Number_Max_Patient_Bolus)) or (PRES_IN.Flow_Rate_Intermittent_Bolus < PRES_IN.Flow_Rate_Basal)) or (PRES_IN.Flow_Rate_Patient_Bolus < PRES_IN.Flow_Rate_Basal))) => CONFIG_OUT.Request_Patient_Drug_Info)) and ((validate_configured_patient_drug_info = (((CONFIG_OUT.Configured = 1) and (((PRES_IN.Drug_Name = 0) or ((PRES_IN.Drug_Concentration < DB_IN.Drug_Concentration_Low) or (PRES_IN.Drug_Concentration > DB_IN.Drug_Concentration_High))) or (PRES_IN.Entered_Reservoir_Volume < CONST_IN.Empty_Reservoir))) => ((CONFIG_OUT.Error_Message_ID = 5) and CONFIG_OUT.Request_Patient_Drug_Info))) and ((configuration_type_request = (OP_CMD_IN.Data_Config => CONFIG_OUT.Request_Config_Type)) and ((config_gt_1_implies_values_configured = ((TLM_MODE_IN.System_On and (CONFIG_OUT.Configured > 0)) => (CONFIG_OUT.Infusion_Total_Duration > 0))) and ((Infusion_Total_Duration = (TLM_MODE_IN.System_On => (CONFIG_OUT.Infusion_Total_Duration >= 0))) and ((config_range = (TLM_MODE_IN.System_On => ((CONFIG_OUT.Configured >= 0) and (CONFIG_OUT.Configured <= 3)))) and ((flow_rate_kvo_gt_0 = (TLM_MODE_IN.System_On => (CONFIG_OUT.Flow_Rate_KVO > 0))) and ((__ASSUME__HIST => (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true)))))))) and true)))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6;

tel;

node _TOP__IM(
  __ASSUME__HIST : bool;
  TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  PATIENT_IN : DATATYPES__Patient_Inputs__Impl;
  CONFIG_IN : DATATYPES__Config_Outputs__Impl;
  ALARM_IN : DATATYPES__Alarm_Outputs__Impl;
  SYS_STAT_IN : DATATYPES__System_Status_Outputs__Impl;
  time : real;
  mode_range : bool;
  IM_initial : bool;
  initial_system_on_implies_idle : bool;
  system_on_implies_idle : bool;
  not_system_on_implies_mode_0 : bool;
  mode_0_1_implies_flow_rate_0 : bool;
  alarm_L4_implies_flow_rate_zero : bool;
  alarm_L3_implies_flow_rate_kvo : bool;
  alarm_L2_implies_no_bolus : bool;
  infusion_cancel_implies_flow_0 : bool;
  infusion_pause_implies_flow_kvo : bool;
  no_config_implies_mode_1 : bool;
  no_patient_request_imples_no_pbolus : bool;
  infusion_initiation_requires_prescription : bool;
  basal_fr : bool;
  Patient_Bolus_Delivered_Count : int;
  ignore_patient_bolus_request : bool;
  infusion_complete_implies_idle : bool;
  infusion_inhibit_implies_paused : bool;
  basal_transition_to_pbolus : bool;
  sbolus_transition_to_pbolus : bool;
  transition_to_pbolus : bool;
  IM_OUT : DATATYPES__Infusion_Manager_Outputs__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
  __GUARANTEE11 : bool;
  __GUARANTEE12 : bool;
  __GUARANTEE13 : bool;
  __GUARANTEE14 : bool;
  __GUARANTEE15 : bool;
  __GUARANTEE16 : bool;
  __GUARANTEE17 : bool;
  __GUARANTEE18 : bool;
  __GUARANTEE19 : bool;
let
  __GUARANTEE0 = mode_range;

  __GUARANTEE1 = initial_system_on_implies_idle;

  __GUARANTEE2 = system_on_implies_idle;

  __GUARANTEE3 = not_system_on_implies_mode_0;

  __GUARANTEE4 = mode_0_1_implies_flow_rate_0;

  __GUARANTEE5 = alarm_L4_implies_flow_rate_zero;

  __GUARANTEE6 = alarm_L3_implies_flow_rate_kvo;

  __GUARANTEE7 = alarm_L2_implies_no_bolus;

  __GUARANTEE8 = infusion_cancel_implies_flow_0;

  __GUARANTEE9 = infusion_pause_implies_flow_kvo;

  __GUARANTEE10 = no_config_implies_mode_1;

  __GUARANTEE11 = no_patient_request_imples_no_pbolus;

  __GUARANTEE12 = infusion_initiation_requires_prescription;

  __GUARANTEE13 = basal_fr;

  __GUARANTEE14 = ignore_patient_bolus_request;

  __GUARANTEE15 = infusion_complete_implies_idle;

  __GUARANTEE16 = infusion_inhibit_implies_paused;

  __GUARANTEE17 = basal_transition_to_pbolus;

  __GUARANTEE18 = sbolus_transition_to_pbolus;

  __GUARANTEE19 = transition_to_pbolus;

  __ASSERT = (true and ((transition_to_pbolus = (true -> (((((ALARM_IN.Highest_Level_Alarm >= 2) or (not PATIENT_IN.Patient_Bolus_Request)) or (Patient_Bolus_Delivered_Count > CONFIG_IN.Max_Number_of_Patient_Bolus)) or IM_OUT.Is_Locked_Out) => (not (IM_OUT.Current_System_Mode = 3))))) and ((sbolus_transition_to_pbolus = (true -> (((((pre IM_OUT.Current_System_Mode) = 4) and PATIENT_IN.Patient_Bolus_Request) and (not (((ALARM_IN.Highest_Level_Alarm >= 2) or (Patient_Bolus_Delivered_Count > CONFIG_IN.Max_Number_of_Patient_Bolus)) or IM_OUT.Is_Locked_Out))) => (IM_OUT.Current_System_Mode = 3)))) and ((basal_transition_to_pbolus = (true -> (((((pre IM_OUT.Current_System_Mode) = 2) and PATIENT_IN.Patient_Bolus_Request) and (not (((ALARM_IN.Highest_Level_Alarm >= 2) or (Patient_Bolus_Delivered_Count > CONFIG_IN.Max_Number_of_Patient_Bolus)) or IM_OUT.Is_Locked_Out))) => (IM_OUT.Current_System_Mode = 3)))) and ((infusion_inhibit_implies_paused = (true -> ((((TLM_MODE_IN.System_On and (pre DEFS__is_active(IM_OUT.Current_System_Mode))) and OP_CMD_IN.Infusion_Inhibit) and (CONFIG_IN.Configured > 0)) => (((IM_OUT.Current_System_Mode = 6) or (IM_OUT.Current_System_Mode = 8)) or (IM_OUT.Current_System_Mode = 7))))) and ((infusion_complete_implies_idle = (true -> ((((TLM_MODE_IN.System_On and (pre DEFS__is_active(IM_OUT.Current_System_Mode))) and ((IM_OUT.Actual_Infusion_Duration >= CONFIG_IN.Infusion_Total_Duration) or (SYS_STAT_IN.Volume_Infused >= CONFIG_IN.VTBI_Total))) and (not OP_CMD_IN.Infusion_Inhibit)) => (IM_OUT.Current_System_Mode = 1)))) and ((ignore_patient_bolus_request = (true -> ((PATIENT_IN.Patient_Bolus_Request and ((((ALARM_IN.Highest_Level_Alarm >= 2) or (Patient_Bolus_Delivered_Count > CONFIG_IN.Max_Number_of_Patient_Bolus)) or IM_OUT.Is_Locked_Out) or ((pre IM_OUT.Current_System_Mode) = 3))) => (not (IM_OUT.Current_System_Mode = 3))))) and ((basal_fr = ((IM_OUT.Current_System_Mode = 2) => (IM_OUT.Commanded_Flow_Rate = CONFIG_IN.Flow_Rate_Basal))) and ((infusion_initiation_requires_prescription = (((IM_OUT.Current_System_Mode >= 1) and IM_OUT.New_Infusion) => (CONFIG_IN.Configured > 0))) and ((no_patient_request_imples_no_pbolus = (((TLM_MODE_IN.System_On and (not ((pre IM_OUT.Current_System_Mode) = 3))) and (not PATIENT_IN.Patient_Bolus_Request)) => (not (IM_OUT.Current_System_Mode = 3)))) and ((no_config_implies_mode_1 = ((TLM_MODE_IN.System_On and (CONFIG_IN.Configured < 1)) => (IM_OUT.Current_System_Mode = 1))) and ((infusion_pause_implies_flow_kvo = (true -> ((((TLM_MODE_IN.System_On and OP_CMD_IN.Infusion_Inhibit) and (not (ALARM_IN.Highest_Level_Alarm = 4))) and DEFS__is_therapy(IM_OUT.Current_System_Mode)) => (IM_OUT.Commanded_Flow_Rate <= CONFIG_IN.Flow_Rate_KVO)))) and ((infusion_cancel_implies_flow_0 = (true -> ((TLM_MODE_IN.System_On and OP_CMD_IN.Infusion_Cancel) => (IM_OUT.Current_System_Mode = 1)))) and ((alarm_L2_implies_no_bolus = ((TLM_MODE_IN.System_On and (ALARM_IN.Highest_Level_Alarm = 2)) => ((not (IM_OUT.Current_System_Mode = 3)) or (not (IM_OUT.Current_System_Mode = 4))))) and ((alarm_L3_implies_flow_rate_kvo = (((TLM_MODE_IN.System_On and (ALARM_IN.Highest_Level_Alarm = 3)) and DEFS__is_therapy(IM_OUT.Current_System_Mode)) => (IM_OUT.Commanded_Flow_Rate = CONFIG_IN.Flow_Rate_KVO))) and ((alarm_L4_implies_flow_rate_zero = ((TLM_MODE_IN.System_On and (ALARM_IN.Highest_Level_Alarm = 4)) => (IM_OUT.Commanded_Flow_Rate = 0))) and ((mode_0_1_implies_flow_rate_0 = (((not TLM_MODE_IN.System_On) and (IM_OUT.Current_System_Mode < 2)) => (IM_OUT.Commanded_Flow_Rate = 0))) and ((not_system_on_implies_mode_0 = ((not TLM_MODE_IN.System_On) => (IM_OUT.Current_System_Mode = 0))) and ((system_on_implies_idle = ((((not IM_initial) and ((pre IM_OUT.Current_System_Mode) = 0)) and TLM_MODE_IN.System_On) => ((IM_OUT.Current_System_Mode = 1) and (IM_OUT.Commanded_Flow_Rate = 0)))) and ((initial_system_on_implies_idle = ((IM_initial and TLM_MODE_IN.System_On) => (IM_OUT.Current_System_Mode = 1))) and ((mode_range = (((((((((IM_OUT.Current_System_Mode = 0) and (IM_OUT.Commanded_Flow_Rate = 0)) or ((IM_OUT.Current_System_Mode = 1) and (IM_OUT.Commanded_Flow_Rate = 0))) or ((IM_OUT.Current_System_Mode = 2) and SYS_STAT_IN.In_Therapy)) or ((IM_OUT.Current_System_Mode = 3) and SYS_STAT_IN.In_Therapy)) or ((IM_OUT.Current_System_Mode = 4) and SYS_STAT_IN.In_Therapy)) or ((IM_OUT.Current_System_Mode = 6) and SYS_STAT_IN.In_Therapy)) or ((IM_OUT.Current_System_Mode = 7) and SYS_STAT_IN.In_Therapy)) or (IM_OUT.Current_System_Mode = 8))) and ((Patient_Bolus_Delivered_Count = (0 -> (if ((IM_OUT.Current_System_Mode = 3) and (not ((pre IM_OUT.Current_System_Mode) = 3))) then ((pre Patient_Bolus_Delivered_Count) + 1) else (pre Patient_Bolus_Delivered_Count)))) and ((IM_initial = (true -> false)) and ((__ASSUME__HIST => (__GUARANTEE19 and (__GUARANTEE18 and (__GUARANTEE17 and (__GUARANTEE16 and (__GUARANTEE15 and (__GUARANTEE14 and (__GUARANTEE13 and (__GUARANTEE12 and (__GUARANTEE11 and (__GUARANTEE10 and (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true))))))))))))))))))))) and true))))))))))))))))))))))));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9, __GUARANTEE10, __GUARANTEE11, __GUARANTEE12, __GUARANTEE13, __GUARANTEE14, __GUARANTEE15, __GUARANTEE16, __GUARANTEE17, __GUARANTEE18, __GUARANTEE19;

tel;

node _TOP__OUTPUT(
  __ASSUME__HIST : bool;
  TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  SYS_STAT_IN : DATATYPES__System_Status_Outputs__Impl;
  ALARM_IN : DATATYPES__Alarm_Outputs__Impl;
  CONFIG_IN : DATATYPES__Config_Outputs__Impl;
  IM_IN : DATATYPES__Infusion_Manager_Outputs__Impl;
  SYS_MON_IN : DATATYPES__System_Monitor_Output__Impl;
  LOG_IN : DATATYPES__Log_Output__Impl;
  time : real;
  GPCA_SW_OUT : DATATYPES__GPCA_SW_Outputs__Impl
) returns (
  __ASSERT : bool
);
var
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
  __GUARANTEE11 : bool;
  __GUARANTEE12 : bool;
  __GUARANTEE13 : bool;
  __GUARANTEE14 : bool;
  __GUARANTEE15 : bool;
  __GUARANTEE16 : bool;
  __GUARANTEE17 : bool;
  __GUARANTEE18 : bool;
  __GUARANTEE19 : bool;
  __GUARANTEE20 : bool;
  __GUARANTEE21 : bool;
  __GUARANTEE22 : bool;
  __GUARANTEE23 : bool;
  __GUARANTEE24 : bool;
  __GUARANTEE25 : bool;
  __GUARANTEE26 : bool;
  __GUARANTEE27 : bool;
  __GUARANTEE28 : bool;
  __GUARANTEE29 : bool;
  __GUARANTEE30 : bool;
  __GUARANTEE31 : bool;
  __GUARANTEE32 : bool;
let
  __GUARANTEE0 = (TLM_MODE_IN.Request_Confirm_Stop = GPCA_SW_OUT.Request_Confirm_Stop);

  __GUARANTEE1 = (SYS_STAT_IN.Volume_Infused = GPCA_SW_OUT.Volume_Infused);

  __GUARANTEE2 = (SYS_STAT_IN.Reservoir_Volume = GPCA_SW_OUT.Reservoir_Volume);

  __GUARANTEE3 = (ALARM_IN.Is_Audio_Disabled = GPCA_SW_OUT.Is_Audio_Disabled);

  __GUARANTEE4 = (ALARM_IN.Notification_Message = GPCA_SW_OUT.Notification_Message);

  __GUARANTEE5 = (ALARM_IN.Audio_Notification_Command = GPCA_SW_OUT.Audio_Notification_Command);

  __GUARANTEE6 = (CONFIG_IN.Patient_ID = GPCA_SW_OUT.Patient_ID);

  __GUARANTEE7 = (CONFIG_IN.Drug_Name = GPCA_SW_OUT.Drug_Name);

  __GUARANTEE8 = (CONFIG_IN.Drug_Concentration = GPCA_SW_OUT.Drug_Concentration);

  __GUARANTEE9 = (CONFIG_IN.Infusion_Total_Duration = GPCA_SW_OUT.Infusion_Total_Duration);

  __GUARANTEE10 = (CONFIG_IN.VTBI_Total = GPCA_SW_OUT.VTBI_Total);

  __GUARANTEE11 = (CONFIG_IN.Flow_Rate_Basal = GPCA_SW_OUT.Flow_Rate_Basal);

  __GUARANTEE12 = (CONFIG_IN.Flow_Rate_Intermittent_Bolus = GPCA_SW_OUT.Flow_Rate_Intermittent_Bolus);

  __GUARANTEE13 = (CONFIG_IN.Duration_Intermittent_Bolus = GPCA_SW_OUT.Duration_Intermittent_Bolus);

  __GUARANTEE14 = (CONFIG_IN.Interval_Intermittent_Bolus = GPCA_SW_OUT.Interval_Intermittent_Bolus);

  __GUARANTEE15 = (CONFIG_IN.Flow_Rate_Patient_Bolus = GPCA_SW_OUT.Flow_Rate_Patient_Bolus);

  __GUARANTEE16 = (CONFIG_IN.Duration_Patient_Bolus = GPCA_SW_OUT.Duration_Patient_Bolus);

  __GUARANTEE17 = (CONFIG_IN.Lockout_Period_Patient_Bolus = GPCA_SW_OUT.Lockout_Period_Patient_Bolus);

  __GUARANTEE18 = (CONFIG_IN.Max_Number_of_Patient_Bolus = GPCA_SW_OUT.Max_Number_of_Patient_Bolus);

  __GUARANTEE19 = (CONFIG_IN.Flow_Rate_KVO = GPCA_SW_OUT.Flow_Rate_KVO);

  __GUARANTEE20 = (CONFIG_IN.Entered_Reservoir_Volume = GPCA_SW_OUT.Entered_Reservoir_Volume);

  __GUARANTEE21 = (CONFIG_IN.Configured = GPCA_SW_OUT.Configured);

  __GUARANTEE22 = (CONFIG_IN.Error_Message_ID = GPCA_SW_OUT.Error_Message_ID);

  __GUARANTEE23 = (CONFIG_IN.Request_Config_Type = GPCA_SW_OUT.Request_Config_Type);

  __GUARANTEE24 = (CONFIG_IN.Request_Confirm_Infusion_Initiate = GPCA_SW_OUT.Request_Confirm_Infusion_Initiate);

  __GUARANTEE25 = (CONFIG_IN.Request_Patient_Drug_Info = GPCA_SW_OUT.Request_Patient_Drug_Info);

  __GUARANTEE26 = (CONFIG_IN.Request_Infusion_Info = GPCA_SW_OUT.Request_Infusion_Info);

  __GUARANTEE27 = (IM_IN.Current_System_Mode = GPCA_SW_OUT.Current_System_Mode);

  __GUARANTEE28 = (IM_IN.Actual_Infusion_Duration = GPCA_SW_OUT.Actual_Infusion_Duration);

  __GUARANTEE29 = (IM_IN.Commanded_Flow_Rate = GPCA_SW_OUT.Commanded_Flow_Rate);

  __GUARANTEE30 = (IM_IN.New_Infusion = GPCA_SW_OUT.New_Infusion);

  __GUARANTEE31 = (IM_IN.Is_Locked_Out = GPCA_SW_OUT.Is_Locked_Out);

  __GUARANTEE32 = (LOG_IN.Log = GPCA_SW_OUT.Log);

  __ASSERT = (true and ((__ASSUME__HIST => (__GUARANTEE32 and (__GUARANTEE31 and (__GUARANTEE30 and (__GUARANTEE29 and (__GUARANTEE28 and (__GUARANTEE27 and (__GUARANTEE26 and (__GUARANTEE25 and (__GUARANTEE24 and (__GUARANTEE23 and (__GUARANTEE22 and (__GUARANTEE21 and (__GUARANTEE20 and (__GUARANTEE19 and (__GUARANTEE18 and (__GUARANTEE17 and (__GUARANTEE16 and (__GUARANTEE15 and (__GUARANTEE14 and (__GUARANTEE13 and (__GUARANTEE12 and (__GUARANTEE11 and (__GUARANTEE10 and (__GUARANTEE9 and (__GUARANTEE8 and (__GUARANTEE7 and (__GUARANTEE6 and (__GUARANTEE5 and (__GUARANTEE4 and (__GUARANTEE3 and (__GUARANTEE2 and (__GUARANTEE1 and (__GUARANTEE0 and true)))))))))))))))))))))))))))))))))) and true));

  --%IVC __GUARANTEE0, __GUARANTEE1, __GUARANTEE2, __GUARANTEE3, __GUARANTEE4, __GUARANTEE5, __GUARANTEE6, __GUARANTEE7, __GUARANTEE8, __GUARANTEE9, __GUARANTEE10, __GUARANTEE11, __GUARANTEE12, __GUARANTEE13, __GUARANTEE14, __GUARANTEE15, __GUARANTEE16, __GUARANTEE17, __GUARANTEE18, __GUARANTEE19, __GUARANTEE20, __GUARANTEE21, __GUARANTEE22, __GUARANTEE23, __GUARANTEE24, __GUARANTEE25, __GUARANTEE26, __GUARANTEE27, __GUARANTEE28, __GUARANTEE29, __GUARANTEE30, __GUARANTEE31, __GUARANTEE32;

tel;

node main(
  TLM__system_start_implies_system_on : bool;
  TLM__not_system_start_implies_system_off : bool;
  TLM__system_stop_implies_not_system_on : bool;
  TLM__TLM_MODE_OUT : DATATYPES__Top_Level_Mode_Outputs__Impl;
  TLM____ASSUME__HIST : bool;
  SYS_STAT__empty_reservoir_condition : bool;
  SYS_STAT__empty_reservoir_exclusive : bool;
  SYS_STAT__mode_grt_1_implies_In_Therapy : bool;
  SYS_STAT__mode_not_grt_1_implies_not_In_Therapy : bool;
  SYS_STAT__SYS_STAT_OUT : DATATYPES__System_Status_Outputs__Impl;
  SYS_STAT____ASSUME__HIST : bool;
  ALARM__ALM_Initial : bool;
  ALARM__level_4_alarm : bool;
  ALARM__Time_FR_Over_Min_Tol : int;
  ALARM__Is_Over_Infusion : bool;
  ALARM__level_3_alarm : bool;
  ALARM__low_reservoiur : bool;
  ALARM__level_2_alarm : bool;
  ALARM__Time_FR_Under_Min_Tol : int;
  ALARM__is_under_infusion : bool;
  ALARM__level_1_alarm : bool;
  ALARM__Paused_Time_Counter : int;
  ALARM__Idle_Time_Counter : int;
  ALARM__Config_Timer : int;
  ALARM__alarm_range : bool;
  ALARM__level4_conditions_implies_highest_level_4 : bool;
  ALARM__level3_conditions_implies_highest_level_3 : bool;
  ALARM__level2_conditions_implies_highest_level_2 : bool;
  ALARM__level1_conditions_implies_highest_level_1 : bool;
  ALARM__no_conditions_implies_highest_level_0 : bool;
  ALARM__alarm_gte_L3_causes_audio_output_EQ_audio_level : bool;
  ALARM__no_audio_if_audio_disabled : bool;
  ALARM__alarm_gt_3_no_audio_disable_implies_audio : bool;
  ALARM__empty_reservoir_implies_visual_1 : bool;
  ALARM__patient_bolus_counter : int;
  ALARM__alarm_3_or_4_implies_audio : bool;
  ALARM__level_4_alarm_visual : bool;
  ALARM__emptry_res_visual_implies_error : bool;
  ALARM__enviro_visual_implies_error : bool;
  ALARM__hardware_visual_implies_error : bool;
  ALARM__level_3_alarm_visual : bool;
  ALARM__over_fr_visual_implies_error : bool;
  ALARM__over_vtbi_visual_implies_error : bool;
  ALARM__air_visual_implies_error : bool;
  ALARM__occlusion_visual_implies_error : bool;
  ALARM__door_visual_implies_error : bool;
  ALARM__level_2_alarm_visual : bool;
  ALARM__low_res_visial_implies_error : bool;
  ALARM__level_1_alarm_visual : bool;
  ALARM__under_fr_visual_implies_error : bool;
  ALARM__unstable_fr_visual_implies_error : bool;
  ALARM__idle_time_visual_implies_error : bool;
  ALARM__pause_time_visual_implies_error : bool;
  ALARM__config_time_visual_implies_error : bool;
  ALARM__battery_visual_implies_error : bool;
  ALARM__pump_hot_visual_implies_error : bool;
  ALARM__not_system_on_implies_no_alarm : bool;
  ALARM__ALARM_OUT : DATATYPES__Alarm_Outputs__Impl;
  ALARM____ASSUME__HIST : bool;
  CONFIG__flow_rate_kvo_gt_0 : bool;
  CONFIG__config_range : bool;
  CONFIG__Infusion_Total_Duration : bool;
  CONFIG__config_gt_1_implies_values_configured : bool;
  CONFIG__configuration_type_request : bool;
  CONFIG__validate_configured_patient_drug_info : bool;
  CONFIG__validate_configured_infusion_info : bool;
  CONFIG__CONFIG_OUT : DATATYPES__Config_Outputs__Impl;
  CONFIG____ASSUME__HIST : bool;
  IM__mode_range : bool;
  IM__IM_initial : bool;
  IM__initial_system_on_implies_idle : bool;
  IM__system_on_implies_idle : bool;
  IM__not_system_on_implies_mode_0 : bool;
  IM__mode_0_1_implies_flow_rate_0 : bool;
  IM__alarm_L4_implies_flow_rate_zero : bool;
  IM__alarm_L3_implies_flow_rate_kvo : bool;
  IM__alarm_L2_implies_no_bolus : bool;
  IM__infusion_cancel_implies_flow_0 : bool;
  IM__infusion_pause_implies_flow_kvo : bool;
  IM__no_config_implies_mode_1 : bool;
  IM__no_patient_request_imples_no_pbolus : bool;
  IM__infusion_initiation_requires_prescription : bool;
  IM__basal_fr : bool;
  IM__Patient_Bolus_Delivered_Count : int;
  IM__ignore_patient_bolus_request : bool;
  IM__infusion_complete_implies_idle : bool;
  IM__infusion_inhibit_implies_paused : bool;
  IM__basal_transition_to_pbolus : bool;
  IM__sbolus_transition_to_pbolus : bool;
  IM__transition_to_pbolus : bool;
  IM__IM_OUT : DATATYPES__Infusion_Manager_Outputs__Impl;
  IM____ASSUME__HIST : bool;
  OUTPUT__GPCA_SW_OUT : DATATYPES__GPCA_SW_Outputs__Impl;
  OUTPUT____ASSUME__HIST : bool;
  sys_initial : bool;
  Time_FR_Under_Min_Tol : int;
  is_under_infusion : bool;
  Time_FR_Over_Min_Tol : int;
  Is_Over_Infusion : bool;
  Paused_Time_Counter : int;
  Idle_Time_Counter : int;
  Config_Timer : int;
  is_on : bool;
  is_therapy : bool;
  is_active : bool;
  level_4_alarm : bool;
  level_3_alarm : bool;
  level_2_alarm : bool;
  level_1_alarm : bool;
  mode_range : bool;
  not_system_start_implies_mode_0 : bool;
  initial_system_start_implies_mode_idle : bool;
  off_to_on_implies_mode_idle : bool;
  empty_reservoir_and_In_therapy_implies_no_flow : bool;
  environmental_error_implies_no_flow : bool;
  hardware_error_implies_no_flow : bool;
  volume_infused_exceeds_VTBI_Hi : bool;
  flow_rate_exceeds_flow_rate_Hi : bool;
  AirInLine_implies_flow_at_most_KVO : bool;
  occlusion_implies_flow_at_most_KVO : bool;
  door_open_implies_flow_at_most_KVO : bool;
  low_reservoir_and_In_therapy_implies_no_bolus : bool;
  infusion_cancel_implies_idle : bool;
  infusion_pause_implies_flow_kvo : bool;
  no_audio_if_audio_disabled : bool;
  no_config_implies_mode_1 : bool;
  empty_reservoir_implies_audio : bool;
  empty_reservoir_implies_visual_1 : bool;
  no_patient_request_imples_no_pbolus : bool;
  off_imples_fr_0 : bool;
  idle_imples_fr_0 : bool;
  system_stop_implies_off : bool;
  infusion_initiation_requires_prescription : bool;
  basal_fr : bool;
  Patient_Bolus_Delivered_Count : int;
  ignore_patient_bolus_request : bool;
  infusion_complete_implies_idle : bool;
  infusion_inhibit_implies_paused : bool;
  basal_transition_to_pbolus : bool;
  sbolus_transition_to_pbolus : bool;
  level_4_alarm_visual : bool;
  empty_res_visual_implies_error : bool;
  enviro_visual_implies_error : bool;
  hardware_visual_implies_error : bool;
  level_3_alarm_visual : bool;
  over_fr_visual_implies_error : bool;
  over_vtbi_visual_implies_error : bool;
  air_visual_implies_error : bool;
  occlusion_visual_implies_error : bool;
  door_visual_implies_error : bool;
  level_2_alarm_visual : bool;
  low_res_visial_implies_error : bool;
  level_1_alarm_visual : bool;
  under_fr_visual_implies_error : bool;
  unstable_fr_visual_implies_error : bool;
  idle_time_visual_implies_error : bool;
  pause_time_visual_implies_error : bool;
  config_time_visual_implies_error : bool;
  battery_visual_implies_error : bool;
  pump_hot_visual_implies_error : bool;
  alarm_3_or_4_implies_audio : bool;
  configuration_type_request : bool;
  validate_configured_patient_drug_info : bool;
  validate_configured_infusion_info : bool;
  GPCA_SW_OUT : DATATYPES__GPCA_SW_Outputs__Impl;
  TLM__OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  TLM__CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  TLM__time : real;
  SYS_STAT__IM_IN : DATATYPES__Infusion_Manager_Outputs__Impl;
  SYS_STAT__TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  SYS_STAT__SENSOR_IN : DATATYPES__Device_Sensor_Inputs__Impl;
  SYS_STAT__CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  SYS_STAT__CONFIG_IN : DATATYPES__Config_Outputs__Impl;
  SYS_STAT__time : real;
  ALARM__IM_IN : DATATYPES__Infusion_Manager_Outputs__Impl;
  ALARM__TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  ALARM__SYS_MON_IN : DATATYPES__System_Monitor_Output__Impl;
  ALARM__LOGGING_IN : DATATYPES__Log_Output__Impl;
  ALARM__OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  ALARM__DB_IN : DATATYPES__Drug_Database_Inputs__Impl;
  ALARM__SENSOR_IN : DATATYPES__Device_Sensor_Inputs__Impl;
  ALARM__CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  ALARM__SYS_STAT_IN : DATATYPES__System_Status_Outputs__Impl;
  ALARM__CONFIG_IN : DATATYPES__Config_Outputs__Impl;
  ALARM__time : real;
  CONFIG__TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  CONFIG__PRES_IN : DATATYPES__Prescription_Inputs__Impl;
  CONFIG__OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  CONFIG__DB_IN : DATATYPES__Drug_Database_Inputs__Impl;
  CONFIG__CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  CONFIG__SYS_STAT_IN : DATATYPES__System_Status_Outputs__Impl;
  CONFIG__time : real;
  IM__TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  IM__OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  IM__PATIENT_IN : DATATYPES__Patient_Inputs__Impl;
  IM__CONFIG_IN : DATATYPES__Config_Outputs__Impl;
  IM__ALARM_IN : DATATYPES__Alarm_Outputs__Impl;
  IM__SYS_STAT_IN : DATATYPES__System_Status_Outputs__Impl;
  IM__time : real;
  OUTPUT__TLM_MODE_IN : DATATYPES__Top_Level_Mode_Outputs__Impl;
  OUTPUT__SYS_STAT_IN : DATATYPES__System_Status_Outputs__Impl;
  OUTPUT__ALARM_IN : DATATYPES__Alarm_Outputs__Impl;
  OUTPUT__CONFIG_IN : DATATYPES__Config_Outputs__Impl;
  OUTPUT__IM_IN : DATATYPES__Infusion_Manager_Outputs__Impl;
  OUTPUT__SYS_MON_IN : DATATYPES__System_Monitor_Output__Impl;
  OUTPUT__LOG_IN : DATATYPES__Log_Output__Impl;
  OUTPUT__time : real;
  OP_CMD_IN : DATATYPES__Operator_Commands__Impl;
  PRES_IN : DATATYPES__Prescription_Inputs__Impl;
  PATIENT_IN : DATATYPES__Patient_Inputs__Impl;
  SENSOR_IN : DATATYPES__Device_Sensor_Inputs__Impl;
  CONST_IN : DATATYPES__Device_Configuration_Inputs__Impl;
  DB_IN : DATATYPES__Drug_Database_Inputs__Impl;
  time : real
) returns (

);
var
  __ASSUME0 : bool;
  __ASSUME1 : bool;
  __ASSUME2 : bool;
  __ASSUME3 : bool;
  __ASSUME4 : bool;
  __ASSUME5 : bool;
  __ASSUME__HIST : bool;
  __GUARANTEE0 : bool;
  __GUARANTEE1 : bool;
  __GUARANTEE2 : bool;
  __GUARANTEE3 : bool;
  __GUARANTEE4 : bool;
  __GUARANTEE5 : bool;
  __GUARANTEE6 : bool;
  __GUARANTEE7 : bool;
  __GUARANTEE8 : bool;
  __GUARANTEE9 : bool;
  __GUARANTEE10 : bool;
  __GUARANTEE11 : bool;
  __GUARANTEE12 : bool;
  __GUARANTEE13 : bool;
  __GUARANTEE14 : bool;
  __GUARANTEE15 : bool;
  __GUARANTEE16 : bool;
  __GUARANTEE17 : bool;
  __GUARANTEE18 : bool;
  __GUARANTEE19 : bool;
  __GUARANTEE20 : bool;
  __GUARANTEE21 : bool;
  __GUARANTEE22 : bool;
  __GUARANTEE23 : bool;
  __GUARANTEE24 : bool;
  __GUARANTEE25 : bool;
  __GUARANTEE26 : bool;
  __GUARANTEE27 : bool;
  __GUARANTEE28 : bool;
  __GUARANTEE29 : bool;
  __GUARANTEE30 : bool;
  __GUARANTEE31 : bool;
  __GUARANTEE32 : bool;
  __GUARANTEE33 : bool;
  __GUARANTEE34 : bool;
  __GUARANTEE35 : bool;
  __GUARANTEE36 : bool;
  __GUARANTEE37 : bool;
  __GUARANTEE38 : bool;
  __GUARANTEE39 : bool;
  __GUARANTEE40 : bool;
  __GUARANTEE41 : bool;
  __GUARANTEE42 : bool;
  __GUARANTEE43 : bool;
  __GUARANTEE44 : bool;
  __GUARANTEE45 : bool;
  __GUARANTEE46 : bool;
  __GUARANTEE47 : bool;
  __GUARANTEE48 : bool;
  __GUARANTEE49 : bool;
  __GUARANTEE50 : bool;
  __GUARANTEE51 : bool;
  __GUARANTEE52 : bool;
  __GUARANTEE53 : bool;
  __GUARANTEE54 : bool;
  __GUARANTEE55 : bool;
  __GUARANTEE56 : bool;
  __GUARANTEE57 : bool;
  __GUARANTEE58 : bool;
  __GUARANTEE59 : bool;
let
  --%MAIN;
  __ASSUME0 = (DB_IN.VTBI_High >= 0);

  __ASSUME1 = (CONST_IN.Empty_Reservoir > 0);

  __ASSUME2 = (CONST_IN.Empty_Reservoir < CONST_IN.Low_Reservoir);

  __ASSUME3 = (not (OP_CMD_IN.System_Start and OP_CMD_IN.System_Stop));

  __ASSUME4 = (not (OP_CMD_IN.Infusion_Inhibit and OP_CMD_IN.Infusion_Cancel));

  __ASSUME5 = (GPCA_SW_OUT.Max_Number_of_Patient_Bolus >= 0);

  __ASSUME__HIST = (OUTPUT____ASSUME__HIST and (IM____ASSUME__HIST and (CONFIG____ASSUME__HIST and (ALARM____ASSUME__HIST and (SYS_STAT____ASSUME__HIST and (TLM____ASSUME__HIST and true))))));

  __GUARANTEE0 = (Idle_Time_Counter = ALARM__Idle_Time_Counter);

  __GUARANTEE1 = (Config_Timer = ALARM__Config_Timer);

  __GUARANTEE2 = (Paused_Time_Counter = ALARM__Paused_Time_Counter);

  __GUARANTEE3 = (Time_FR_Over_Min_Tol = ALARM__Time_FR_Over_Min_Tol);

  __GUARANTEE4 = (Time_FR_Under_Min_Tol = ALARM__Time_FR_Under_Min_Tol);

  __GUARANTEE5 = (Patient_Bolus_Delivered_Count = IM__Patient_Bolus_Delivered_Count);

  __GUARANTEE6 = mode_range;

  __GUARANTEE7 = not_system_start_implies_mode_0;

  __GUARANTEE8 = initial_system_start_implies_mode_idle;

  __GUARANTEE9 = off_to_on_implies_mode_idle;

  __GUARANTEE10 = empty_reservoir_and_In_therapy_implies_no_flow;

  __GUARANTEE11 = environmental_error_implies_no_flow;

  __GUARANTEE12 = hardware_error_implies_no_flow;

  __GUARANTEE13 = volume_infused_exceeds_VTBI_Hi;

  __GUARANTEE14 = flow_rate_exceeds_flow_rate_Hi;

  __GUARANTEE15 = AirInLine_implies_flow_at_most_KVO;

  __GUARANTEE16 = occlusion_implies_flow_at_most_KVO;

  __GUARANTEE17 = door_open_implies_flow_at_most_KVO;

  __GUARANTEE18 = low_reservoir_and_In_therapy_implies_no_bolus;

  __GUARANTEE19 = infusion_cancel_implies_idle;

  __GUARANTEE20 = infusion_pause_implies_flow_kvo;

  __GUARANTEE21 = no_audio_if_audio_disabled;

  __GUARANTEE22 = no_config_implies_mode_1;

  __GUARANTEE23 = empty_reservoir_implies_audio;

  __GUARANTEE24 = empty_reservoir_implies_visual_1;

  __GUARANTEE25 = no_patient_request_imples_no_pbolus;

  __GUARANTEE26 = off_imples_fr_0;

  __GUARANTEE27 = idle_imples_fr_0;

  __GUARANTEE28 = system_stop_implies_off;

  __GUARANTEE29 = infusion_initiation_requires_prescription;

  __GUARANTEE30 = basal_fr;

  __GUARANTEE31 = ignore_patient_bolus_request;

  __GUARANTEE32 = infusion_complete_implies_idle;

  __GUARANTEE33 = infusion_inhibit_implies_paused;

  __GUARANTEE34 = basal_transition_to_pbolus;

  __GUARANTEE35 = sbolus_transition_to_pbolus;

  __GUARANTEE36 = level_4_alarm_visual;

  __GUARANTEE37 = empty_res_visual_implies_error;

  __GUARANTEE38 = enviro_visual_implies_error;

  __GUARANTEE39 = hardware_visual_implies_error;

  __GUARANTEE40 = level_3_alarm_visual;

  __GUARANTEE41 = over_fr_visual_implies_error;

  __GUARANTEE42 = over_vtbi_visual_implies_error;

  __GUARANTEE43 = air_visual_implies_error;

  __GUARANTEE44 = occlusion_visual_implies_error;

  __GUARANTEE45 = door_visual_implies_error;

  __GUARANTEE46 = level_2_alarm_visual;

  __GUARANTEE47 = low_res_visial_implies_error;

  __GUARANTEE48 = level_1_alarm_visual;

  __GUARANTEE49 = under_fr_visual_implies_error;

  __GUARANTEE50 = unstable_fr_visual_implies_error;

  __GUARANTEE51 = idle_time_visual_implies_error;

  __GUARANTEE52 = pause_time_visual_implies_error;

  __GUARANTEE53 = config_time_visual_implies_error;

  __GUARANTEE54 = battery_visual_implies_error;

  __GUARANTEE55 = pump_hot_visual_implies_error;

  __GUARANTEE56 = alarm_3_or_4_implies_audio;

  __GUARANTEE57 = configuration_type_request;

  __GUARANTEE58 = validate_configured_patient_drug_info;

  __GUARANTEE59 = validate_configured_infusion_info;

  assert __ASSUME0;

  assert __ASSUME1;

  assert __ASSUME2;

  assert __ASSUME3;

  assert __ASSUME4;

  assert __ASSUME5;

  assert (time = TLM__time);

  assert _TOP__TLM(TLM____ASSUME__HIST, TLM__OP_CMD_IN, TLM__CONST_IN, TLM__time, TLM__system_start_implies_system_on, TLM__not_system_start_implies_system_off, TLM__system_stop_implies_not_system_on, TLM__TLM_MODE_OUT);

  assert (TLM____ASSUME__HIST = __HIST(true));

  assert (time = SYS_STAT__time);

  assert _TOP__SYS_STAT(SYS_STAT____ASSUME__HIST, SYS_STAT__IM_IN, SYS_STAT__TLM_MODE_IN, SYS_STAT__SENSOR_IN, SYS_STAT__CONST_IN, SYS_STAT__CONFIG_IN, SYS_STAT__time, SYS_STAT__empty_reservoir_condition, SYS_STAT__empty_reservoir_exclusive, SYS_STAT__mode_grt_1_implies_In_Therapy, SYS_STAT__mode_not_grt_1_implies_not_In_Therapy, SYS_STAT__SYS_STAT_OUT);

  assert (SYS_STAT____ASSUME__HIST = __HIST(true));

  assert (time = ALARM__time);

  assert _TOP__ALARM(ALARM____ASSUME__HIST, ALARM__IM_IN, ALARM__TLM_MODE_IN, ALARM__SYS_MON_IN, ALARM__LOGGING_IN, ALARM__OP_CMD_IN, ALARM__DB_IN, ALARM__SENSOR_IN, ALARM__CONST_IN, ALARM__SYS_STAT_IN, ALARM__CONFIG_IN, ALARM__time, ALARM__ALM_Initial, ALARM__level_4_alarm, ALARM__Time_FR_Over_Min_Tol, ALARM__Is_Over_Infusion, ALARM__level_3_alarm, ALARM__low_reservoiur, ALARM__level_2_alarm, ALARM__Time_FR_Under_Min_Tol, ALARM__is_under_infusion, ALARM__level_1_alarm, ALARM__Paused_Time_Counter, ALARM__Idle_Time_Counter, ALARM__Config_Timer, ALARM__alarm_range, ALARM__level4_conditions_implies_highest_level_4, ALARM__level3_conditions_implies_highest_level_3, ALARM__level2_conditions_implies_highest_level_2, ALARM__level1_conditions_implies_highest_level_1, ALARM__no_conditions_implies_highest_level_0, ALARM__alarm_gte_L3_causes_audio_output_EQ_audio_level, ALARM__no_audio_if_audio_disabled, ALARM__alarm_gt_3_no_audio_disable_implies_audio, ALARM__empty_reservoir_implies_visual_1, ALARM__patient_bolus_counter, ALARM__alarm_3_or_4_implies_audio, ALARM__level_4_alarm_visual, ALARM__emptry_res_visual_implies_error, ALARM__enviro_visual_implies_error, ALARM__hardware_visual_implies_error, ALARM__level_3_alarm_visual, ALARM__over_fr_visual_implies_error, ALARM__over_vtbi_visual_implies_error, ALARM__air_visual_implies_error, ALARM__occlusion_visual_implies_error, ALARM__door_visual_implies_error, ALARM__level_2_alarm_visual, ALARM__low_res_visial_implies_error, ALARM__level_1_alarm_visual, ALARM__under_fr_visual_implies_error, ALARM__unstable_fr_visual_implies_error, ALARM__idle_time_visual_implies_error, ALARM__pause_time_visual_implies_error, ALARM__config_time_visual_implies_error, ALARM__battery_visual_implies_error, ALARM__pump_hot_visual_implies_error, ALARM__not_system_on_implies_no_alarm, ALARM__ALARM_OUT);

  assert (ALARM____ASSUME__HIST = __HIST(true));

  assert (time = CONFIG__time);

  assert _TOP__CONFIG(CONFIG____ASSUME__HIST, CONFIG__TLM_MODE_IN, CONFIG__PRES_IN, CONFIG__OP_CMD_IN, CONFIG__DB_IN, CONFIG__CONST_IN, CONFIG__SYS_STAT_IN, CONFIG__time, CONFIG__flow_rate_kvo_gt_0, CONFIG__config_range, CONFIG__Infusion_Total_Duration, CONFIG__config_gt_1_implies_values_configured, CONFIG__configuration_type_request, CONFIG__validate_configured_patient_drug_info, CONFIG__validate_configured_infusion_info, CONFIG__CONFIG_OUT);

  assert (CONFIG____ASSUME__HIST = __HIST(true));

  assert (time = IM__time);

  assert _TOP__IM(IM____ASSUME__HIST, IM__TLM_MODE_IN, IM__OP_CMD_IN, IM__PATIENT_IN, IM__CONFIG_IN, IM__ALARM_IN, IM__SYS_STAT_IN, IM__time, IM__mode_range, IM__IM_initial, IM__initial_system_on_implies_idle, IM__system_on_implies_idle, IM__not_system_on_implies_mode_0, IM__mode_0_1_implies_flow_rate_0, IM__alarm_L4_implies_flow_rate_zero, IM__alarm_L3_implies_flow_rate_kvo, IM__alarm_L2_implies_no_bolus, IM__infusion_cancel_implies_flow_0, IM__infusion_pause_implies_flow_kvo, IM__no_config_implies_mode_1, IM__no_patient_request_imples_no_pbolus, IM__infusion_initiation_requires_prescription, IM__basal_fr, IM__Patient_Bolus_Delivered_Count, IM__ignore_patient_bolus_request, IM__infusion_complete_implies_idle, IM__infusion_inhibit_implies_paused, IM__basal_transition_to_pbolus, IM__sbolus_transition_to_pbolus, IM__transition_to_pbolus, IM__IM_OUT);

  assert (IM____ASSUME__HIST = __HIST(true));

  assert (time = OUTPUT__time);

  assert _TOP__OUTPUT(OUTPUT____ASSUME__HIST, OUTPUT__TLM_MODE_IN, OUTPUT__SYS_STAT_IN, OUTPUT__ALARM_IN, OUTPUT__CONFIG_IN, OUTPUT__IM_IN, OUTPUT__SYS_MON_IN, OUTPUT__LOG_IN, OUTPUT__time, OUTPUT__GPCA_SW_OUT);

  assert (OUTPUT____ASSUME__HIST = __HIST(true));

  assert (OP_CMD_IN = TLM__OP_CMD_IN);

  assert (CONST_IN = TLM__CONST_IN);

  assert (TLM__TLM_MODE_OUT = OUTPUT__TLM_MODE_IN);

  assert ((DATATYPES__Infusion_Manager_Outputs__Impl {Actual_Infusion_Duration = 0; Commanded_Flow_Rate = 0; Current_System_Mode = 0; Is_Locked_Out = false; Log_Message_ID = 0; New_Infusion = false} -> (pre IM__IM_OUT)) = SYS_STAT__IM_IN);

  assert (TLM__TLM_MODE_OUT = SYS_STAT__TLM_MODE_IN);

  assert (SENSOR_IN = SYS_STAT__SENSOR_IN);

  assert (CONST_IN = SYS_STAT__CONST_IN);

  assert ((DATATYPES__Config_Outputs__Impl {Config_Mode = 0; Config_Timer = 0; Configured = 0; Drug_Concentration = 0; Drug_Name = 0; Duration_Intermittent_Bolus = 0; Duration_Patient_Bolus = 0; Entered_Reservoir_Volume = 0; Error_Message_ID = 0; Flow_Rate_Basal = 0; Flow_Rate_Intermittent_Bolus = 0; Flow_Rate_KVO = 0; Flow_Rate_Patient_Bolus = 0; Infusion_Total_Duration = 0; Interval_Intermittent_Bolus = 0; Lockout_Period_Patient_Bolus = 0; Log_Message_ID = 0; Max_Number_of_Patient_Bolus = 0; Patient_ID = 0; Request_Config_Type = false; Request_Confirm_Infusion_Initiate = false; Request_Infusion_Info = false; Request_Patient_Drug_Info = false; Reservoir_Volume = 0; VTBI_Total = 0} -> (pre CONFIG__CONFIG_OUT)) = SYS_STAT__CONFIG_IN);

  assert (SYS_STAT__SYS_STAT_OUT = OUTPUT__SYS_STAT_IN);

  assert ((DATATYPES__Infusion_Manager_Outputs__Impl {Actual_Infusion_Duration = 0; Commanded_Flow_Rate = 0; Current_System_Mode = 0; Is_Locked_Out = false; Log_Message_ID = 0; New_Infusion = false} -> (pre IM__IM_OUT)) = ALARM__IM_IN);

  assert (TLM__TLM_MODE_OUT = ALARM__TLM_MODE_IN);

  assert (OP_CMD_IN = ALARM__OP_CMD_IN);

  assert (DB_IN = ALARM__DB_IN);

  assert (SENSOR_IN = ALARM__SENSOR_IN);

  assert (CONST_IN = ALARM__CONST_IN);

  assert (SYS_STAT__SYS_STAT_OUT = ALARM__SYS_STAT_IN);

  assert ((DATATYPES__Config_Outputs__Impl {Config_Mode = 0; Config_Timer = 0; Configured = 0; Drug_Concentration = 0; Drug_Name = 0; Duration_Intermittent_Bolus = 0; Duration_Patient_Bolus = 0; Entered_Reservoir_Volume = 0; Error_Message_ID = 0; Flow_Rate_Basal = 0; Flow_Rate_Intermittent_Bolus = 0; Flow_Rate_KVO = 0; Flow_Rate_Patient_Bolus = 0; Infusion_Total_Duration = 0; Interval_Intermittent_Bolus = 0; Lockout_Period_Patient_Bolus = 0; Log_Message_ID = 0; Max_Number_of_Patient_Bolus = 0; Patient_ID = 0; Request_Config_Type = false; Request_Confirm_Infusion_Initiate = false; Request_Infusion_Info = false; Request_Patient_Drug_Info = false; Reservoir_Volume = 0; VTBI_Total = 0} -> (pre CONFIG__CONFIG_OUT)) = ALARM__CONFIG_IN);

  assert (ALARM__ALARM_OUT = OUTPUT__ALARM_IN);

  assert (TLM__TLM_MODE_OUT = CONFIG__TLM_MODE_IN);

  assert (PRES_IN = CONFIG__PRES_IN);

  assert (OP_CMD_IN = CONFIG__OP_CMD_IN);

  assert (DB_IN = CONFIG__DB_IN);

  assert (CONST_IN = CONFIG__CONST_IN);

  assert (SYS_STAT__SYS_STAT_OUT = CONFIG__SYS_STAT_IN);

  assert (CONFIG__CONFIG_OUT = OUTPUT__CONFIG_IN);

  assert (TLM__TLM_MODE_OUT = IM__TLM_MODE_IN);

  assert (OP_CMD_IN = IM__OP_CMD_IN);

  assert (PATIENT_IN = IM__PATIENT_IN);

  assert (CONFIG__CONFIG_OUT = IM__CONFIG_IN);

  assert (ALARM__ALARM_OUT = IM__ALARM_IN);

  assert (SYS_STAT__SYS_STAT_OUT = IM__SYS_STAT_IN);

  assert (IM__IM_OUT = OUTPUT__IM_IN);

  assert (OUTPUT__GPCA_SW_OUT = GPCA_SW_OUT);

  assert (sys_initial = (true -> false));

  assert (Time_FR_Under_Min_Tol = (0 -> (if DEFS__Is_Infusion_below_tolerance(SENSOR_IN.Flow_Rate, (pre GPCA_SW_OUT.Commanded_Flow_Rate), CONST_IN.Tolerance_Min) then ((pre Time_FR_Under_Min_Tol) + 1) else 0)));

  assert (is_under_infusion = (((CONST_IN.Max_Duration_Under_Infusion < Time_FR_Under_Min_Tol) or DEFS__Is_Infusion_below_tolerance(SENSOR_IN.Flow_Rate, (pre GPCA_SW_OUT.Commanded_Flow_Rate), CONST_IN.Tolerance_Max)) or (SENSOR_IN.Flow_Rate < DB_IN.Flow_Rate_Low)));

  assert (Time_FR_Over_Min_Tol = (0 -> (if DEFS__Is_Infusion_above_tolerance(SENSOR_IN.Flow_Rate, (pre GPCA_SW_OUT.Commanded_Flow_Rate), CONST_IN.Tolerance_Min) then ((pre Time_FR_Over_Min_Tol) + 1) else 0)));

  assert (Is_Over_Infusion = (false -> (((CONST_IN.Max_Duration_Over_Infusion < Time_FR_Over_Min_Tol) or DEFS__Is_Infusion_above_tolerance(SENSOR_IN.Flow_Rate, (pre GPCA_SW_OUT.Commanded_Flow_Rate), CONST_IN.Tolerance_Max)) or (SENSOR_IN.Flow_Rate > DB_IN.Flow_Rate_High))));

  assert (Paused_Time_Counter = (0 -> (if ((((pre GPCA_SW_OUT.Current_System_Mode) = 6) or ((pre GPCA_SW_OUT.Current_System_Mode) = 7)) or ((pre GPCA_SW_OUT.Current_System_Mode) = 8)) then ((pre Paused_Time_Counter) + 1) else 0)));

  assert (Idle_Time_Counter = (0 -> (if DEFS__is_idle((pre GPCA_SW_OUT.Current_System_Mode)) then ((pre Idle_Time_Counter) + 1) else 0)));

  assert (Config_Timer = (0 -> (if ((pre GPCA_SW_OUT.Configured) > 0) then ((pre Config_Timer) + 1) else 0)));

  assert (is_on = DEFS__is_on(GPCA_SW_OUT.Current_System_Mode));

  assert (is_therapy = DEFS__is_therapy(GPCA_SW_OUT.Current_System_Mode));

  assert (is_active = DEFS__is_active(GPCA_SW_OUT.Current_System_Mode));

  assert (level_4_alarm = (OP_CMD_IN.System_Start and (((((((((((GPCA_SW_OUT.Reservoir_Volume < CONST_IN.Empty_Reservoir) and (pre is_therapy)) or SENSOR_IN.Temp) or SENSOR_IN.Air_Pressure) or SENSOR_IN.Humidity) or SENSOR_IN.CPU_Error) or SENSOR_IN.Battery_Depleted) or SENSOR_IN.RTC_Error) or SENSOR_IN.Memory_Corrupted) or SENSOR_IN.Pump_Too_Hot) or SENSOR_IN.Watchdog_Interrupted)));

  assert (level_3_alarm = (OP_CMD_IN.System_Start and ((((((GPCA_SW_OUT.Volume_Infused > DB_IN.VTBI_High) and (pre is_therapy)) or SENSOR_IN.Air_In_Line) or SENSOR_IN.Occlusion) or SENSOR_IN.Door_Open) or Is_Over_Infusion)));

  assert (level_2_alarm = ((OP_CMD_IN.System_Start and (pre is_therapy)) and (GPCA_SW_OUT.Reservoir_Volume < CONST_IN.Low_Reservoir)));

  assert (level_1_alarm = (OP_CMD_IN.System_Start and ((((((((SENSOR_IN.Pump_Overheated or SENSOR_IN.Supply_Voltage) or SENSOR_IN.Battery_Low) or SENSOR_IN.Battery_Unable_To_Charge) or ((pre is_therapy) and SENSOR_IN.Flow_Rate_Not_Stable)) or is_under_infusion) or (Idle_Time_Counter > CONST_IN.Max_Idle_Duration)) or (Paused_Time_Counter > CONST_IN.Max_Paused_Duration)) or (Config_Timer > CONST_IN.Config_Warning_Duration))));

  assert (Patient_Bolus_Delivered_Count = (0 -> (if ((GPCA_SW_OUT.Current_System_Mode = 3) and (not ((pre GPCA_SW_OUT.Current_System_Mode) = 3))) then ((pre Patient_Bolus_Delivered_Count) + 1) else (pre Patient_Bolus_Delivered_Count))));

  assert (mode_range = ((((((((GPCA_SW_OUT.Current_System_Mode = 0) or (GPCA_SW_OUT.Current_System_Mode = 1)) or (GPCA_SW_OUT.Current_System_Mode = 2)) or (GPCA_SW_OUT.Current_System_Mode = 4)) or (GPCA_SW_OUT.Current_System_Mode = 3)) or (GPCA_SW_OUT.Current_System_Mode = 7)) or (GPCA_SW_OUT.Current_System_Mode = 6)) or (GPCA_SW_OUT.Current_System_Mode = 8)));

  assert (not_system_start_implies_mode_0 = ((not OP_CMD_IN.System_Start) => (GPCA_SW_OUT.Current_System_Mode = 0)));

  assert (initial_system_start_implies_mode_idle = ((sys_initial and OP_CMD_IN.System_Start) => (GPCA_SW_OUT.Current_System_Mode = 1)));

  assert (off_to_on_implies_mode_idle = ((((not sys_initial) and ((pre GPCA_SW_OUT.Current_System_Mode) = 0)) and OP_CMD_IN.System_Start) => (GPCA_SW_OUT.Current_System_Mode = 1)));

  assert (empty_reservoir_and_In_therapy_implies_no_flow = (true -> (((OP_CMD_IN.System_Start and (pre is_therapy)) and (GPCA_SW_OUT.Reservoir_Volume < CONST_IN.Empty_Reservoir)) => (GPCA_SW_OUT.Commanded_Flow_Rate = 0))));

  assert (environmental_error_implies_no_flow = (true -> ((OP_CMD_IN.System_Start and (((SENSOR_IN.Temp or SENSOR_IN.Air_Pressure) or SENSOR_IN.CPU_Error) or SENSOR_IN.Humidity)) => (GPCA_SW_OUT.Commanded_Flow_Rate = 0))));

  assert (hardware_error_implies_no_flow = (true -> ((OP_CMD_IN.System_Start and (((((SENSOR_IN.Battery_Depleted or SENSOR_IN.RTC_Error) or SENSOR_IN.CPU_Error) or SENSOR_IN.Memory_Corrupted) or SENSOR_IN.Pump_Too_Hot) or SENSOR_IN.Watchdog_Interrupted)) => (GPCA_SW_OUT.Commanded_Flow_Rate = 0))));

  assert (volume_infused_exceeds_VTBI_Hi = (true -> (((OP_CMD_IN.System_Start and (pre is_therapy)) and (GPCA_SW_OUT.Volume_Infused > DB_IN.VTBI_High)) => (GPCA_SW_OUT.Commanded_Flow_Rate <= GPCA_SW_OUT.Flow_Rate_KVO))));

  assert (flow_rate_exceeds_flow_rate_Hi = (true -> (((OP_CMD_IN.System_Start and (pre is_therapy)) and (SENSOR_IN.Flow_Rate > DB_IN.Flow_Rate_High)) => (GPCA_SW_OUT.Commanded_Flow_Rate <= GPCA_SW_OUT.Flow_Rate_KVO))));

  assert (AirInLine_implies_flow_at_most_KVO = ((OP_CMD_IN.System_Start and SENSOR_IN.Air_In_Line) => (GPCA_SW_OUT.Commanded_Flow_Rate <= GPCA_SW_OUT.Flow_Rate_KVO)));

  assert (occlusion_implies_flow_at_most_KVO = ((OP_CMD_IN.System_Start and SENSOR_IN.Occlusion) => (GPCA_SW_OUT.Commanded_Flow_Rate <= GPCA_SW_OUT.Flow_Rate_KVO)));

  assert (door_open_implies_flow_at_most_KVO = (true -> ((OP_CMD_IN.System_Start and SENSOR_IN.Door_Open) => (GPCA_SW_OUT.Commanded_Flow_Rate <= GPCA_SW_OUT.Flow_Rate_KVO))));

  assert (low_reservoir_and_In_therapy_implies_no_bolus = (true -> (((OP_CMD_IN.System_Start and (pre is_therapy)) and (GPCA_SW_OUT.Reservoir_Volume < CONST_IN.Low_Reservoir)) => ((not (GPCA_SW_OUT.Current_System_Mode = 3)) or (not (GPCA_SW_OUT.Current_System_Mode = 4))))));

  assert (infusion_cancel_implies_idle = (true -> ((OP_CMD_IN.System_Start and OP_CMD_IN.Infusion_Cancel) => (GPCA_SW_OUT.Current_System_Mode = 1))));

  assert (infusion_pause_implies_flow_kvo = (true -> ((OP_CMD_IN.System_Start and OP_CMD_IN.Infusion_Inhibit) => (GPCA_SW_OUT.Commanded_Flow_Rate <= GPCA_SW_OUT.Flow_Rate_KVO))));

  assert (no_audio_if_audio_disabled = ((OP_CMD_IN.System_Start and (OP_CMD_IN.Disable_Audio > 0)) => ((GPCA_SW_OUT.Audio_Notification_Command = 0) and (GPCA_SW_OUT.Is_Audio_Disabled = OP_CMD_IN.Disable_Audio))));

  assert (no_config_implies_mode_1 = ((OP_CMD_IN.System_Start and (GPCA_SW_OUT.Configured < 1)) => (GPCA_SW_OUT.Current_System_Mode = 1)));

  assert (empty_reservoir_implies_audio = (true -> ((((OP_CMD_IN.System_Start and (pre is_therapy)) and (GPCA_SW_OUT.Reservoir_Volume < CONST_IN.Empty_Reservoir)) and (OP_CMD_IN.Disable_Audio = 0)) => ((GPCA_SW_OUT.Audio_Notification_Command = CONST_IN.Audio_Level) and (GPCA_SW_OUT.Is_Audio_Disabled = OP_CMD_IN.Disable_Audio)))));

  assert (empty_reservoir_implies_visual_1 = (true -> (((OP_CMD_IN.System_Start and (pre is_therapy)) and (GPCA_SW_OUT.Reservoir_Volume < CONST_IN.Empty_Reservoir)) => (GPCA_SW_OUT.Notification_Message = 1))));

  assert (no_patient_request_imples_no_pbolus = (((OP_CMD_IN.System_Start and (not ((pre GPCA_SW_OUT.Current_System_Mode) = 3))) and (not PATIENT_IN.Patient_Bolus_Request)) => (not (GPCA_SW_OUT.Current_System_Mode = 3))));

  assert (off_imples_fr_0 = ((GPCA_SW_OUT.Current_System_Mode = 0) => (GPCA_SW_OUT.Commanded_Flow_Rate = 0)));

  assert (idle_imples_fr_0 = ((GPCA_SW_OUT.Current_System_Mode = 1) => (GPCA_SW_OUT.Commanded_Flow_Rate = 0)));

  assert (system_stop_implies_off = (true -> ((((pre is_on) and OP_CMD_IN.System_Stop) and (not OP_CMD_IN.Infusion_Inhibit)) => (GPCA_SW_OUT.Current_System_Mode = 0))));

  assert (infusion_initiation_requires_prescription = ((is_on and GPCA_SW_OUT.New_Infusion) => (GPCA_SW_OUT.Configured > 0)));

  assert (basal_fr = ((GPCA_SW_OUT.Current_System_Mode = 2) => (GPCA_SW_OUT.Commanded_Flow_Rate = GPCA_SW_OUT.Flow_Rate_Basal)));

  assert (ignore_patient_bolus_request = (true -> ((PATIENT_IN.Patient_Bolus_Request and (((((level_4_alarm or level_3_alarm) or level_2_alarm) or (Patient_Bolus_Delivered_Count > GPCA_SW_OUT.Max_Number_of_Patient_Bolus)) or GPCA_SW_OUT.Is_Locked_Out) or ((pre GPCA_SW_OUT.Current_System_Mode) = 3))) => (not (GPCA_SW_OUT.Current_System_Mode = 3)))));

  assert (infusion_complete_implies_idle = (true -> ((((OP_CMD_IN.System_Start and (pre is_active)) and ((GPCA_SW_OUT.Actual_Infusion_Duration >= GPCA_SW_OUT.Infusion_Total_Duration) or (GPCA_SW_OUT.Volume_Infused >= GPCA_SW_OUT.VTBI_Total))) and (not OP_CMD_IN.Infusion_Inhibit)) => (GPCA_SW_OUT.Current_System_Mode = 1))));

  assert (infusion_inhibit_implies_paused = (true -> (((((pre is_active) and OP_CMD_IN.Infusion_Inhibit) and OP_CMD_IN.System_Start) and (GPCA_SW_OUT.Configured > 0)) => (((GPCA_SW_OUT.Current_System_Mode = 8) or (GPCA_SW_OUT.Current_System_Mode = 6)) or (GPCA_SW_OUT.Current_System_Mode = 7)))));

  assert (basal_transition_to_pbolus = (true -> (((((pre GPCA_SW_OUT.Current_System_Mode) = 2) and PATIENT_IN.Patient_Bolus_Request) and (not ((((level_4_alarm or level_3_alarm) or level_2_alarm) or (Patient_Bolus_Delivered_Count > GPCA_SW_OUT.Max_Number_of_Patient_Bolus)) or GPCA_SW_OUT.Is_Locked_Out))) => (GPCA_SW_OUT.Current_System_Mode = 3))));

  assert (sbolus_transition_to_pbolus = (true -> (((((pre GPCA_SW_OUT.Current_System_Mode) = 4) and PATIENT_IN.Patient_Bolus_Request) and (not ((((level_4_alarm or level_3_alarm) or level_2_alarm) or (Patient_Bolus_Delivered_Count > GPCA_SW_OUT.Max_Number_of_Patient_Bolus)) or GPCA_SW_OUT.Is_Locked_Out))) => (GPCA_SW_OUT.Current_System_Mode = 3))));

  assert (level_4_alarm_visual = (true -> (level_4_alarm => (((GPCA_SW_OUT.Notification_Message = 1) or (GPCA_SW_OUT.Notification_Message = 2)) or (GPCA_SW_OUT.Notification_Message = 3)))));

  assert (empty_res_visual_implies_error = (true -> ((GPCA_SW_OUT.Notification_Message = 1) => ((OP_CMD_IN.System_Start and (pre is_therapy)) and (GPCA_SW_OUT.Reservoir_Volume < CONST_IN.Empty_Reservoir)))));

  assert (enviro_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 2) => (((SENSOR_IN.Temp or SENSOR_IN.Air_Pressure) or SENSOR_IN.CPU_Error) or SENSOR_IN.Humidity)));

  assert (hardware_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 3) => (((((SENSOR_IN.Battery_Depleted or SENSOR_IN.RTC_Error) or SENSOR_IN.CPU_Error) or SENSOR_IN.Memory_Corrupted) or SENSOR_IN.Pump_Too_Hot) or SENSOR_IN.Watchdog_Interrupted)));

  assert (level_3_alarm_visual = (true -> ((level_3_alarm and (not level_4_alarm)) => (((((GPCA_SW_OUT.Notification_Message = 4) or (GPCA_SW_OUT.Notification_Message = 5)) or (GPCA_SW_OUT.Notification_Message = 6)) or (GPCA_SW_OUT.Notification_Message = 7)) or (GPCA_SW_OUT.Notification_Message = 8)))));

  assert (over_fr_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 4) => Is_Over_Infusion));

  assert (over_vtbi_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 5) => ((OP_CMD_IN.System_Start and (pre is_therapy)) and (GPCA_SW_OUT.Volume_Infused > DB_IN.VTBI_High))));

  assert (air_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 6) => SENSOR_IN.Air_In_Line));

  assert (occlusion_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 7) => SENSOR_IN.Occlusion));

  assert (door_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 8) => SENSOR_IN.Door_Open));

  assert (level_2_alarm_visual = (true -> (((level_2_alarm and (not level_3_alarm)) and (not level_4_alarm)) => (GPCA_SW_OUT.Notification_Message = 9))));

  assert (low_res_visial_implies_error = ((GPCA_SW_OUT.Notification_Message = 9) => ((OP_CMD_IN.System_Start and (pre is_therapy)) and (GPCA_SW_OUT.Reservoir_Volume < CONST_IN.Low_Reservoir))));

  assert (level_1_alarm_visual = (true -> ((((level_1_alarm and (not level_2_alarm)) and (not level_3_alarm)) and (not level_4_alarm)) => (((((((((GPCA_SW_OUT.Notification_Message = 10) or (GPCA_SW_OUT.Notification_Message = 11)) or (GPCA_SW_OUT.Notification_Message = 12)) or (GPCA_SW_OUT.Notification_Message = 13)) or (GPCA_SW_OUT.Notification_Message = 14)) or (GPCA_SW_OUT.Notification_Message = 15)) or (GPCA_SW_OUT.Notification_Message = 16)) or (GPCA_SW_OUT.Notification_Message = 17)) or (GPCA_SW_OUT.Notification_Message = 18)))));

  assert (under_fr_visual_implies_error = (true -> ((GPCA_SW_OUT.Notification_Message = 10) => is_under_infusion)));

  assert (unstable_fr_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 11) => SENSOR_IN.Flow_Rate_Not_Stable));

  assert (idle_time_visual_implies_error = (true -> ((GPCA_SW_OUT.Notification_Message = 12) => (Idle_Time_Counter > CONST_IN.Max_Idle_Duration))));

  assert (pause_time_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 13) => (Paused_Time_Counter > CONST_IN.Max_Paused_Duration)));

  assert (config_time_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 14) => (Config_Timer > CONST_IN.Config_Warning_Duration)));

  assert (battery_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 15) => ((SENSOR_IN.Supply_Voltage or SENSOR_IN.Battery_Low) or SENSOR_IN.Battery_Unable_To_Charge)));

  assert (pump_hot_visual_implies_error = ((GPCA_SW_OUT.Notification_Message = 16) => SENSOR_IN.Pump_Overheated));

  assert (alarm_3_or_4_implies_audio = (true -> (((level_3_alarm or level_4_alarm) and (OP_CMD_IN.Disable_Audio = 0)) => (GPCA_SW_OUT.Audio_Notification_Command = CONST_IN.Audio_Level))));

  assert (configuration_type_request = (OP_CMD_IN.Data_Config => GPCA_SW_OUT.Request_Config_Type));

  assert (validate_configured_patient_drug_info = (((GPCA_SW_OUT.Configured = 1) and (((PRES_IN.Drug_Name = 0) or ((PRES_IN.Drug_Concentration < DB_IN.Drug_Concentration_Low) or (PRES_IN.Drug_Concentration > DB_IN.Drug_Concentration_High))) or (PRES_IN.Entered_Reservoir_Volume < CONST_IN.Empty_Reservoir))) => ((GPCA_SW_OUT.Error_Message_ID = 5) and GPCA_SW_OUT.Request_Patient_Drug_Info)));

  assert (validate_configured_infusion_info = (((GPCA_SW_OUT.Configured > 0) and ((((((((((((PRES_IN.VTBI_Total > DB_IN.VTBI_High) or (PRES_IN.VTBI_Total < DB_IN.VTBI_Low)) or (PRES_IN.Flow_Rate_Basal < DB_IN.Flow_Rate_Low)) or (PRES_IN.Flow_Rate_Basal > DB_IN.Flow_Rate_High)) or (PRES_IN.Flow_Rate_Intermittent_Bolus < DB_IN.Flow_Rate_Low)) or (PRES_IN.Flow_Rate_Intermittent_Bolus > DB_IN.Flow_Rate_High)) or (PRES_IN.Flow_Rate_Patient_Bolus < DB_IN.Flow_Rate_Low)) or (PRES_IN.Flow_Rate_Patient_Bolus > DB_IN.Flow_Rate_High)) or (PRES_IN.Duration_Intermittent_Bolus > PRES_IN.Interval_Intermittent_Bolus)) or (PRES_IN.Max_Number_of_Patient_Bolus > DB_IN.Number_Max_Patient_Bolus)) or (PRES_IN.Flow_Rate_Intermittent_Bolus < PRES_IN.Flow_Rate_Basal)) or (PRES_IN.Flow_Rate_Patient_Bolus < PRES_IN.Flow_Rate_Basal))) => GPCA_SW_OUT.Request_Patient_Drug_Info));

  assert true;

  assert (((time = 0.0) -> (time > (pre time))) and (true -> (time = ((pre time) + (time - (pre time))))));

  --%PROPERTY __ASSUME__HIST;
  --%PROPERTY __GUARANTEE0;
  --%PROPERTY __GUARANTEE1;
  --%PROPERTY __GUARANTEE2;
  --%PROPERTY __GUARANTEE3;
  --%PROPERTY __GUARANTEE4;
  --%PROPERTY __GUARANTEE5;
  --%PROPERTY __GUARANTEE6;
  --%PROPERTY __GUARANTEE7;
  --%PROPERTY __GUARANTEE8;
  --%PROPERTY __GUARANTEE9;
  --%PROPERTY __GUARANTEE10;
  --%PROPERTY __GUARANTEE11;
  --%PROPERTY __GUARANTEE12;
  --%PROPERTY __GUARANTEE13;
  --%PROPERTY __GUARANTEE14;
  --%PROPERTY __GUARANTEE15;
  --%PROPERTY __GUARANTEE16;
  --%PROPERTY __GUARANTEE17;
  --%PROPERTY __GUARANTEE18;
  --%PROPERTY __GUARANTEE19;
  --%PROPERTY __GUARANTEE20;
  --%PROPERTY __GUARANTEE21;
  --%PROPERTY __GUARANTEE22;
  --%PROPERTY __GUARANTEE23;
  --%PROPERTY __GUARANTEE24;
  --%PROPERTY __GUARANTEE25;
  --%PROPERTY __GUARANTEE26;
  --%PROPERTY __GUARANTEE27;
  --%PROPERTY __GUARANTEE28;
  --%PROPERTY __GUARANTEE29;
  --%PROPERTY __GUARANTEE30;
  --%PROPERTY __GUARANTEE31;
  --%PROPERTY __GUARANTEE32;
  --%PROPERTY __GUARANTEE33;
  --%PROPERTY __GUARANTEE34;
  --%PROPERTY __GUARANTEE35;
  --%PROPERTY __GUARANTEE36;
  --%PROPERTY __GUARANTEE37;
  --%PROPERTY __GUARANTEE38;
  --%PROPERTY __GUARANTEE39;
  --%PROPERTY __GUARANTEE40;
  --%PROPERTY __GUARANTEE41;
  --%PROPERTY __GUARANTEE42;
  --%PROPERTY __GUARANTEE43;
  --%PROPERTY __GUARANTEE44;
  --%PROPERTY __GUARANTEE45;
  --%PROPERTY __GUARANTEE46;
  --%PROPERTY __GUARANTEE47;
  --%PROPERTY __GUARANTEE48;
  --%PROPERTY __GUARANTEE49;
  --%PROPERTY __GUARANTEE50;
  --%PROPERTY __GUARANTEE51;
  --%PROPERTY __GUARANTEE52;
  --%PROPERTY __GUARANTEE53;
  --%PROPERTY __GUARANTEE54;
  --%PROPERTY __GUARANTEE55;
  --%PROPERTY __GUARANTEE56;
  --%PROPERTY __GUARANTEE57;
  --%PROPERTY __GUARANTEE58;
  --%PROPERTY __GUARANTEE59;

  --%IVC __ASSUME0, __ASSUME1, __ASSUME2, __ASSUME3, __ASSUME4, __ASSUME5;

tel;

node DEFS__Is_Infusion_above_tolerance(
  actual_flow_rate : int;
  desired_flow_rate : int;
  tol : int
) returns (
  above : bool
);
let
  above = (actual_flow_rate > (desired_flow_rate + tol));

tel;

node _CLOCKED_DEFS__Is_Infusion_above_tolerance(
  _CLK : bool;
  _INIT : bool;
  actual_flow_rate : int;
  desired_flow_rate : int;
  tol : int
) returns (
  above : bool
);
let
  above = (if _CLK then (actual_flow_rate > (desired_flow_rate + tol)) else (pre above));

tel;

node DEFS__Is_Infusion_below_tolerance(
  actual_flow_rate : int;
  desired_flow_rate : int;
  tol : int
) returns (
  under : bool
);
let
  under = (actual_flow_rate < (desired_flow_rate - tol));

tel;

node _CLOCKED_DEFS__Is_Infusion_below_tolerance(
  _CLK : bool;
  _INIT : bool;
  actual_flow_rate : int;
  desired_flow_rate : int;
  tol : int
) returns (
  under : bool
);
let
  under = (if _CLK then (actual_flow_rate < (desired_flow_rate - tol)) else (pre under));

tel;

node DEFS__is_therapy(
  mode : int
) returns (
  _outvar : bool
);
let
  _outvar = (mode > 1);

tel;

node _CLOCKED_DEFS__is_therapy(
  _CLK : bool;
  _INIT : bool;
  mode : int
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then (mode > 1) else (pre _outvar));

tel;

node DEFS__is_active(
  mode : int
) returns (
  _outvar : bool
);
let
  _outvar = (((mode = 2) or (mode = 3)) or (mode = 4));

tel;

node _CLOCKED_DEFS__is_active(
  _CLK : bool;
  _INIT : bool;
  mode : int
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then (((mode = 2) or (mode = 3)) or (mode = 4)) else (pre _outvar));

tel;

node DEFS__is_idle(
  mode : int
) returns (
  _outvar : bool
);
let
  _outvar = (mode = 1);

tel;

node _CLOCKED_DEFS__is_idle(
  _CLK : bool;
  _INIT : bool;
  mode : int
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then (mode = 1) else (pre _outvar));

tel;

node DEFS__is_on(
  mode : int
) returns (
  _outvar : bool
);
let
  _outvar = (mode > 0);

tel;

node _CLOCKED_DEFS__is_on(
  _CLK : bool;
  _INIT : bool;
  mode : int
) returns (
  _outvar : bool
);
let
  _outvar = (if _CLK then (mode > 0) else (pre _outvar));

tel;

node __HIST(
  input : bool
) returns (
  hist : bool
);
let
  hist = (input -> ((pre hist) and input));

tel;

node __MinPos(
  a : real;
  b : real
) returns (
  ret : real
);
let
  ret = (if (a <= 0.0) then b else (if (b <= 0.0) then a else (if (a <= b) then a else b)));

tel;

node __Rise(
  input : bool
) returns (
  output : bool
);
let
  output = (input -> ((pre (not input)) and input));

tel;

node __Fall(
  input : bool
) returns (
  output : bool
);
let
  output = ((not input) -> ((pre input) and (not input)));

tel;

